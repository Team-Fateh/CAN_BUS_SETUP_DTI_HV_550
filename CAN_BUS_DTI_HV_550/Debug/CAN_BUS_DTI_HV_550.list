
CAN_BUS_DTI_HV_550.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d08  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  08008ed8  08008ed8  00009ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800944c  0800944c  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800944c  0800944c  0000a44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009454  08009454  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009454  08009454  0000a454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009458  08009458  0000a458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800945c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  200001d4  08009630  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08009630  0000b470  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0cc  00000000  00000000  0000b202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002190  00000000  00000000  000182ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0001a460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ff  00000000  00000000  0001b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d31  00000000  00000000  0001b92f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df3c  00000000  00000000  0003e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf7ad  00000000  00000000  0004c59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011bd49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d4  00000000  00000000  0011bd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00120360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008ec0 	.word	0x08008ec0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08008ec0 	.word	0x08008ec0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 800106a:	2300      	movs	r3, #0
 800106c:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 800106e:	2300      	movs	r3, #0
 8001070:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8001076:	2300      	movs	r3, #0
 8001078:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 800107a:	2300      	movs	r3, #0
 800107c:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 800107e:	2300      	movs	r3, #0
 8001080:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8001082:	2300      	movs	r3, #0
 8001084:	70fb      	strb	r3, [r7, #3]

  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;
 8001086:	2300      	movs	r3, #0
 8001088:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 800108a:	2300      	movs	r3, #0
 800108c:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 800108e:	2300      	movs	r3, #0
 8001090:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 8001096:	2300      	movs	r3, #0
 8001098:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 800109a:	2308      	movs	r3, #8
 800109c:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 80010a2:	2300      	movs	r3, #0
 80010a4:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 80010a6:	2300      	movs	r3, #0
 80010a8:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 80010aa:	2300      	movs	r3, #0
 80010ac:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 80010b2:	2300      	movs	r3, #0
 80010b4:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 80010ba:	2300      	movs	r3, #0
 80010bc:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 80010be:	2300      	movs	r3, #0
 80010c0:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 80010c6:	2300      	movs	r3, #0
 80010c8:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 80010ca:	2300      	movs	r3, #0
 80010cc:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 80010ce:	2300      	movs	r3, #0
 80010d0:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 80010d6:	2300      	movs	r3, #0
 80010d8:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 80010da:	2308      	movs	r3, #8
 80010dc:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 80010e2:	2300      	movs	r3, #0
 80010e4:	72fb      	strb	r3, [r7, #11]

  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 80010e6:	f000 f943 	bl	8001370 <MCP2515_Initialize>
 80010ea:	4603      	mov	r3, r0
 80010ec:	f083 0301 	eor.w	r3, r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <CANSPI_Initialize+0x9a>
  {
    return false;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e05e      	b.n	80011b8 <CANSPI_Initialize+0x158>
  }

  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 80010fa:	f000 f95b 	bl	80013b4 <MCP2515_SetConfigMode>
 80010fe:	4603      	mov	r3, r0
 8001100:	f083 0301 	eor.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <CANSPI_Initialize+0xae>
  {
    return false;
 800110a:	2300      	movs	r3, #0
 800110c:	e054      	b.n	80011b8 <CANSPI_Initialize+0x158>
  }

  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	461a      	mov	r2, r3
 8001112:	2123      	movs	r1, #35	@ 0x23
 8001114:	2020      	movs	r0, #32
 8001116:	f000 f9f1 	bl	80014fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800111a:	463b      	mov	r3, r7
 800111c:	461a      	mov	r2, r3
 800111e:	2127      	movs	r1, #39	@ 0x27
 8001120:	2024      	movs	r0, #36	@ 0x24
 8001122:	f000 f9eb 	bl	80014fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	461a      	mov	r2, r3
 800112c:	2103      	movs	r1, #3
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f9e4 	bl	80014fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	461a      	mov	r2, r3
 800113a:	2107      	movs	r1, #7
 800113c:	2004      	movs	r0, #4
 800113e:	f000 f9dd 	bl	80014fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	461a      	mov	r2, r3
 8001148:	210b      	movs	r1, #11
 800114a:	2008      	movs	r0, #8
 800114c:	f000 f9d6 	bl	80014fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	461a      	mov	r2, r3
 8001156:	2113      	movs	r1, #19
 8001158:	2010      	movs	r0, #16
 800115a:	f000 f9cf 	bl	80014fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	461a      	mov	r2, r3
 8001164:	2117      	movs	r1, #23
 8001166:	2014      	movs	r0, #20
 8001168:	f000 f9c8 	bl	80014fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	461a      	mov	r2, r3
 8001172:	211b      	movs	r1, #27
 8001174:	2018      	movs	r0, #24
 8001176:	f000 f9c1 	bl	80014fc <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 800117a:	2104      	movs	r1, #4
 800117c:	2060      	movs	r0, #96	@ 0x60
 800117e:	f000 f999 	bl	80014b4 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8001182:	2101      	movs	r1, #1
 8001184:	2070      	movs	r0, #112	@ 0x70
 8001186:	f000 f995 	bl	80014b4 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 800118a:	2100      	movs	r1, #0
 800118c:	202a      	movs	r0, #42	@ 0x2a
 800118e:	f000 f991 	bl	80014b4 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0x90);
 8001192:	2190      	movs	r1, #144	@ 0x90
 8001194:	2029      	movs	r0, #41	@ 0x29
 8001196:	f000 f98d 	bl	80014b4 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x82);
 800119a:	2182      	movs	r1, #130	@ 0x82
 800119c:	2028      	movs	r0, #40	@ 0x28
 800119e:	f000 f989 	bl	80014b4 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 80011a2:	f000 f925 	bl	80013f0 <MCP2515_SetNormalMode>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f083 0301 	eor.w	r3, r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <CANSPI_Initialize+0x156>
    return false;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e000      	b.n	80011b8 <CANSPI_Initialize+0x158>

  return true;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <CANSPI_Receive>:
  return (returnValue);
}

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80011cc:	f000 f9c0 	bl	8001550 <MCP2515_GetRxStatus>
 80011d0:	4603      	mov	r3, r0
 80011d2:	733b      	strb	r3, [r7, #12]

  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 80011d4:	7b3b      	ldrb	r3, [r7, #12]
 80011d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d066      	beq.n	80012ae <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80011e0:	7b3b      	ldrb	r3, [r7, #12]
 80011e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b40      	cmp	r3, #64	@ 0x40
 80011ea:	bf0c      	ite	eq
 80011ec:	2301      	moveq	r3, #1
 80011ee:	2300      	movne	r3, #0
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	7b3b      	ldrb	r3, [r7, #12]
 80011f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80011fc:	bf0c      	ite	eq
 80011fe:	2301      	moveq	r3, #1
 8001200:	2300      	movne	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	220d      	movs	r2, #13
 8001212:	4619      	mov	r1, r3
 8001214:	2090      	movs	r0, #144	@ 0x90
 8001216:	f000 f92b 	bl	8001470 <MCP2515_ReadRxSequence>
 800121a:	e00c      	b.n	8001236 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 800121c:	7b3b      	ldrb	r3, [r7, #12]
 800121e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b80      	cmp	r3, #128	@ 0x80
 8001226:	d106      	bne.n	8001236 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	220d      	movs	r2, #13
 800122e:	4619      	mov	r1, r3
 8001230:	2094      	movs	r0, #148	@ 0x94
 8001232:	f000 f91d 	bl	8001470 <MCP2515_ReadRxSequence>
    }

    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8001236:	7b3b      	ldrb	r3, [r7, #12]
 8001238:	f003 0318 	and.w	r3, r3, #24
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b10      	cmp	r3, #16
 8001240:	d10c      	bne.n	800125c <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2202      	movs	r2, #2
 8001246:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8001248:	7cb8      	ldrb	r0, [r7, #18]
 800124a:	7cf9      	ldrb	r1, [r7, #19]
 800124c:	7c3a      	ldrb	r2, [r7, #16]
 800124e:	7c7b      	ldrb	r3, [r7, #17]
 8001250:	f000 f832 	bl	80012b8 <convertReg2ExtendedCANid>
 8001254:	4602      	mov	r2, r0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	e00b      	b.n	8001274 <CANSPI_Receive+0xb4>
    }
    else
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8001262:	7c3b      	ldrb	r3, [r7, #16]
 8001264:	7c7a      	ldrb	r2, [r7, #17]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f863 	bl	8001334 <convertReg2StandardCANid>
 800126e:	4602      	mov	r2, r0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8001274:	7d3a      	ldrb	r2, [r7, #20]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800127a:	7d7a      	ldrb	r2, [r7, #21]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8001280:	7dba      	ldrb	r2, [r7, #22]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8001286:	7dfa      	ldrb	r2, [r7, #23]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 800128c:	7e3a      	ldrb	r2, [r7, #24]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8001292:	7e7a      	ldrb	r2, [r7, #25]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8001298:	7eba      	ldrb	r2, [r7, #26]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800129e:	7efa      	ldrb	r2, [r7, #27]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80012a4:	7f3a      	ldrb	r2, [r7, #28]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 80012aa:	2301      	movs	r3, #1
 80012ac:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 80012ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80012b8:	b490      	push	{r4, r7}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4604      	mov	r4, r0
 80012c0:	4608      	mov	r0, r1
 80012c2:	4611      	mov	r1, r2
 80012c4:	461a      	mov	r2, r3
 80012c6:	4623      	mov	r3, r4
 80012c8:	71fb      	strb	r3, [r7, #7]
 80012ca:	4603      	mov	r3, r0
 80012cc:	71bb      	strb	r3, [r7, #6]
 80012ce:	460b      	mov	r3, r1
 80012d0:	717b      	strb	r3, [r7, #5]
 80012d2:	4613      	mov	r3, r2
 80012d4:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80012de:	793b      	ldrb	r3, [r7, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80012e6:	793b      	ldrb	r3, [r7, #4]
 80012e8:	095b      	lsrs	r3, r3, #5
 80012ea:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80012ec:	797b      	ldrb	r3, [r7, #5]
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80012f2:	7bbb      	ldrb	r3, [r7, #14]
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4413      	add	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4413      	add	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4413      	add	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4413      	add	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8001328:	697b      	ldr	r3, [r7, #20]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bc90      	pop	{r4, r7}
 8001332:	4770      	bx	lr

08001334 <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	460a      	mov	r2, r1
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	4613      	mov	r3, r2
 8001342:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	095b      	lsrs	r3, r3, #5
 8001352:	b2db      	uxtb	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 8001360:	68fb      	ldr	r3, [r7, #12]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 8001376:	2201      	movs	r2, #1
 8001378:	2110      	movs	r1, #16
 800137a:	480c      	ldr	r0, [pc, #48]	@ (80013ac <MCP2515_Initialize+0x3c>)
 800137c:	f001 fab6 	bl	80028ec <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8001380:	230a      	movs	r3, #10
 8001382:	71fb      	strb	r3, [r7, #7]

  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001384:	480a      	ldr	r0, [pc, #40]	@ (80013b0 <MCP2515_Initialize+0x40>)
 8001386:	f002 fcbc 	bl	8003d02 <HAL_SPI_GetState>
 800138a:	4603      	mov	r3, r0
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <MCP2515_Initialize+0x24>
      return true;
 8001390:	2301      	movs	r3, #1
 8001392:	e006      	b.n	80013a2 <MCP2515_Initialize+0x32>

    loop--;
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	3b01      	subs	r3, #1
 8001398:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f1      	bne.n	8001384 <MCP2515_Initialize+0x14>

  return false;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40020000 	.word	0x40020000
 80013b0:	20000218 	.word	0x20000218

080013b4 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80013ba:	2180      	movs	r1, #128	@ 0x80
 80013bc:	200f      	movs	r0, #15
 80013be:	f000 f879 	bl	80014b4 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80013c2:	230a      	movs	r3, #10
 80013c4:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80013c6:	200e      	movs	r0, #14
 80013c8:	f000 f830 	bl	800142c <MCP2515_ReadByte>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80013d2:	2b80      	cmp	r3, #128	@ 0x80
 80013d4:	d101      	bne.n	80013da <MCP2515_SetConfigMode+0x26>
      return true;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e006      	b.n	80013e8 <MCP2515_SetConfigMode+0x34>

    loop--;
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	3b01      	subs	r3, #1
 80013de:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1ef      	bne.n	80013c6 <MCP2515_SetConfigMode+0x12>

  return false;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80013f6:	2100      	movs	r1, #0
 80013f8:	200f      	movs	r0, #15
 80013fa:	f000 f85b 	bl	80014b4 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80013fe:	230a      	movs	r3, #10
 8001400:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8001402:	200e      	movs	r0, #14
 8001404:	f000 f812 	bl	800142c <MCP2515_ReadByte>
 8001408:	4603      	mov	r3, r0
 800140a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <MCP2515_SetNormalMode+0x26>
      return true;
 8001412:	2301      	movs	r3, #1
 8001414:	e006      	b.n	8001424 <MCP2515_SetNormalMode+0x34>

    loop--;
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	3b01      	subs	r3, #1
 800141a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1ef      	bne.n	8001402 <MCP2515_SetNormalMode+0x12>

  return false;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8001436:	2200      	movs	r2, #0
 8001438:	2110      	movs	r1, #16
 800143a:	480c      	ldr	r0, [pc, #48]	@ (800146c <MCP2515_ReadByte+0x40>)
 800143c:	f001 fa56 	bl	80028ec <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 f8a1 	bl	8001588 <SPI_Tx>
  SPI_Tx(address);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f89d 	bl	8001588 <SPI_Tx>
  retVal = SPI_Rx();
 800144e:	f000 f8c1 	bl	80015d4 <SPI_Rx>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8001456:	2201      	movs	r2, #1
 8001458:	2110      	movs	r1, #16
 800145a:	4804      	ldr	r0, [pc, #16]	@ (800146c <MCP2515_ReadByte+0x40>)
 800145c:	f001 fa46 	bl	80028ec <HAL_GPIO_WritePin>

  return retVal;
 8001460:	7bfb      	ldrb	r3, [r7, #15]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40020000 	.word	0x40020000

08001470 <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	4613      	mov	r3, r2
 800147e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001480:	2200      	movs	r2, #0
 8001482:	2110      	movs	r1, #16
 8001484:	480a      	ldr	r0, [pc, #40]	@ (80014b0 <MCP2515_ReadRxSequence+0x40>)
 8001486:	f001 fa31 	bl	80028ec <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	4618      	mov	r0, r3
 800148e:	f000 f87b 	bl	8001588 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8001492:	79bb      	ldrb	r3, [r7, #6]
 8001494:	4619      	mov	r1, r3
 8001496:	6838      	ldr	r0, [r7, #0]
 8001498:	f000 f8ac 	bl	80015f4 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 800149c:	2201      	movs	r2, #1
 800149e:	2110      	movs	r1, #16
 80014a0:	4803      	ldr	r0, [pc, #12]	@ (80014b0 <MCP2515_ReadRxSequence+0x40>)
 80014a2:	f001 fa23 	bl	80028ec <HAL_GPIO_WritePin>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40020000 	.word	0x40020000

080014b4 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	460a      	mov	r2, r1
 80014be:	71fb      	strb	r3, [r7, #7]
 80014c0:	4613      	mov	r3, r2
 80014c2:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80014c4:	2200      	movs	r2, #0
 80014c6:	2110      	movs	r1, #16
 80014c8:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <MCP2515_WriteByte+0x44>)
 80014ca:	f001 fa0f 	bl	80028ec <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 80014ce:	2002      	movs	r0, #2
 80014d0:	f000 f85a 	bl	8001588 <SPI_Tx>
  SPI_Tx(address);
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f856 	bl	8001588 <SPI_Tx>
  SPI_Tx(data);
 80014dc:	79bb      	ldrb	r3, [r7, #6]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f852 	bl	8001588 <SPI_Tx>

  MCP2515_CS_HIGH();
 80014e4:	2201      	movs	r2, #1
 80014e6:	2110      	movs	r1, #16
 80014e8:	4803      	ldr	r0, [pc, #12]	@ (80014f8 <MCP2515_WriteByte+0x44>)
 80014ea:	f001 f9ff 	bl	80028ec <HAL_GPIO_WritePin>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40020000 	.word	0x40020000

080014fc <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	603a      	str	r2, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
 8001508:	460b      	mov	r3, r1
 800150a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800150c:	2200      	movs	r2, #0
 800150e:	2110      	movs	r1, #16
 8001510:	480e      	ldr	r0, [pc, #56]	@ (800154c <MCP2515_WriteByteSequence+0x50>)
 8001512:	f001 f9eb 	bl	80028ec <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8001516:	2002      	movs	r0, #2
 8001518:	f000 f836 	bl	8001588 <SPI_Tx>
  SPI_Tx(startAddress);
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f832 	bl	8001588 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8001524:	79ba      	ldrb	r2, [r7, #6]
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	b2db      	uxtb	r3, r3
 800152c:	3301      	adds	r3, #1
 800152e:	b2db      	uxtb	r3, r3
 8001530:	4619      	mov	r1, r3
 8001532:	6838      	ldr	r0, [r7, #0]
 8001534:	f000 f83a 	bl	80015ac <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8001538:	2201      	movs	r2, #1
 800153a:	2110      	movs	r1, #16
 800153c:	4803      	ldr	r0, [pc, #12]	@ (800154c <MCP2515_WriteByteSequence+0x50>)
 800153e:	f001 f9d5 	bl	80028ec <HAL_GPIO_WritePin>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40020000 	.word	0x40020000

08001550 <MCP2515_GetRxStatus>:
  return retVal;
}

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8001556:	2200      	movs	r2, #0
 8001558:	2110      	movs	r1, #16
 800155a:	480a      	ldr	r0, [pc, #40]	@ (8001584 <MCP2515_GetRxStatus+0x34>)
 800155c:	f001 f9c6 	bl	80028ec <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 8001560:	20b0      	movs	r0, #176	@ 0xb0
 8001562:	f000 f811 	bl	8001588 <SPI_Tx>
  retVal = SPI_Rx();
 8001566:	f000 f835 	bl	80015d4 <SPI_Rx>
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 800156e:	2201      	movs	r2, #1
 8001570:	2110      	movs	r1, #16
 8001572:	4804      	ldr	r0, [pc, #16]	@ (8001584 <MCP2515_GetRxStatus+0x34>)
 8001574:	f001 f9ba 	bl	80028ec <HAL_GPIO_WritePin>

  return retVal;
 8001578:	79fb      	ldrb	r3, [r7, #7]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40020000 	.word	0x40020000

08001588 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8001592:	1df9      	adds	r1, r7, #7
 8001594:	230a      	movs	r3, #10
 8001596:	2201      	movs	r2, #1
 8001598:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <SPI_Tx+0x20>)
 800159a:	f001 ffac 	bl	80034f6 <HAL_SPI_Transmit>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000218 	.word	0x20000218

080015ac <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	230a      	movs	r3, #10
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4803      	ldr	r0, [pc, #12]	@ (80015d0 <SPI_TxBuffer+0x24>)
 80015c2:	f001 ff98 	bl	80034f6 <HAL_SPI_Transmit>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000218 	.word	0x20000218

080015d4 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80015da:	1df9      	adds	r1, r7, #7
 80015dc:	230a      	movs	r3, #10
 80015de:	2201      	movs	r2, #1
 80015e0:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <SPI_Rx+0x1c>)
 80015e2:	f002 f8cc 	bl	800377e <HAL_SPI_Receive>
  return retVal;
 80015e6:	79fb      	ldrb	r3, [r7, #7]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000218 	.word	0x20000218

080015f4 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	b29a      	uxth	r2, r3
 8001604:	230a      	movs	r3, #10
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4803      	ldr	r0, [pc, #12]	@ (8001618 <SPI_RxBuffer+0x24>)
 800160a:	f002 f8b8 	bl	800377e <HAL_SPI_Receive>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000218 	.word	0x20000218

0800161c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	b29a      	uxth	r2, r3
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	4804      	ldr	r0, [pc, #16]	@ (8001644 <_write+0x28>)
 8001634:	f002 fd06 	bl	8004044 <HAL_UART_Transmit>
    return len;
 8001638:	687b      	ldr	r3, [r7, #4]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000270 	.word	0x20000270

08001648 <Decode_CAN_Message>:

void Decode_CAN_Message(CAN_RxHeaderTypeDef *header, uint8_t *data)
{
 8001648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164a:	b097      	sub	sp, #92	@ 0x5c
 800164c:	af06      	add	r7, sp, #24
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
    switch (header->StdId)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f641 720f 	movw	r2, #7951	@ 0x1f0f
 800165a:	4293      	cmp	r3, r2
 800165c:	d010      	beq.n	8001680 <Decode_CAN_Message+0x38>
 800165e:	f641 720f 	movw	r2, #7951	@ 0x1f0f
 8001662:	4293      	cmp	r3, r2
 8001664:	f200 815f 	bhi.w	8001926 <Decode_CAN_Message+0x2de>
 8001668:	2b22      	cmp	r3, #34	@ 0x22
 800166a:	f000 8108 	beq.w	800187e <Decode_CAN_Message+0x236>
 800166e:	2b22      	cmp	r3, #34	@ 0x22
 8001670:	f200 8159 	bhi.w	8001926 <Decode_CAN_Message+0x2de>
 8001674:	2b20      	cmp	r3, #32
 8001676:	d064      	beq.n	8001742 <Decode_CAN_Message+0xfa>
 8001678:	2b21      	cmp	r3, #33	@ 0x21
 800167a:	f000 80b3 	beq.w	80017e4 <Decode_CAN_Message+0x19c>
 800167e:	e152      	b.n	8001926 <Decode_CAN_Message+0x2de>
    {
		case 0x1F0F: // General Data 6: Control mode, Target Iq, Motor position, isMotorStill
		{
			uint8_t control_mode = data[0];
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

			int16_t target_iq_raw = (int16_t)((data[1] << 8) | data[2]);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b21b      	sxth	r3, r3
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	3302      	adds	r3, #2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	b21b      	sxth	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			float target_iq = target_iq_raw / 10.0f;
 80016a0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ac:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80016b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

			uint16_t motor_position_raw = (data[3] << 8) | data[4];
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	3303      	adds	r3, #3
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b21b      	sxth	r3, r3
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	3304      	adds	r3, #4
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
			float motor_position = motor_position_raw / 10.0f;
 80016d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016dc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80016e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016e4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

			uint8_t is_motor_still = data[5];
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	795b      	ldrb	r3, [r3, #5]
 80016ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

			snprintf(uart_buffer,
 80016f0:	f897 603f 	ldrb.w	r6, [r7, #63]	@ 0x3f
 80016f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80016f6:	f7fe ff47 	bl	8000588 <__aeabi_f2d>
 80016fa:	4604      	mov	r4, r0
 80016fc:	460d      	mov	r5, r1
 80016fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001700:	f7fe ff42 	bl	8000588 <__aeabi_f2d>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800170c:	2900      	cmp	r1, #0
 800170e:	d001      	beq.n	8001714 <Decode_CAN_Message+0xcc>
 8001710:	4990      	ldr	r1, [pc, #576]	@ (8001954 <Decode_CAN_Message+0x30c>)
 8001712:	e000      	b.n	8001716 <Decode_CAN_Message+0xce>
 8001714:	4990      	ldr	r1, [pc, #576]	@ (8001958 <Decode_CAN_Message+0x310>)
 8001716:	9104      	str	r1, [sp, #16]
 8001718:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800171c:	e9cd 4500 	strd	r4, r5, [sp]
 8001720:	4633      	mov	r3, r6
 8001722:	4a8e      	ldr	r2, [pc, #568]	@ (800195c <Decode_CAN_Message+0x314>)
 8001724:	2164      	movs	r1, #100	@ 0x64
 8001726:	488e      	ldr	r0, [pc, #568]	@ (8001960 <Decode_CAN_Message+0x318>)
 8001728:	f003 ff68 	bl	80055fc <sniprintf>
					 control_mode,
					 target_iq,
					 motor_position,
					 is_motor_still ? "1" : "0");

			HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 800172c:	488c      	ldr	r0, [pc, #560]	@ (8001960 <Decode_CAN_Message+0x318>)
 800172e:	f7fe fdbf 	bl	80002b0 <strlen>
 8001732:	4603      	mov	r3, r0
 8001734:	b29a      	uxth	r2, r3
 8001736:	2364      	movs	r3, #100	@ 0x64
 8001738:	4989      	ldr	r1, [pc, #548]	@ (8001960 <Decode_CAN_Message+0x318>)
 800173a:	488a      	ldr	r0, [pc, #552]	@ (8001964 <Decode_CAN_Message+0x31c>)
 800173c:	f002 fc82 	bl	8004044 <HAL_UART_Transmit>
			break;
 8001740:	e103      	b.n	800194a <Decode_CAN_Message+0x302>
		}
        case 0x20: // ERPM, Duty, Voltage
        {
            int32_t erpm = (int32_t)((data[0] << 24) | (data[1] << 16) | (data[2] << 8) | data[3]);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	061a      	lsls	r2, r3, #24
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	041b      	lsls	r3, r3, #16
 8001750:	431a      	orrs	r2, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	3302      	adds	r3, #2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	4313      	orrs	r3, r2
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	3203      	adds	r2, #3
 8001760:	7812      	ldrb	r2, [r2, #0]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
            uint16_t duty_raw = (data[4] << 8) | data[5];
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	3304      	adds	r3, #4
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b21b      	sxth	r3, r3
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	b21a      	sxth	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	3305      	adds	r3, #5
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b21b      	sxth	r3, r3
 800177a:	4313      	orrs	r3, r2
 800177c:	b21b      	sxth	r3, r3
 800177e:	81fb      	strh	r3, [r7, #14]
            uint16_t voltage = (data[6] << 8) | data[7];
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	3306      	adds	r3, #6
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b21b      	sxth	r3, r3
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	b21a      	sxth	r2, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	3307      	adds	r3, #7
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b21b      	sxth	r3, r3
 8001794:	4313      	orrs	r3, r2
 8001796:	b21b      	sxth	r3, r3
 8001798:	81bb      	strh	r3, [r7, #12]

            float duty = duty_raw / 10.0f;
 800179a:	89fb      	ldrh	r3, [r7, #14]
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80017a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ac:	edc7 7a02 	vstr	s15, [r7, #8]

            snprintf(uart_buffer,
 80017b0:	68b8      	ldr	r0, [r7, #8]
 80017b2:	f7fe fee9 	bl	8000588 <__aeabi_f2d>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	89b9      	ldrh	r1, [r7, #12]
 80017bc:	9102      	str	r1, [sp, #8]
 80017be:	e9cd 2300 	strd	r2, r3, [sp]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4a68      	ldr	r2, [pc, #416]	@ (8001968 <Decode_CAN_Message+0x320>)
 80017c6:	2164      	movs	r1, #100	@ 0x64
 80017c8:	4865      	ldr	r0, [pc, #404]	@ (8001960 <Decode_CAN_Message+0x318>)
 80017ca:	f003 ff17 	bl	80055fc <sniprintf>
                     sizeof(uart_buffer),
                     "ID: 0x20 | ERPM: %ld | Duty: %.1f %% | Voltage: %u V\r\n",
                     erpm, duty, voltage);
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 80017ce:	4864      	ldr	r0, [pc, #400]	@ (8001960 <Decode_CAN_Message+0x318>)
 80017d0:	f7fe fd6e 	bl	80002b0 <strlen>
 80017d4:	4603      	mov	r3, r0
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	2364      	movs	r3, #100	@ 0x64
 80017da:	4961      	ldr	r1, [pc, #388]	@ (8001960 <Decode_CAN_Message+0x318>)
 80017dc:	4861      	ldr	r0, [pc, #388]	@ (8001964 <Decode_CAN_Message+0x31c>)
 80017de:	f002 fc31 	bl	8004044 <HAL_UART_Transmit>
            break;
 80017e2:	e0b2      	b.n	800194a <Decode_CAN_Message+0x302>
        }

        case 0x21: // AC Current, DC Current
        {
            uint16_t ac_current_raw = (data[0] << 8) | data[1];
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	3301      	adds	r3, #1
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	4313      	orrs	r3, r2
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	83fb      	strh	r3, [r7, #30]
            uint16_t dc_current_raw = (data[2] << 8) | data[3];
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	3302      	adds	r3, #2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b21b      	sxth	r3, r3
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b21a      	sxth	r2, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	3303      	adds	r3, #3
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	b21b      	sxth	r3, r3
 8001810:	4313      	orrs	r3, r2
 8001812:	b21b      	sxth	r3, r3
 8001814:	83bb      	strh	r3, [r7, #28]

            float ac_current = ac_current_raw * 0.01f;
 8001816:	8bfb      	ldrh	r3, [r7, #30]
 8001818:	ee07 3a90 	vmov	s15, r3
 800181c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001820:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800196c <Decode_CAN_Message+0x324>
 8001824:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001828:	edc7 7a06 	vstr	s15, [r7, #24]
            float dc_current = dc_current_raw * 0.1f;
 800182c:	8bbb      	ldrh	r3, [r7, #28]
 800182e:	ee07 3a90 	vmov	s15, r3
 8001832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001836:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001970 <Decode_CAN_Message+0x328>
 800183a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800183e:	edc7 7a05 	vstr	s15, [r7, #20]

            snprintf(uart_buffer,
 8001842:	69b8      	ldr	r0, [r7, #24]
 8001844:	f7fe fea0 	bl	8000588 <__aeabi_f2d>
 8001848:	4604      	mov	r4, r0
 800184a:	460d      	mov	r5, r1
 800184c:	6978      	ldr	r0, [r7, #20]
 800184e:	f7fe fe9b 	bl	8000588 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800185a:	e9cd 4500 	strd	r4, r5, [sp]
 800185e:	4a45      	ldr	r2, [pc, #276]	@ (8001974 <Decode_CAN_Message+0x32c>)
 8001860:	2164      	movs	r1, #100	@ 0x64
 8001862:	483f      	ldr	r0, [pc, #252]	@ (8001960 <Decode_CAN_Message+0x318>)
 8001864:	f003 feca 	bl	80055fc <sniprintf>
                     sizeof(uart_buffer),
                     "ID: 0x21 | AC Current: %.2f A | DC Current: %.2f A\r\n",
                     ac_current, dc_current);
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8001868:	483d      	ldr	r0, [pc, #244]	@ (8001960 <Decode_CAN_Message+0x318>)
 800186a:	f7fe fd21 	bl	80002b0 <strlen>
 800186e:	4603      	mov	r3, r0
 8001870:	b29a      	uxth	r2, r3
 8001872:	2364      	movs	r3, #100	@ 0x64
 8001874:	493a      	ldr	r1, [pc, #232]	@ (8001960 <Decode_CAN_Message+0x318>)
 8001876:	483b      	ldr	r0, [pc, #236]	@ (8001964 <Decode_CAN_Message+0x31c>)
 8001878:	f002 fbe4 	bl	8004044 <HAL_UART_Transmit>
            break;
 800187c:	e065      	b.n	800194a <Decode_CAN_Message+0x302>
        }

        case 0x22: // Ctrl Temp, Motor Temp, Fault Code
        {
            uint16_t ctrl_temp_raw = (data[0] << 8) | data[1];
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b21b      	sxth	r3, r3
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	b21a      	sxth	r2, r3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b21b      	sxth	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	b21b      	sxth	r3, r3
 8001894:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            uint16_t motor_temp_raw = (data[2] << 8) | data[3];
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	3302      	adds	r3, #2
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b21b      	sxth	r3, r3
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	b21a      	sxth	r2, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	3303      	adds	r3, #3
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	4313      	orrs	r3, r2
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	857b      	strh	r3, [r7, #42]	@ 0x2a
            uint8_t fault_code = data[4];
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	791b      	ldrb	r3, [r3, #4]
 80018b4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

            float ctrl_temp = ctrl_temp_raw * 0.1f;
 80018b8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80018ba:	ee07 3a90 	vmov	s15, r3
 80018be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c2:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001970 <Decode_CAN_Message+0x328>
 80018c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            float motor_temp = motor_temp_raw * 0.1f;
 80018ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80018d0:	ee07 3a90 	vmov	s15, r3
 80018d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d8:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001970 <Decode_CAN_Message+0x328>
 80018dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e0:	edc7 7a08 	vstr	s15, [r7, #32]

            snprintf(uart_buffer,
 80018e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018e6:	f7fe fe4f 	bl	8000588 <__aeabi_f2d>
 80018ea:	4604      	mov	r4, r0
 80018ec:	460d      	mov	r5, r1
 80018ee:	6a38      	ldr	r0, [r7, #32]
 80018f0:	f7fe fe4a 	bl	8000588 <__aeabi_f2d>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 80018fc:	9104      	str	r1, [sp, #16]
 80018fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001902:	e9cd 4500 	strd	r4, r5, [sp]
 8001906:	4a1c      	ldr	r2, [pc, #112]	@ (8001978 <Decode_CAN_Message+0x330>)
 8001908:	2164      	movs	r1, #100	@ 0x64
 800190a:	4815      	ldr	r0, [pc, #84]	@ (8001960 <Decode_CAN_Message+0x318>)
 800190c:	f003 fe76 	bl	80055fc <sniprintf>
                     sizeof(uart_buffer),
                     "ID: 0x22 | Ctrl Temp: %.1f °C | Motor Temp: %.1f °C | Fault: 0x%02X\r\n",
                     ctrl_temp, motor_temp, fault_code);
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8001910:	4813      	ldr	r0, [pc, #76]	@ (8001960 <Decode_CAN_Message+0x318>)
 8001912:	f7fe fccd 	bl	80002b0 <strlen>
 8001916:	4603      	mov	r3, r0
 8001918:	b29a      	uxth	r2, r3
 800191a:	2364      	movs	r3, #100	@ 0x64
 800191c:	4910      	ldr	r1, [pc, #64]	@ (8001960 <Decode_CAN_Message+0x318>)
 800191e:	4811      	ldr	r0, [pc, #68]	@ (8001964 <Decode_CAN_Message+0x31c>)
 8001920:	f002 fb90 	bl	8004044 <HAL_UART_Transmit>
            break;
 8001924:	e011      	b.n	800194a <Decode_CAN_Message+0x302>

        default:
        {
            snprintf(uart_buffer,
                     sizeof(uart_buffer),
                     "Unknown CAN ID: 0x%03lX\r\n", (unsigned long)header->StdId);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
            snprintf(uart_buffer,
 800192a:	4a14      	ldr	r2, [pc, #80]	@ (800197c <Decode_CAN_Message+0x334>)
 800192c:	2164      	movs	r1, #100	@ 0x64
 800192e:	480c      	ldr	r0, [pc, #48]	@ (8001960 <Decode_CAN_Message+0x318>)
 8001930:	f003 fe64 	bl	80055fc <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8001934:	480a      	ldr	r0, [pc, #40]	@ (8001960 <Decode_CAN_Message+0x318>)
 8001936:	f7fe fcbb 	bl	80002b0 <strlen>
 800193a:	4603      	mov	r3, r0
 800193c:	b29a      	uxth	r2, r3
 800193e:	2364      	movs	r3, #100	@ 0x64
 8001940:	4907      	ldr	r1, [pc, #28]	@ (8001960 <Decode_CAN_Message+0x318>)
 8001942:	4808      	ldr	r0, [pc, #32]	@ (8001964 <Decode_CAN_Message+0x31c>)
 8001944:	f002 fb7e 	bl	8004044 <HAL_UART_Transmit>
            break;
 8001948:	bf00      	nop
        }
    }
}
 800194a:	bf00      	nop
 800194c:	3744      	adds	r7, #68	@ 0x44
 800194e:	46bd      	mov	sp, r7
 8001950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001952:	bf00      	nop
 8001954:	08008ed8 	.word	0x08008ed8
 8001958:	08008edc 	.word	0x08008edc
 800195c:	08008ee0 	.word	0x08008ee0
 8001960:	200002b8 	.word	0x200002b8
 8001964:	20000270 	.word	0x20000270
 8001968:	08008f34 	.word	0x08008f34
 800196c:	3c23d70a 	.word	0x3c23d70a
 8001970:	3dcccccd 	.word	0x3dcccccd
 8001974:	08008f6c 	.word	0x08008f6c
 8001978:	08008fa4 	.word	0x08008fa4
 800197c:	08008fec 	.word	0x08008fec

08001980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b092      	sub	sp, #72	@ 0x48
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001986:	f000 fba5 	bl	80020d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800198a:	f000 f825 	bl	80019d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800198e:	f000 f917 	bl	8001bc0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001992:	f000 f8eb 	bl	8001b6c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001996:	f000 f8b3 	bl	8001b00 <MX_SPI1_Init>
  MX_CAN1_Init();
 800199a:	f000 f87d 	bl	8001a98 <MX_CAN1_Init>
  uint16_t readValue;
  uint16_t rxValue;
  uCAN_MSG txMessage;
  uCAN_MSG rxMessage;
//  HAL_ADC_Start(&hadc1);
  CANSPI_Initialize();
 800199e:	f7ff fb5f 	bl	8001060 <CANSPI_Initialize>
  HAL_Delay(1000);
 80019a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019a6:	f000 fc07 	bl	80021b8 <HAL_Delay>
//	    txMessage.frame.data7 = readValue >> 8;
//	    CANSPI_Transmit(&txMessage);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(CANSPI_Receive(&rxMessage))
 80019aa:	f107 0320 	add.w	r3, r7, #32
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fc06 	bl	80011c0 <CANSPI_Receive>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00a      	beq.n	80019d0 <main+0x50>
	    {
//	    	sprintf(test,"Tough%d\n",100);
//	    	HAL_UART_Transmit(&huart2,test,sizeof(test),100);
	    	CAN_RxHeaderTypeDef fakeHeader;
	    	fakeHeader.StdId = rxMessage.frame.id;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	607b      	str	r3, [r7, #4]
	    	Decode_CAN_Message(&fakeHeader, &rxMessage.frame.data0);
 80019be:	f107 0320 	add.w	r3, r7, #32
 80019c2:	f103 0209 	add.w	r2, r3, #9
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fe3c 	bl	8001648 <Decode_CAN_Message>
	    }
	    HAL_Delay(100);
 80019d0:	2064      	movs	r0, #100	@ 0x64
 80019d2:	f000 fbf1 	bl	80021b8 <HAL_Delay>
	    if(CANSPI_Receive(&rxMessage))
 80019d6:	e7e8      	b.n	80019aa <main+0x2a>

080019d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b094      	sub	sp, #80	@ 0x50
 80019dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	2234      	movs	r2, #52	@ 0x34
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 fea3 	bl	8005732 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fc:	2300      	movs	r3, #0
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	4b23      	ldr	r3, [pc, #140]	@ (8001a90 <SystemClock_Config+0xb8>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a04:	4a22      	ldr	r2, [pc, #136]	@ (8001a90 <SystemClock_Config+0xb8>)
 8001a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0c:	4b20      	ldr	r3, [pc, #128]	@ (8001a90 <SystemClock_Config+0xb8>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a18:	2300      	movs	r3, #0
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a94 <SystemClock_Config+0xbc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a24:	4a1b      	ldr	r2, [pc, #108]	@ (8001a94 <SystemClock_Config+0xbc>)
 8001a26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <SystemClock_Config+0xbc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a40:	2310      	movs	r3, #16
 8001a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 fa2b 	bl	8002ea8 <HAL_RCC_OscConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a58:	f000 f920 	bl	8001c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 ff52 	bl	8002920 <HAL_RCC_ClockConfig>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001a82:	f000 f90b 	bl	8001c9c <Error_Handler>
  }
}
 8001a86:	bf00      	nop
 8001a88:	3750      	adds	r7, #80	@ 0x50
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40007000 	.word	0x40007000

08001a98 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <MX_CAN1_Init+0x60>)
 8001a9e:	4a17      	ldr	r2, [pc, #92]	@ (8001afc <MX_CAN1_Init+0x64>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <MX_CAN1_Init+0x60>)
 8001aa4:	2210      	movs	r2, #16
 8001aa6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <MX_CAN1_Init+0x60>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001aae:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <MX_CAN1_Init+0x60>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001ab4:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <MX_CAN1_Init+0x60>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001aba:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <MX_CAN1_Init+0x60>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <MX_CAN1_Init+0x60>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <MX_CAN1_Init+0x60>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001acc:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <MX_CAN1_Init+0x60>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <MX_CAN1_Init+0x60>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ad8:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <MX_CAN1_Init+0x60>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <MX_CAN1_Init+0x60>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ae4:	4804      	ldr	r0, [pc, #16]	@ (8001af8 <MX_CAN1_Init+0x60>)
 8001ae6:	f000 fb8b 	bl	8002200 <HAL_CAN_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001af0:	f000 f8d4 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	200001f0 	.word	0x200001f0
 8001afc:	40006400 	.word	0x40006400

08001b00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b04:	4b17      	ldr	r3, [pc, #92]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b06:	4a18      	ldr	r2, [pc, #96]	@ (8001b68 <MX_SPI1_Init+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b0a:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b18:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b32:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b4c:	220a      	movs	r2, #10
 8001b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b50:	4804      	ldr	r0, [pc, #16]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b52:	f001 fc47 	bl	80033e4 <HAL_SPI_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b5c:	f000 f89e 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000218 	.word	0x20000218
 8001b68:	40013000 	.word	0x40013000

08001b6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	@ (8001bbc <MX_USART2_UART_Init+0x50>)
 8001b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b90:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	f002 f9fe 	bl	8003fa4 <HAL_UART_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bae:	f000 f875 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000270 	.word	0x20000270
 8001bbc:	40004400 	.word	0x40004400

08001bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	@ 0x28
 8001bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b2d      	ldr	r3, [pc, #180]	@ (8001c90 <MX_GPIO_Init+0xd0>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4a2c      	ldr	r2, [pc, #176]	@ (8001c90 <MX_GPIO_Init+0xd0>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c90 <MX_GPIO_Init+0xd0>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b26      	ldr	r3, [pc, #152]	@ (8001c90 <MX_GPIO_Init+0xd0>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a25      	ldr	r2, [pc, #148]	@ (8001c90 <MX_GPIO_Init+0xd0>)
 8001bfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b23      	ldr	r3, [pc, #140]	@ (8001c90 <MX_GPIO_Init+0xd0>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	4b1f      	ldr	r3, [pc, #124]	@ (8001c90 <MX_GPIO_Init+0xd0>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	4a1e      	ldr	r2, [pc, #120]	@ (8001c90 <MX_GPIO_Init+0xd0>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c90 <MX_GPIO_Init+0xd0>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <MX_GPIO_Init+0xd0>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	4a17      	ldr	r2, [pc, #92]	@ (8001c90 <MX_GPIO_Init+0xd0>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3a:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <MX_GPIO_Init+0xd0>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2110      	movs	r1, #16
 8001c4a:	4812      	ldr	r0, [pc, #72]	@ (8001c94 <MX_GPIO_Init+0xd4>)
 8001c4c:	f000 fe4e 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	480c      	ldr	r0, [pc, #48]	@ (8001c98 <MX_GPIO_Init+0xd8>)
 8001c68:	f000 fcac 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001c6c:	2310      	movs	r3, #16
 8001c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	4804      	ldr	r0, [pc, #16]	@ (8001c94 <MX_GPIO_Init+0xd4>)
 8001c84:	f000 fc9e 	bl	80025c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c88:	bf00      	nop
 8001c8a:	3728      	adds	r7, #40	@ 0x28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020000 	.word	0x40020000
 8001c98:	40020800 	.word	0x40020800

08001c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca0:	b672      	cpsid	i
}
 8001ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <Error_Handler+0x8>

08001ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <HAL_MspInit+0x4c>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb6:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf4 <HAL_MspInit+0x4c>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf4 <HAL_MspInit+0x4c>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <HAL_MspInit+0x4c>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	4a08      	ldr	r2, [pc, #32]	@ (8001cf4 <HAL_MspInit+0x4c>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_MspInit+0x4c>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	@ 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a19      	ldr	r2, [pc, #100]	@ (8001d7c <HAL_CAN_MspInit+0x84>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12c      	bne.n	8001d74 <HAL_CAN_MspInit+0x7c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_CAN_MspInit+0x88>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	4a17      	ldr	r2, [pc, #92]	@ (8001d80 <HAL_CAN_MspInit+0x88>)
 8001d24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2a:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <HAL_CAN_MspInit+0x88>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <HAL_CAN_MspInit+0x88>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a10      	ldr	r2, [pc, #64]	@ (8001d80 <HAL_CAN_MspInit+0x88>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_CAN_MspInit+0x88>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d64:	2309      	movs	r3, #9
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <HAL_CAN_MspInit+0x8c>)
 8001d70:	f000 fc28 	bl	80025c4 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001d74:	bf00      	nop
 8001d76:	3728      	adds	r7, #40	@ 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40006400 	.word	0x40006400
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020400 	.word	0x40020400

08001d88 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	@ 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a19      	ldr	r2, [pc, #100]	@ (8001e0c <HAL_SPI_MspInit+0x84>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d12b      	bne.n	8001e02 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <HAL_SPI_MspInit+0x88>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	4a17      	ldr	r2, [pc, #92]	@ (8001e10 <HAL_SPI_MspInit+0x88>)
 8001db4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <HAL_SPI_MspInit+0x88>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <HAL_SPI_MspInit+0x88>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <HAL_SPI_MspInit+0x88>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_SPI_MspInit+0x88>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001de2:	23e0      	movs	r3, #224	@ 0xe0
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001df2:	2305      	movs	r3, #5
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <HAL_SPI_MspInit+0x8c>)
 8001dfe:	f000 fbe1 	bl	80025c4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e02:	bf00      	nop
 8001e04:	3728      	adds	r7, #40	@ 0x28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40013000 	.word	0x40013000
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000

08001e18 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	@ 0x28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a19      	ldr	r2, [pc, #100]	@ (8001e9c <HAL_UART_MspInit+0x84>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d12b      	bne.n	8001e92 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ea0 <HAL_UART_MspInit+0x88>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	4a17      	ldr	r2, [pc, #92]	@ (8001ea0 <HAL_UART_MspInit+0x88>)
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <HAL_UART_MspInit+0x88>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_UART_MspInit+0x88>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ea0 <HAL_UART_MspInit+0x88>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <HAL_UART_MspInit+0x88>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e72:	230c      	movs	r3, #12
 8001e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e82:	2307      	movs	r3, #7
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <HAL_UART_MspInit+0x8c>)
 8001e8e:	f000 fb99 	bl	80025c4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e92:	bf00      	nop
 8001e94:	3728      	adds	r7, #40	@ 0x28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40004400 	.word	0x40004400
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <NMI_Handler+0x4>

08001eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <HardFault_Handler+0x4>

08001eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <MemManage_Handler+0x4>

08001ec0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <BusFault_Handler+0x4>

08001ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <UsageFault_Handler+0x4>

08001ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001efe:	f000 f93b 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_getpid>:
char **environ = __env;

/* Functions */
void initialise_monitor_handles() {}

int _getpid(void) { return 1; }
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <_kill>:

int _kill(int pid, int sig)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8001f20:	f003 fc5a 	bl	80057d8 <__errno>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2216      	movs	r2, #22
 8001f28:	601a      	str	r2, [r3, #0]
    return -1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_exit>:

void _exit (int status)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8001f3e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffe7 	bl	8001f16 <_kill>
    while (1) {}    /* Make sure we hang here */
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <_exit+0x12>

08001f4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	e00a      	b.n	8001f74 <_read+0x28>
    {
        *ptr++ = __io_getchar();
 8001f5e:	f3af 8000 	nop.w
 8001f62:	4601      	mov	r1, r0
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	60ba      	str	r2, [r7, #8]
 8001f6a:	b2ca      	uxtb	r2, r1
 8001f6c:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3301      	adds	r3, #1
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	dbf0      	blt.n	8001f5e <_read+0x12>
    }

    return len;
 8001f7c:	687b      	ldr	r3, [r7, #4]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <_close>:

    return len;
}

int _close(int file)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_fstat>:

int _fstat(int file, struct stat *st)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fae:	605a      	str	r2, [r3, #4]
    return 0;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <_isatty>:

int _isatty(int file)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 8001fc6:	2301      	movs	r3, #1
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff8:	4a14      	ldr	r2, [pc, #80]	@ (800204c <_sbrk+0x5c>)
 8001ffa:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <_sbrk+0x60>)
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002004:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <_sbrk+0x64>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d102      	bne.n	8002012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <_sbrk+0x64>)
 800200e:	4a12      	ldr	r2, [pc, #72]	@ (8002058 <_sbrk+0x68>)
 8002010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002012:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <_sbrk+0x64>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	429a      	cmp	r2, r3
 800201e:	d207      	bcs.n	8002030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002020:	f003 fbda 	bl	80057d8 <__errno>
 8002024:	4603      	mov	r3, r0
 8002026:	220c      	movs	r2, #12
 8002028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	e009      	b.n	8002044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002030:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <_sbrk+0x64>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002036:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <_sbrk+0x64>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	4a05      	ldr	r2, [pc, #20]	@ (8002054 <_sbrk+0x64>)
 8002040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002042:	68fb      	ldr	r3, [r7, #12]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20020000 	.word	0x20020000
 8002050:	00000400 	.word	0x00000400
 8002054:	2000031c 	.word	0x2000031c
 8002058:	20000470 	.word	0x20000470

0800205c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <SystemInit+0x20>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002066:	4a05      	ldr	r2, [pc, #20]	@ (800207c <SystemInit+0x20>)
 8002068:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800206c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002080:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002084:	f7ff ffea 	bl	800205c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002088:	480c      	ldr	r0, [pc, #48]	@ (80020bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800208a:	490d      	ldr	r1, [pc, #52]	@ (80020c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800208c:	4a0d      	ldr	r2, [pc, #52]	@ (80020c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002090:	e002      	b.n	8002098 <LoopCopyDataInit>

08002092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002096:	3304      	adds	r3, #4

08002098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800209c:	d3f9      	bcc.n	8002092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209e:	4a0a      	ldr	r2, [pc, #40]	@ (80020c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020a0:	4c0a      	ldr	r4, [pc, #40]	@ (80020cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a4:	e001      	b.n	80020aa <LoopFillZerobss>

080020a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a8:	3204      	adds	r2, #4

080020aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ac:	d3fb      	bcc.n	80020a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020ae:	f003 fb99 	bl	80057e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020b2:	f7ff fc65 	bl	8001980 <main>
  bx  lr    
 80020b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80020c4:	0800945c 	.word	0x0800945c
  ldr r2, =_sbss
 80020c8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80020cc:	20000470 	.word	0x20000470

080020d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <ADC_IRQHandler>
	...

080020d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002114 <HAL_Init+0x40>)
 80020de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <HAL_Init+0x40>)
 80020ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f0:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a07      	ldr	r2, [pc, #28]	@ (8002114 <HAL_Init+0x40>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fc:	2003      	movs	r0, #3
 80020fe:	f000 fa2d 	bl	800255c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002102:	200f      	movs	r0, #15
 8002104:	f000 f808 	bl	8002118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002108:	f7ff fdce 	bl	8001ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023c00 	.word	0x40023c00

08002118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_InitTick+0x54>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <HAL_InitTick+0x58>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fa37 	bl	80025aa <HAL_SYSTICK_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e00e      	b.n	8002164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b0f      	cmp	r3, #15
 800214a:	d80a      	bhi.n	8002162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f000 fa0d 	bl	8002572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002158:	4a06      	ldr	r2, [pc, #24]	@ (8002174 <HAL_InitTick+0x5c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000000 	.word	0x20000000
 8002170:	20000008 	.word	0x20000008
 8002174:	20000004 	.word	0x20000004

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	@ (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000008 	.word	0x20000008
 800219c:	20000320 	.word	0x20000320

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	@ (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000320 	.word	0x20000320

080021b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff ffee 	bl	80021a0 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d005      	beq.n	80021de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <HAL_Delay+0x44>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021de:	bf00      	nop
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d8f7      	bhi.n	80021e0 <HAL_Delay+0x28>
  {
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000008 	.word	0x20000008

08002200 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0ed      	b.n	80023ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d102      	bne.n	8002224 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff fd6a 	bl	8001cf8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002234:	f7ff ffb4 	bl	80021a0 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800223a:	e012      	b.n	8002262 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800223c:	f7ff ffb0 	bl	80021a0 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b0a      	cmp	r3, #10
 8002248:	d90b      	bls.n	8002262 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2205      	movs	r2, #5
 800225a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0c5      	b.n	80023ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0e5      	beq.n	800223c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0202 	bic.w	r2, r2, #2
 800227e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002280:	f7ff ff8e 	bl	80021a0 <HAL_GetTick>
 8002284:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002286:	e012      	b.n	80022ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002288:	f7ff ff8a 	bl	80021a0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b0a      	cmp	r3, #10
 8002294:	d90b      	bls.n	80022ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2205      	movs	r2, #5
 80022a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e09f      	b.n	80023ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1e5      	bne.n	8002288 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7e1b      	ldrb	r3, [r3, #24]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d108      	bne.n	80022d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e007      	b.n	80022e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7e5b      	ldrb	r3, [r3, #25]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d108      	bne.n	8002300 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e007      	b.n	8002310 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800230e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	7e9b      	ldrb	r3, [r3, #26]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d108      	bne.n	800232a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0220 	orr.w	r2, r2, #32
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e007      	b.n	800233a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0220 	bic.w	r2, r2, #32
 8002338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7edb      	ldrb	r3, [r3, #27]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d108      	bne.n	8002354 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0210 	bic.w	r2, r2, #16
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	e007      	b.n	8002364 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0210 	orr.w	r2, r2, #16
 8002362:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7f1b      	ldrb	r3, [r3, #28]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d108      	bne.n	800237e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0208 	orr.w	r2, r2, #8
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e007      	b.n	800238e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0208 	bic.w	r2, r2, #8
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	7f5b      	ldrb	r3, [r3, #29]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d108      	bne.n	80023a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0204 	orr.w	r2, r2, #4
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	e007      	b.n	80023b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0204 	bic.w	r2, r2, #4
 80023b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	ea42 0103 	orr.w	r1, r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	1e5a      	subs	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002414:	4013      	ands	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002420:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242a:	4a04      	ldr	r2, [pc, #16]	@ (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60d3      	str	r3, [r2, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002444:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <__NVIC_GetPriorityGrouping+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0307 	and.w	r3, r3, #7
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	2b00      	cmp	r3, #0
 800246e:	db0a      	blt.n	8002486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	490c      	ldr	r1, [pc, #48]	@ (80024a8 <__NVIC_SetPriority+0x4c>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	0112      	lsls	r2, r2, #4
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	440b      	add	r3, r1
 8002480:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002484:	e00a      	b.n	800249c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4908      	ldr	r1, [pc, #32]	@ (80024ac <__NVIC_SetPriority+0x50>)
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	3b04      	subs	r3, #4
 8002494:	0112      	lsls	r2, r2, #4
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	440b      	add	r3, r1
 800249a:	761a      	strb	r2, [r3, #24]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000e100 	.word	0xe000e100
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	@ 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f1c3 0307 	rsb	r3, r3, #7
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	bf28      	it	cs
 80024ce:	2304      	movcs	r3, #4
 80024d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3304      	adds	r3, #4
 80024d6:	2b06      	cmp	r3, #6
 80024d8:	d902      	bls.n	80024e0 <NVIC_EncodePriority+0x30>
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3b03      	subs	r3, #3
 80024de:	e000      	b.n	80024e2 <NVIC_EncodePriority+0x32>
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	f04f 32ff 	mov.w	r2, #4294967295
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	401a      	ands	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f8:	f04f 31ff 	mov.w	r1, #4294967295
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002502:	43d9      	mvns	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	4313      	orrs	r3, r2
         );
}
 800250a:	4618      	mov	r0, r3
 800250c:	3724      	adds	r7, #36	@ 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002528:	d301      	bcc.n	800252e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252a:	2301      	movs	r3, #1
 800252c:	e00f      	b.n	800254e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252e:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <SysTick_Config+0x40>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002536:	210f      	movs	r1, #15
 8002538:	f04f 30ff 	mov.w	r0, #4294967295
 800253c:	f7ff ff8e 	bl	800245c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <SysTick_Config+0x40>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002546:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <SysTick_Config+0x40>)
 8002548:	2207      	movs	r2, #7
 800254a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	e000e010 	.word	0xe000e010

0800255c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff47 	bl	80023f8 <__NVIC_SetPriorityGrouping>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002584:	f7ff ff5c 	bl	8002440 <__NVIC_GetPriorityGrouping>
 8002588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f7ff ff8e 	bl	80024b0 <NVIC_EncodePriority>
 8002594:	4602      	mov	r2, r0
 8002596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff5d 	bl	800245c <__NVIC_SetPriority>
}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ffb0 	bl	8002518 <SysTick_Config>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	@ 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	e165      	b.n	80028ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025e0:	2201      	movs	r2, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	f040 8154 	bne.w	80028a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b01      	cmp	r3, #1
 8002608:	d005      	beq.n	8002616 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002612:	2b02      	cmp	r3, #2
 8002614:	d130      	bne.n	8002678 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800264c:	2201      	movs	r2, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 0201 	and.w	r2, r3, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b03      	cmp	r3, #3
 8002682:	d017      	beq.n	80026b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d123      	bne.n	8002708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	08da      	lsrs	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3208      	adds	r2, #8
 80026c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	220f      	movs	r2, #15
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	08da      	lsrs	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3208      	adds	r2, #8
 8002702:	69b9      	ldr	r1, [r7, #24]
 8002704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0203 	and.w	r2, r3, #3
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80ae 	beq.w	80028a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b5d      	ldr	r3, [pc, #372]	@ (80028c4 <HAL_GPIO_Init+0x300>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	4a5c      	ldr	r2, [pc, #368]	@ (80028c4 <HAL_GPIO_Init+0x300>)
 8002754:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002758:	6453      	str	r3, [r2, #68]	@ 0x44
 800275a:	4b5a      	ldr	r3, [pc, #360]	@ (80028c4 <HAL_GPIO_Init+0x300>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002766:	4a58      	ldr	r2, [pc, #352]	@ (80028c8 <HAL_GPIO_Init+0x304>)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	3302      	adds	r3, #2
 800276e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	220f      	movs	r2, #15
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4f      	ldr	r2, [pc, #316]	@ (80028cc <HAL_GPIO_Init+0x308>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d025      	beq.n	80027de <HAL_GPIO_Init+0x21a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4e      	ldr	r2, [pc, #312]	@ (80028d0 <HAL_GPIO_Init+0x30c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d01f      	beq.n	80027da <HAL_GPIO_Init+0x216>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4d      	ldr	r2, [pc, #308]	@ (80028d4 <HAL_GPIO_Init+0x310>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d019      	beq.n	80027d6 <HAL_GPIO_Init+0x212>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4c      	ldr	r2, [pc, #304]	@ (80028d8 <HAL_GPIO_Init+0x314>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d013      	beq.n	80027d2 <HAL_GPIO_Init+0x20e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4b      	ldr	r2, [pc, #300]	@ (80028dc <HAL_GPIO_Init+0x318>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00d      	beq.n	80027ce <HAL_GPIO_Init+0x20a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4a      	ldr	r2, [pc, #296]	@ (80028e0 <HAL_GPIO_Init+0x31c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d007      	beq.n	80027ca <HAL_GPIO_Init+0x206>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a49      	ldr	r2, [pc, #292]	@ (80028e4 <HAL_GPIO_Init+0x320>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d101      	bne.n	80027c6 <HAL_GPIO_Init+0x202>
 80027c2:	2306      	movs	r3, #6
 80027c4:	e00c      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027c6:	2307      	movs	r3, #7
 80027c8:	e00a      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027ca:	2305      	movs	r3, #5
 80027cc:	e008      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027ce:	2304      	movs	r3, #4
 80027d0:	e006      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027d2:	2303      	movs	r3, #3
 80027d4:	e004      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e002      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027de:	2300      	movs	r3, #0
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	f002 0203 	and.w	r2, r2, #3
 80027e6:	0092      	lsls	r2, r2, #2
 80027e8:	4093      	lsls	r3, r2
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f0:	4935      	ldr	r1, [pc, #212]	@ (80028c8 <HAL_GPIO_Init+0x304>)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	3302      	adds	r3, #2
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027fe:	4b3a      	ldr	r3, [pc, #232]	@ (80028e8 <HAL_GPIO_Init+0x324>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002822:	4a31      	ldr	r2, [pc, #196]	@ (80028e8 <HAL_GPIO_Init+0x324>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002828:	4b2f      	ldr	r3, [pc, #188]	@ (80028e8 <HAL_GPIO_Init+0x324>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800284c:	4a26      	ldr	r2, [pc, #152]	@ (80028e8 <HAL_GPIO_Init+0x324>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002852:	4b25      	ldr	r3, [pc, #148]	@ (80028e8 <HAL_GPIO_Init+0x324>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002876:	4a1c      	ldr	r2, [pc, #112]	@ (80028e8 <HAL_GPIO_Init+0x324>)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800287c:	4b1a      	ldr	r3, [pc, #104]	@ (80028e8 <HAL_GPIO_Init+0x324>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a0:	4a11      	ldr	r2, [pc, #68]	@ (80028e8 <HAL_GPIO_Init+0x324>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3301      	adds	r3, #1
 80028aa:	61fb      	str	r3, [r7, #28]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	f67f ae96 	bls.w	80025e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop
 80028b8:	3724      	adds	r7, #36	@ 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40013800 	.word	0x40013800
 80028cc:	40020000 	.word	0x40020000
 80028d0:	40020400 	.word	0x40020400
 80028d4:	40020800 	.word	0x40020800
 80028d8:	40020c00 	.word	0x40020c00
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40021400 	.word	0x40021400
 80028e4:	40021800 	.word	0x40021800
 80028e8:	40013c00 	.word	0x40013c00

080028ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]
 80028f8:	4613      	mov	r3, r2
 80028fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028fc:	787b      	ldrb	r3, [r7, #1]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002908:	e003      	b.n	8002912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	041a      	lsls	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	619a      	str	r2, [r3, #24]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0cc      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002934:	4b68      	ldr	r3, [pc, #416]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d90c      	bls.n	800295c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b65      	ldr	r3, [pc, #404]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b63      	ldr	r3, [pc, #396]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0b8      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d020      	beq.n	80029aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002974:	4b59      	ldr	r3, [pc, #356]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4a58      	ldr	r2, [pc, #352]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800297e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800298c:	4b53      	ldr	r3, [pc, #332]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a52      	ldr	r2, [pc, #328]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002998:	4b50      	ldr	r3, [pc, #320]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	494d      	ldr	r1, [pc, #308]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d044      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029be:	4b47      	ldr	r3, [pc, #284]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d119      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e07f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d003      	beq.n	80029de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	4b3f      	ldr	r3, [pc, #252]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e06f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ee:	4b3b      	ldr	r3, [pc, #236]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e067      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029fe:	4b37      	ldr	r3, [pc, #220]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f023 0203 	bic.w	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4934      	ldr	r1, [pc, #208]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a10:	f7ff fbc6 	bl	80021a0 <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a18:	f7ff fbc2 	bl	80021a0 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e04f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 020c 	and.w	r2, r3, #12
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d1eb      	bne.n	8002a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a40:	4b25      	ldr	r3, [pc, #148]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d20c      	bcs.n	8002a68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b22      	ldr	r3, [pc, #136]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e032      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a74:	4b19      	ldr	r3, [pc, #100]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4916      	ldr	r1, [pc, #88]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a92:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	490e      	ldr	r1, [pc, #56]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aa6:	f000 f855 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	490a      	ldr	r1, [pc, #40]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	5ccb      	ldrb	r3, [r1, r3]
 8002aba:	fa22 f303 	lsr.w	r3, r2, r3
 8002abe:	4a09      	ldr	r2, [pc, #36]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ac2:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fb26 	bl	8002118 <HAL_InitTick>

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023c00 	.word	0x40023c00
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	08009008 	.word	0x08009008
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	20000004 	.word	0x20000004

08002aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af0:	4b03      	ldr	r3, [pc, #12]	@ (8002b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000000 	.word	0x20000000

08002b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b08:	f7ff fff0 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b05      	ldr	r3, [pc, #20]	@ (8002b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	0a9b      	lsrs	r3, r3, #10
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4903      	ldr	r1, [pc, #12]	@ (8002b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	08009018 	.word	0x08009018

08002b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b30:	f7ff ffdc 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	0b5b      	lsrs	r3, r3, #13
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	4903      	ldr	r1, [pc, #12]	@ (8002b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	08009018 	.word	0x08009018

08002b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b58:	b0a6      	sub	sp, #152	@ 0x98
 8002b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b7a:	4bc8      	ldr	r3, [pc, #800]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x348>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	f200 817e 	bhi.w	8002e84 <HAL_RCC_GetSysClockFreq+0x330>
 8002b88:	a201      	add	r2, pc, #4	@ (adr r2, 8002b90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8e:	bf00      	nop
 8002b90:	08002bc5 	.word	0x08002bc5
 8002b94:	08002e85 	.word	0x08002e85
 8002b98:	08002e85 	.word	0x08002e85
 8002b9c:	08002e85 	.word	0x08002e85
 8002ba0:	08002bcd 	.word	0x08002bcd
 8002ba4:	08002e85 	.word	0x08002e85
 8002ba8:	08002e85 	.word	0x08002e85
 8002bac:	08002e85 	.word	0x08002e85
 8002bb0:	08002bd5 	.word	0x08002bd5
 8002bb4:	08002e85 	.word	0x08002e85
 8002bb8:	08002e85 	.word	0x08002e85
 8002bbc:	08002e85 	.word	0x08002e85
 8002bc0:	08002d3f 	.word	0x08002d3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc4:	4bb6      	ldr	r3, [pc, #728]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002bc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002bca:	e15f      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bcc:	4bb5      	ldr	r3, [pc, #724]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002bce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002bd2:	e15b      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd4:	4bb1      	ldr	r3, [pc, #708]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x348>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002be0:	4bae      	ldr	r3, [pc, #696]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x348>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d031      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bec:	4bab      	ldr	r3, [pc, #684]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x348>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bf6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002bf8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bfe:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c00:	2300      	movs	r3, #0
 8002c02:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c04:	4ba7      	ldr	r3, [pc, #668]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c06:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002c0a:	462a      	mov	r2, r5
 8002c0c:	fb03 f202 	mul.w	r2, r3, r2
 8002c10:	2300      	movs	r3, #0
 8002c12:	4621      	mov	r1, r4
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	4aa2      	ldr	r2, [pc, #648]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c1c:	4621      	mov	r1, r4
 8002c1e:	fba1 1202 	umull	r1, r2, r1, r2
 8002c22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c24:	460a      	mov	r2, r1
 8002c26:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002c28:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002c2a:	4413      	add	r3, r2
 8002c2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c32:	2200      	movs	r2, #0
 8002c34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c36:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002c38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c3c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002c40:	f7fe f842 	bl	8000cc8 <__aeabi_uldivmod>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c4e:	e064      	b.n	8002d1a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c50:	4b92      	ldr	r3, [pc, #584]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x348>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	099b      	lsrs	r3, r3, #6
 8002c56:	2200      	movs	r2, #0
 8002c58:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c5a:	657a      	str	r2, [r7, #84]	@ 0x54
 8002c5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c64:	2300      	movs	r3, #0
 8002c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c68:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002c6c:	4622      	mov	r2, r4
 8002c6e:	462b      	mov	r3, r5
 8002c70:	f04f 0000 	mov.w	r0, #0
 8002c74:	f04f 0100 	mov.w	r1, #0
 8002c78:	0159      	lsls	r1, r3, #5
 8002c7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c7e:	0150      	lsls	r0, r2, #5
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4621      	mov	r1, r4
 8002c86:	1a51      	subs	r1, r2, r1
 8002c88:	6139      	str	r1, [r7, #16]
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	eb63 0301 	sbc.w	r3, r3, r1
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c9e:	4659      	mov	r1, fp
 8002ca0:	018b      	lsls	r3, r1, #6
 8002ca2:	4651      	mov	r1, sl
 8002ca4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ca8:	4651      	mov	r1, sl
 8002caa:	018a      	lsls	r2, r1, #6
 8002cac:	4651      	mov	r1, sl
 8002cae:	ebb2 0801 	subs.w	r8, r2, r1
 8002cb2:	4659      	mov	r1, fp
 8002cb4:	eb63 0901 	sbc.w	r9, r3, r1
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ccc:	4690      	mov	r8, r2
 8002cce:	4699      	mov	r9, r3
 8002cd0:	4623      	mov	r3, r4
 8002cd2:	eb18 0303 	adds.w	r3, r8, r3
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	462b      	mov	r3, r5
 8002cda:	eb49 0303 	adc.w	r3, r9, r3
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cec:	4629      	mov	r1, r5
 8002cee:	028b      	lsls	r3, r1, #10
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	028a      	lsls	r2, r1, #10
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d02:	2200      	movs	r2, #0
 8002d04:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d06:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d0c:	f7fd ffdc 	bl	8000cc8 <__aeabi_uldivmod>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4613      	mov	r3, r2
 8002d16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d1a:	4b60      	ldr	r3, [pc, #384]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x348>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	0c1b      	lsrs	r3, r3, #16
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	3301      	adds	r3, #1
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002d2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002d3c:	e0a6      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d3e:	4b57      	ldr	r3, [pc, #348]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x348>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d4a:	4b54      	ldr	r3, [pc, #336]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x348>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d02a      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d56:	4b51      	ldr	r3, [pc, #324]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x348>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	099b      	lsrs	r3, r3, #6
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d68:	2100      	movs	r1, #0
 8002d6a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d6c:	fb03 f201 	mul.w	r2, r3, r1
 8002d70:	2300      	movs	r3, #0
 8002d72:	fb00 f303 	mul.w	r3, r0, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d7a:	fba0 1202 	umull	r1, r2, r0, r2
 8002d7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d80:	460a      	mov	r2, r1
 8002d82:	673a      	str	r2, [r7, #112]	@ 0x70
 8002d84:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002d86:	4413      	add	r3, r2
 8002d88:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d8e:	2200      	movs	r2, #0
 8002d90:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d92:	637a      	str	r2, [r7, #52]	@ 0x34
 8002d94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002d98:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002d9c:	f7fd ff94 	bl	8000cc8 <__aeabi_uldivmod>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4613      	mov	r3, r2
 8002da6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002daa:	e05b      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dac:	4b3b      	ldr	r3, [pc, #236]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x348>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	099b      	lsrs	r3, r3, #6
 8002db2:	2200      	movs	r2, #0
 8002db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dbe:	623b      	str	r3, [r7, #32]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dc8:	4642      	mov	r2, r8
 8002dca:	464b      	mov	r3, r9
 8002dcc:	f04f 0000 	mov.w	r0, #0
 8002dd0:	f04f 0100 	mov.w	r1, #0
 8002dd4:	0159      	lsls	r1, r3, #5
 8002dd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dda:	0150      	lsls	r0, r2, #5
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4641      	mov	r1, r8
 8002de2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002de6:	4649      	mov	r1, r9
 8002de8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002df8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e00:	ebb2 040a 	subs.w	r4, r2, sl
 8002e04:	eb63 050b 	sbc.w	r5, r3, fp
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	00eb      	lsls	r3, r5, #3
 8002e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e16:	00e2      	lsls	r2, r4, #3
 8002e18:	4614      	mov	r4, r2
 8002e1a:	461d      	mov	r5, r3
 8002e1c:	4643      	mov	r3, r8
 8002e1e:	18e3      	adds	r3, r4, r3
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	464b      	mov	r3, r9
 8002e24:	eb45 0303 	adc.w	r3, r5, r3
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e36:	4629      	mov	r1, r5
 8002e38:	028b      	lsls	r3, r1, #10
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e40:	4621      	mov	r1, r4
 8002e42:	028a      	lsls	r2, r1, #10
 8002e44:	4610      	mov	r0, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	61bb      	str	r3, [r7, #24]
 8002e50:	61fa      	str	r2, [r7, #28]
 8002e52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e56:	f7fd ff37 	bl	8000cc8 <__aeabi_uldivmod>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4613      	mov	r3, r2
 8002e60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e64:	4b0d      	ldr	r3, [pc, #52]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x348>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	0f1b      	lsrs	r3, r3, #28
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002e72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002e82:	e003      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e84:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002e86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002e8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3798      	adds	r7, #152	@ 0x98
 8002e94:	46bd      	mov	sp, r7
 8002e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	00f42400 	.word	0x00f42400
 8002ea4:	017d7840 	.word	0x017d7840

08002ea8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e28d      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8083 	beq.w	8002fce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ec8:	4b94      	ldr	r3, [pc, #592]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d019      	beq.n	8002f08 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ed4:	4b91      	ldr	r3, [pc, #580]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
        || \
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d106      	bne.n	8002eee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ee0:	4b8e      	ldr	r3, [pc, #568]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eec:	d00c      	beq.n	8002f08 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eee:	4b8b      	ldr	r3, [pc, #556]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	d112      	bne.n	8002f20 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002efa:	4b88      	ldr	r3, [pc, #544]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f06:	d10b      	bne.n	8002f20 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f08:	4b84      	ldr	r3, [pc, #528]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d05b      	beq.n	8002fcc <HAL_RCC_OscConfig+0x124>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d157      	bne.n	8002fcc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e25a      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f28:	d106      	bne.n	8002f38 <HAL_RCC_OscConfig+0x90>
 8002f2a:	4b7c      	ldr	r3, [pc, #496]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a7b      	ldr	r2, [pc, #492]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e01d      	b.n	8002f74 <HAL_RCC_OscConfig+0xcc>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f40:	d10c      	bne.n	8002f5c <HAL_RCC_OscConfig+0xb4>
 8002f42:	4b76      	ldr	r3, [pc, #472]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a75      	ldr	r2, [pc, #468]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002f48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	4b73      	ldr	r3, [pc, #460]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a72      	ldr	r2, [pc, #456]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e00b      	b.n	8002f74 <HAL_RCC_OscConfig+0xcc>
 8002f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a6e      	ldr	r2, [pc, #440]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	4b6c      	ldr	r3, [pc, #432]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002f6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d013      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7ff f910 	bl	80021a0 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f84:	f7ff f90c 	bl	80021a0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	@ 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e21f      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	4b61      	ldr	r3, [pc, #388]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0xdc>
 8002fa2:	e014      	b.n	8002fce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7ff f8fc 	bl	80021a0 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fac:	f7ff f8f8 	bl	80021a0 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	@ 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e20b      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fbe:	4b57      	ldr	r3, [pc, #348]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x104>
 8002fca:	e000      	b.n	8002fce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d06f      	beq.n	80030ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002fda:	4b50      	ldr	r3, [pc, #320]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d017      	beq.n	8003016 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002fe6:	4b4d      	ldr	r3, [pc, #308]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
        || \
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d105      	bne.n	8002ffe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffe:	4b47      	ldr	r3, [pc, #284]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003006:	2b0c      	cmp	r3, #12
 8003008:	d11c      	bne.n	8003044 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300a:	4b44      	ldr	r3, [pc, #272]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d116      	bne.n	8003044 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003016:	4b41      	ldr	r3, [pc, #260]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <HAL_RCC_OscConfig+0x186>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d001      	beq.n	800302e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e1d3      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302e:	4b3b      	ldr	r3, [pc, #236]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4937      	ldr	r1, [pc, #220]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003042:	e03a      	b.n	80030ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d020      	beq.n	800308e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800304c:	4b34      	ldr	r3, [pc, #208]	@ (8003120 <HAL_RCC_OscConfig+0x278>)
 800304e:	2201      	movs	r2, #1
 8003050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7ff f8a5 	bl	80021a0 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305a:	f7ff f8a1 	bl	80021a0 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e1b4      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306c:	4b2b      	ldr	r3, [pc, #172]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003078:	4b28      	ldr	r3, [pc, #160]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4925      	ldr	r1, [pc, #148]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 8003088:	4313      	orrs	r3, r2
 800308a:	600b      	str	r3, [r1, #0]
 800308c:	e015      	b.n	80030ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308e:	4b24      	ldr	r3, [pc, #144]	@ (8003120 <HAL_RCC_OscConfig+0x278>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7ff f884 	bl	80021a0 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309c:	f7ff f880 	bl	80021a0 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e193      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d036      	beq.n	8003134 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d016      	beq.n	80030fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ce:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <HAL_RCC_OscConfig+0x27c>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d4:	f7ff f864 	bl	80021a0 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030dc:	f7ff f860 	bl	80021a0 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e173      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	4b0b      	ldr	r3, [pc, #44]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 80030f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x234>
 80030fa:	e01b      	b.n	8003134 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030fc:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <HAL_RCC_OscConfig+0x27c>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003102:	f7ff f84d 	bl	80021a0 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003108:	e00e      	b.n	8003128 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310a:	f7ff f849 	bl	80021a0 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d907      	bls.n	8003128 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e15c      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
 800311c:	40023800 	.word	0x40023800
 8003120:	42470000 	.word	0x42470000
 8003124:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	4b8a      	ldr	r3, [pc, #552]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 800312a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1ea      	bne.n	800310a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8097 	beq.w	8003270 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003142:	2300      	movs	r3, #0
 8003144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003146:	4b83      	ldr	r3, [pc, #524]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	4b7f      	ldr	r3, [pc, #508]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	4a7e      	ldr	r2, [pc, #504]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 800315c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003160:	6413      	str	r3, [r2, #64]	@ 0x40
 8003162:	4b7c      	ldr	r3, [pc, #496]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316e:	2301      	movs	r3, #1
 8003170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003172:	4b79      	ldr	r3, [pc, #484]	@ (8003358 <HAL_RCC_OscConfig+0x4b0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d118      	bne.n	80031b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317e:	4b76      	ldr	r3, [pc, #472]	@ (8003358 <HAL_RCC_OscConfig+0x4b0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a75      	ldr	r2, [pc, #468]	@ (8003358 <HAL_RCC_OscConfig+0x4b0>)
 8003184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318a:	f7ff f809 	bl	80021a0 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003192:	f7ff f805 	bl	80021a0 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e118      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003358 <HAL_RCC_OscConfig+0x4b0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d106      	bne.n	80031c6 <HAL_RCC_OscConfig+0x31e>
 80031b8:	4b66      	ldr	r3, [pc, #408]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031bc:	4a65      	ldr	r2, [pc, #404]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c4:	e01c      	b.n	8003200 <HAL_RCC_OscConfig+0x358>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b05      	cmp	r3, #5
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x340>
 80031ce:	4b61      	ldr	r3, [pc, #388]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d2:	4a60      	ldr	r2, [pc, #384]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031da:	4b5e      	ldr	r3, [pc, #376]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031de:	4a5d      	ldr	r2, [pc, #372]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e6:	e00b      	b.n	8003200 <HAL_RCC_OscConfig+0x358>
 80031e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ec:	4a59      	ldr	r2, [pc, #356]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f4:	4b57      	ldr	r3, [pc, #348]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f8:	4a56      	ldr	r2, [pc, #344]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 80031fa:	f023 0304 	bic.w	r3, r3, #4
 80031fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d015      	beq.n	8003234 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7fe ffca 	bl	80021a0 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320e:	e00a      	b.n	8003226 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003210:	f7fe ffc6 	bl	80021a0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e0d7      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003226:	4b4b      	ldr	r3, [pc, #300]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0ee      	beq.n	8003210 <HAL_RCC_OscConfig+0x368>
 8003232:	e014      	b.n	800325e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003234:	f7fe ffb4 	bl	80021a0 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323a:	e00a      	b.n	8003252 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323c:	f7fe ffb0 	bl	80021a0 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e0c1      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003252:	4b40      	ldr	r3, [pc, #256]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1ee      	bne.n	800323c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800325e:	7dfb      	ldrb	r3, [r7, #23]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d105      	bne.n	8003270 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003264:	4b3b      	ldr	r3, [pc, #236]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	4a3a      	ldr	r2, [pc, #232]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 800326a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800326e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80ad 	beq.w	80033d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800327a:	4b36      	ldr	r3, [pc, #216]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b08      	cmp	r3, #8
 8003284:	d060      	beq.n	8003348 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d145      	bne.n	800331a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328e:	4b33      	ldr	r3, [pc, #204]	@ (800335c <HAL_RCC_OscConfig+0x4b4>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fe ff84 	bl	80021a0 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329c:	f7fe ff80 	bl	80021a0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e093      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	4b29      	ldr	r3, [pc, #164]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	019b      	lsls	r3, r3, #6
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d0:	085b      	lsrs	r3, r3, #1
 80032d2:	3b01      	subs	r3, #1
 80032d4:	041b      	lsls	r3, r3, #16
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	061b      	lsls	r3, r3, #24
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	071b      	lsls	r3, r3, #28
 80032e6:	491b      	ldr	r1, [pc, #108]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ec:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <HAL_RCC_OscConfig+0x4b4>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fe ff55 	bl	80021a0 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fe ff51 	bl	80021a0 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e064      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330c:	4b11      	ldr	r3, [pc, #68]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x452>
 8003318:	e05c      	b.n	80033d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331a:	4b10      	ldr	r3, [pc, #64]	@ (800335c <HAL_RCC_OscConfig+0x4b4>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003320:	f7fe ff3e 	bl	80021a0 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003328:	f7fe ff3a 	bl	80021a0 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e04d      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333a:	4b06      	ldr	r3, [pc, #24]	@ (8003354 <HAL_RCC_OscConfig+0x4ac>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x480>
 8003346:	e045      	b.n	80033d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d107      	bne.n	8003360 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e040      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
 8003354:	40023800 	.word	0x40023800
 8003358:	40007000 	.word	0x40007000
 800335c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003360:	4b1f      	ldr	r3, [pc, #124]	@ (80033e0 <HAL_RCC_OscConfig+0x538>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d030      	beq.n	80033d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003378:	429a      	cmp	r2, r3
 800337a:	d129      	bne.n	80033d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d122      	bne.n	80033d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003390:	4013      	ands	r3, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003398:	4293      	cmp	r3, r2
 800339a:	d119      	bne.n	80033d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a6:	085b      	lsrs	r3, r3, #1
 80033a8:	3b01      	subs	r3, #1
 80033aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d10f      	bne.n	80033d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d107      	bne.n	80033d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800

080033e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e07b      	b.n	80034ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d108      	bne.n	8003410 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003406:	d009      	beq.n	800341c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	61da      	str	r2, [r3, #28]
 800340e:	e005      	b.n	800341c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fe fca6 	bl	8001d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003452:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a0:	ea42 0103 	orr.w	r1, r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	f003 0104 	and.w	r1, r3, #4
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c2:	f003 0210 	and.w	r2, r3, #16
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b088      	sub	sp, #32
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003506:	f7fe fe4b 	bl	80021a0 <HAL_GetTick>
 800350a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d001      	beq.n	8003520 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
 800351e:	e12a      	b.n	8003776 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_SPI_Transmit+0x36>
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e122      	b.n	8003776 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_SPI_Transmit+0x48>
 800353a:	2302      	movs	r3, #2
 800353c:	e11b      	b.n	8003776 <HAL_SPI_Transmit+0x280>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2203      	movs	r2, #3
 800354a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	88fa      	ldrh	r2, [r7, #6]
 800355e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	88fa      	ldrh	r2, [r7, #6]
 8003564:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800358c:	d10f      	bne.n	80035ae <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800359c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b8:	2b40      	cmp	r3, #64	@ 0x40
 80035ba:	d007      	beq.n	80035cc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035d4:	d152      	bne.n	800367c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_SPI_Transmit+0xee>
 80035de:	8b7b      	ldrh	r3, [r7, #26]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d145      	bne.n	8003670 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e8:	881a      	ldrh	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f4:	1c9a      	adds	r2, r3, #2
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003608:	e032      	b.n	8003670 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b02      	cmp	r3, #2
 8003616:	d112      	bne.n	800363e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361c:	881a      	ldrh	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	1c9a      	adds	r2, r3, #2
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800363c:	e018      	b.n	8003670 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800363e:	f7fe fdaf 	bl	80021a0 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d803      	bhi.n	8003656 <HAL_SPI_Transmit+0x160>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d102      	bne.n	800365c <HAL_SPI_Transmit+0x166>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d109      	bne.n	8003670 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e082      	b.n	8003776 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1c7      	bne.n	800360a <HAL_SPI_Transmit+0x114>
 800367a:	e053      	b.n	8003724 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <HAL_SPI_Transmit+0x194>
 8003684:	8b7b      	ldrh	r3, [r7, #26]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d147      	bne.n	800371a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	330c      	adds	r3, #12
 8003694:	7812      	ldrb	r2, [r2, #0]
 8003696:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036b0:	e033      	b.n	800371a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d113      	bne.n	80036e8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	7812      	ldrb	r2, [r2, #0]
 80036cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80036e6:	e018      	b.n	800371a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e8:	f7fe fd5a 	bl	80021a0 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d803      	bhi.n	8003700 <HAL_SPI_Transmit+0x20a>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fe:	d102      	bne.n	8003706 <HAL_SPI_Transmit+0x210>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e02d      	b.n	8003776 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1c6      	bne.n	80036b2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	6839      	ldr	r1, [r7, #0]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fbe7 	bl	8003efc <SPI_EndRxTxTransaction>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003774:	2300      	movs	r3, #0
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	3720      	adds	r7, #32
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b088      	sub	sp, #32
 8003782:	af02      	add	r7, sp, #8
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	4613      	mov	r3, r2
 800378c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d001      	beq.n	800379e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800379a:	2302      	movs	r3, #2
 800379c:	e104      	b.n	80039a8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <HAL_SPI_Receive+0x2c>
 80037a4:	88fb      	ldrh	r3, [r7, #6]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e0fc      	b.n	80039a8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037b6:	d112      	bne.n	80037de <HAL_SPI_Receive+0x60>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10e      	bne.n	80037de <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2204      	movs	r2, #4
 80037c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037c8:	88fa      	ldrh	r2, [r7, #6]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	4613      	mov	r3, r2
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f8eb 	bl	80039b0 <HAL_SPI_TransmitReceive>
 80037da:	4603      	mov	r3, r0
 80037dc:	e0e4      	b.n	80039a8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037de:	f7fe fcdf 	bl	80021a0 <HAL_GetTick>
 80037e2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_SPI_Receive+0x74>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e0da      	b.n	80039a8 <HAL_SPI_Receive+0x22a>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2204      	movs	r2, #4
 80037fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	88fa      	ldrh	r2, [r7, #6]
 8003812:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	88fa      	ldrh	r2, [r7, #6]
 8003818:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003840:	d10f      	bne.n	8003862 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003850:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003860:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386c:	2b40      	cmp	r3, #64	@ 0x40
 800386e:	d007      	beq.n	8003880 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800387e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d170      	bne.n	800396a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003888:	e035      	b.n	80038f6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d115      	bne.n	80038c4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f103 020c 	add.w	r2, r3, #12
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a4:	7812      	ldrb	r2, [r2, #0]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038c2:	e018      	b.n	80038f6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038c4:	f7fe fc6c 	bl	80021a0 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d803      	bhi.n	80038dc <HAL_SPI_Receive+0x15e>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038da:	d102      	bne.n	80038e2 <HAL_SPI_Receive+0x164>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e058      	b.n	80039a8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1c4      	bne.n	800388a <HAL_SPI_Receive+0x10c>
 8003900:	e038      	b.n	8003974 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d113      	bne.n	8003938 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391a:	b292      	uxth	r2, r2
 800391c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003922:	1c9a      	adds	r2, r3, #2
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003936:	e018      	b.n	800396a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003938:	f7fe fc32 	bl	80021a0 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d803      	bhi.n	8003950 <HAL_SPI_Receive+0x1d2>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394e:	d102      	bne.n	8003956 <HAL_SPI_Receive+0x1d8>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e01e      	b.n	80039a8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1c6      	bne.n	8003902 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	6839      	ldr	r1, [r7, #0]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 fa59 	bl	8003e30 <SPI_EndRxTransaction>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80039a6:	2300      	movs	r3, #0
  }
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	@ 0x28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039be:	2301      	movs	r3, #1
 80039c0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039c2:	f7fe fbed 	bl	80021a0 <HAL_GetTick>
 80039c6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039ce:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80039d6:	887b      	ldrh	r3, [r7, #2]
 80039d8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039da:	7ffb      	ldrb	r3, [r7, #31]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d00c      	beq.n	80039fa <HAL_SPI_TransmitReceive+0x4a>
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039e6:	d106      	bne.n	80039f6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d102      	bne.n	80039f6 <HAL_SPI_TransmitReceive+0x46>
 80039f0:	7ffb      	ldrb	r3, [r7, #31]
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d001      	beq.n	80039fa <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
 80039f8:	e17f      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_SPI_TransmitReceive+0x5c>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_SPI_TransmitReceive+0x5c>
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e174      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_SPI_TransmitReceive+0x6e>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e16d      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x34a>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d003      	beq.n	8003a3a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2205      	movs	r2, #5
 8003a36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	887a      	ldrh	r2, [r7, #2]
 8003a4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	887a      	ldrh	r2, [r7, #2]
 8003a5c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	887a      	ldrh	r2, [r7, #2]
 8003a62:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7a:	2b40      	cmp	r3, #64	@ 0x40
 8003a7c:	d007      	beq.n	8003a8e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a96:	d17e      	bne.n	8003b96 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_SPI_TransmitReceive+0xf6>
 8003aa0:	8afb      	ldrh	r3, [r7, #22]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d16c      	bne.n	8003b80 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aaa:	881a      	ldrh	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab6:	1c9a      	adds	r2, r3, #2
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aca:	e059      	b.n	8003b80 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d11b      	bne.n	8003b12 <HAL_SPI_TransmitReceive+0x162>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d016      	beq.n	8003b12 <HAL_SPI_TransmitReceive+0x162>
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d113      	bne.n	8003b12 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	881a      	ldrh	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afa:	1c9a      	adds	r2, r3, #2
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d119      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x1a4>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d014      	beq.n	8003b54 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b34:	b292      	uxth	r2, r2
 8003b36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b50:	2301      	movs	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b54:	f7fe fb24 	bl	80021a0 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d80d      	bhi.n	8003b80 <HAL_SPI_TransmitReceive+0x1d0>
 8003b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d009      	beq.n	8003b80 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e0bc      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1a0      	bne.n	8003acc <HAL_SPI_TransmitReceive+0x11c>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d19b      	bne.n	8003acc <HAL_SPI_TransmitReceive+0x11c>
 8003b94:	e082      	b.n	8003c9c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_SPI_TransmitReceive+0x1f4>
 8003b9e:	8afb      	ldrh	r3, [r7, #22]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d171      	bne.n	8003c88 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	330c      	adds	r3, #12
 8003bae:	7812      	ldrb	r2, [r2, #0]
 8003bb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bca:	e05d      	b.n	8003c88 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d11c      	bne.n	8003c14 <HAL_SPI_TransmitReceive+0x264>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d017      	beq.n	8003c14 <HAL_SPI_TransmitReceive+0x264>
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d114      	bne.n	8003c14 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	330c      	adds	r3, #12
 8003bf4:	7812      	ldrb	r2, [r2, #0]
 8003bf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d119      	bne.n	8003c56 <HAL_SPI_TransmitReceive+0x2a6>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d014      	beq.n	8003c56 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c52:	2301      	movs	r3, #1
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c56:	f7fe faa3 	bl	80021a0 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d803      	bhi.n	8003c6e <HAL_SPI_TransmitReceive+0x2be>
 8003c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d102      	bne.n	8003c74 <HAL_SPI_TransmitReceive+0x2c4>
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d109      	bne.n	8003c88 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e038      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d19c      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x21c>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d197      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c9c:	6a3a      	ldr	r2, [r7, #32]
 8003c9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f92b 	bl	8003efc <SPI_EndRxTxTransaction>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e01d      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10a      	bne.n	8003cdc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
  }
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3728      	adds	r7, #40	@ 0x28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d10:	b2db      	uxtb	r3, r3
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d30:	f7fe fa36 	bl	80021a0 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d40:	f7fe fa2e 	bl	80021a0 <HAL_GetTick>
 8003d44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d46:	4b39      	ldr	r3, [pc, #228]	@ (8003e2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	015b      	lsls	r3, r3, #5
 8003d4c:	0d1b      	lsrs	r3, r3, #20
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	fb02 f303 	mul.w	r3, r2, r3
 8003d54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d56:	e055      	b.n	8003e04 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5e:	d051      	beq.n	8003e04 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d60:	f7fe fa1e 	bl	80021a0 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d902      	bls.n	8003d76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d13d      	bne.n	8003df2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d8e:	d111      	bne.n	8003db4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d98:	d004      	beq.n	8003da4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da2:	d107      	bne.n	8003db4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003db2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dbc:	d10f      	bne.n	8003dde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ddc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e018      	b.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d102      	bne.n	8003dfe <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	e002      	b.n	8003e04 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	3b01      	subs	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d19a      	bne.n	8003d58 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3720      	adds	r7, #32
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000000 	.word	0x20000000

08003e30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e44:	d111      	bne.n	8003e6a <SPI_EndRxTransaction+0x3a>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e4e:	d004      	beq.n	8003e5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e58:	d107      	bne.n	8003e6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e68:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e72:	d12a      	bne.n	8003eca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e7c:	d012      	beq.n	8003ea4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2200      	movs	r2, #0
 8003e86:	2180      	movs	r1, #128	@ 0x80
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7ff ff49 	bl	8003d20 <SPI_WaitFlagStateUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d02d      	beq.n	8003ef0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e98:	f043 0220 	orr.w	r2, r3, #32
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e026      	b.n	8003ef2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2101      	movs	r1, #1
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f7ff ff36 	bl	8003d20 <SPI_WaitFlagStateUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d01a      	beq.n	8003ef0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ebe:	f043 0220 	orr.w	r2, r3, #32
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e013      	b.n	8003ef2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff ff23 	bl	8003d20 <SPI_WaitFlagStateUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee4:	f043 0220 	orr.w	r2, r3, #32
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e000      	b.n	8003ef2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	2102      	movs	r1, #2
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f7ff ff04 	bl	8003d20 <SPI_WaitFlagStateUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f22:	f043 0220 	orr.w	r2, r3, #32
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e032      	b.n	8003f94 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8003f9c <SPI_EndRxTxTransaction+0xa0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa0 <SPI_EndRxTxTransaction+0xa4>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	0d5b      	lsrs	r3, r3, #21
 8003f3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f3e:	fb02 f303 	mul.w	r3, r2, r3
 8003f42:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f4c:	d112      	bne.n	8003f74 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2200      	movs	r2, #0
 8003f56:	2180      	movs	r1, #128	@ 0x80
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7ff fee1 	bl	8003d20 <SPI_WaitFlagStateUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d016      	beq.n	8003f92 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f68:	f043 0220 	orr.w	r2, r3, #32
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e00f      	b.n	8003f94 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8a:	2b80      	cmp	r3, #128	@ 0x80
 8003f8c:	d0f2      	beq.n	8003f74 <SPI_EndRxTxTransaction+0x78>
 8003f8e:	e000      	b.n	8003f92 <SPI_EndRxTxTransaction+0x96>
        break;
 8003f90:	bf00      	nop
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000000 	.word	0x20000000
 8003fa0:	165e9f81 	.word	0x165e9f81

08003fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e042      	b.n	800403c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fd ff24 	bl	8001e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2224      	movs	r2, #36	@ 0x24
 8003fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f973 	bl	80042d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695a      	ldr	r2, [r3, #20]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800400c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800401c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	@ 0x28
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b20      	cmp	r3, #32
 8004062:	d175      	bne.n	8004150 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_UART_Transmit+0x2c>
 800406a:	88fb      	ldrh	r3, [r7, #6]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e06e      	b.n	8004152 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2221      	movs	r2, #33	@ 0x21
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004082:	f7fe f88d 	bl	80021a0 <HAL_GetTick>
 8004086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	88fa      	ldrh	r2, [r7, #6]
 8004092:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800409c:	d108      	bne.n	80040b0 <HAL_UART_Transmit+0x6c>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d104      	bne.n	80040b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	e003      	b.n	80040b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040b8:	e02e      	b.n	8004118 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2200      	movs	r2, #0
 80040c2:	2180      	movs	r1, #128	@ 0x80
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f848 	bl	800415a <UART_WaitOnFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e03a      	b.n	8004152 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10b      	bne.n	80040fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	3302      	adds	r3, #2
 80040f6:	61bb      	str	r3, [r7, #24]
 80040f8:	e007      	b.n	800410a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	781a      	ldrb	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	3301      	adds	r3, #1
 8004108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1cb      	bne.n	80040ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2200      	movs	r2, #0
 800412a:	2140      	movs	r1, #64	@ 0x40
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f814 	bl	800415a <UART_WaitOnFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e006      	b.n	8004152 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e000      	b.n	8004152 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004150:	2302      	movs	r3, #2
  }
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b086      	sub	sp, #24
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	4613      	mov	r3, r2
 8004168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800416a:	e03b      	b.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004172:	d037      	beq.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004174:	f7fe f814 	bl	80021a0 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	6a3a      	ldr	r2, [r7, #32]
 8004180:	429a      	cmp	r2, r3
 8004182:	d302      	bcc.n	800418a <UART_WaitOnFlagUntilTimeout+0x30>
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e03a      	b.n	8004204 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d023      	beq.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b80      	cmp	r3, #128	@ 0x80
 80041a0:	d020      	beq.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b40      	cmp	r3, #64	@ 0x40
 80041a6:	d01d      	beq.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d116      	bne.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f81d 	bl	800420c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2208      	movs	r2, #8
 80041d6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e00f      	b.n	8004204 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4013      	ands	r3, r2
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d0b4      	beq.n	800416c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800420c:	b480      	push	{r7}
 800420e:	b095      	sub	sp, #84	@ 0x54
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004226:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800422a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	330c      	adds	r3, #12
 8004232:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004234:	643a      	str	r2, [r7, #64]	@ 0x40
 8004236:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800423a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e5      	bne.n	8004214 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3314      	adds	r3, #20
 800424e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	61fb      	str	r3, [r7, #28]
   return(result);
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f023 0301 	bic.w	r3, r3, #1
 800425e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3314      	adds	r3, #20
 8004266:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004268:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800426a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800426e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004270:	e841 2300 	strex	r3, r2, [r1]
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e5      	bne.n	8004248 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004280:	2b01      	cmp	r3, #1
 8004282:	d119      	bne.n	80042b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	60bb      	str	r3, [r7, #8]
   return(result);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f023 0310 	bic.w	r3, r3, #16
 800429a:	647b      	str	r3, [r7, #68]	@ 0x44
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	330c      	adds	r3, #12
 80042a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042a4:	61ba      	str	r2, [r7, #24]
 80042a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6979      	ldr	r1, [r7, #20]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	613b      	str	r3, [r7, #16]
   return(result);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e5      	bne.n	8004284 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042c6:	bf00      	nop
 80042c8:	3754      	adds	r7, #84	@ 0x54
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d8:	b0c0      	sub	sp, #256	@ 0x100
 80042da:	af00      	add	r7, sp, #0
 80042dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f0:	68d9      	ldr	r1, [r3, #12]
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	ea40 0301 	orr.w	r3, r0, r1
 80042fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	431a      	orrs	r2, r3
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	431a      	orrs	r2, r3
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800432c:	f021 010c 	bic.w	r1, r1, #12
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800433a:	430b      	orrs	r3, r1
 800433c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800433e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800434a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434e:	6999      	ldr	r1, [r3, #24]
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	ea40 0301 	orr.w	r3, r0, r1
 800435a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800435c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4b8f      	ldr	r3, [pc, #572]	@ (80045a0 <UART_SetConfig+0x2cc>)
 8004364:	429a      	cmp	r2, r3
 8004366:	d005      	beq.n	8004374 <UART_SetConfig+0xa0>
 8004368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	4b8d      	ldr	r3, [pc, #564]	@ (80045a4 <UART_SetConfig+0x2d0>)
 8004370:	429a      	cmp	r2, r3
 8004372:	d104      	bne.n	800437e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004374:	f7fe fbda 	bl	8002b2c <HAL_RCC_GetPCLK2Freq>
 8004378:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800437c:	e003      	b.n	8004386 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800437e:	f7fe fbc1 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8004382:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004390:	f040 810c 	bne.w	80045ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004398:	2200      	movs	r2, #0
 800439a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800439e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80043a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80043a6:	4622      	mov	r2, r4
 80043a8:	462b      	mov	r3, r5
 80043aa:	1891      	adds	r1, r2, r2
 80043ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043ae:	415b      	adcs	r3, r3
 80043b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043b6:	4621      	mov	r1, r4
 80043b8:	eb12 0801 	adds.w	r8, r2, r1
 80043bc:	4629      	mov	r1, r5
 80043be:	eb43 0901 	adc.w	r9, r3, r1
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043d6:	4690      	mov	r8, r2
 80043d8:	4699      	mov	r9, r3
 80043da:	4623      	mov	r3, r4
 80043dc:	eb18 0303 	adds.w	r3, r8, r3
 80043e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043e4:	462b      	mov	r3, r5
 80043e6:	eb49 0303 	adc.w	r3, r9, r3
 80043ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004402:	460b      	mov	r3, r1
 8004404:	18db      	adds	r3, r3, r3
 8004406:	653b      	str	r3, [r7, #80]	@ 0x50
 8004408:	4613      	mov	r3, r2
 800440a:	eb42 0303 	adc.w	r3, r2, r3
 800440e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004410:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004414:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004418:	f7fc fc56 	bl	8000cc8 <__aeabi_uldivmod>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4b61      	ldr	r3, [pc, #388]	@ (80045a8 <UART_SetConfig+0x2d4>)
 8004422:	fba3 2302 	umull	r2, r3, r3, r2
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	011c      	lsls	r4, r3, #4
 800442a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800442e:	2200      	movs	r2, #0
 8004430:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004434:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004438:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800443c:	4642      	mov	r2, r8
 800443e:	464b      	mov	r3, r9
 8004440:	1891      	adds	r1, r2, r2
 8004442:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004444:	415b      	adcs	r3, r3
 8004446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004448:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800444c:	4641      	mov	r1, r8
 800444e:	eb12 0a01 	adds.w	sl, r2, r1
 8004452:	4649      	mov	r1, r9
 8004454:	eb43 0b01 	adc.w	fp, r3, r1
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004464:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004468:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800446c:	4692      	mov	sl, r2
 800446e:	469b      	mov	fp, r3
 8004470:	4643      	mov	r3, r8
 8004472:	eb1a 0303 	adds.w	r3, sl, r3
 8004476:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800447a:	464b      	mov	r3, r9
 800447c:	eb4b 0303 	adc.w	r3, fp, r3
 8004480:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004490:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004494:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004498:	460b      	mov	r3, r1
 800449a:	18db      	adds	r3, r3, r3
 800449c:	643b      	str	r3, [r7, #64]	@ 0x40
 800449e:	4613      	mov	r3, r2
 80044a0:	eb42 0303 	adc.w	r3, r2, r3
 80044a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044ae:	f7fc fc0b 	bl	8000cc8 <__aeabi_uldivmod>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4611      	mov	r1, r2
 80044b8:	4b3b      	ldr	r3, [pc, #236]	@ (80045a8 <UART_SetConfig+0x2d4>)
 80044ba:	fba3 2301 	umull	r2, r3, r3, r1
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	2264      	movs	r2, #100	@ 0x64
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	1acb      	subs	r3, r1, r3
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044ce:	4b36      	ldr	r3, [pc, #216]	@ (80045a8 <UART_SetConfig+0x2d4>)
 80044d0:	fba3 2302 	umull	r2, r3, r3, r2
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044dc:	441c      	add	r4, r3
 80044de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044f0:	4642      	mov	r2, r8
 80044f2:	464b      	mov	r3, r9
 80044f4:	1891      	adds	r1, r2, r2
 80044f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044f8:	415b      	adcs	r3, r3
 80044fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004500:	4641      	mov	r1, r8
 8004502:	1851      	adds	r1, r2, r1
 8004504:	6339      	str	r1, [r7, #48]	@ 0x30
 8004506:	4649      	mov	r1, r9
 8004508:	414b      	adcs	r3, r1
 800450a:	637b      	str	r3, [r7, #52]	@ 0x34
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004518:	4659      	mov	r1, fp
 800451a:	00cb      	lsls	r3, r1, #3
 800451c:	4651      	mov	r1, sl
 800451e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004522:	4651      	mov	r1, sl
 8004524:	00ca      	lsls	r2, r1, #3
 8004526:	4610      	mov	r0, r2
 8004528:	4619      	mov	r1, r3
 800452a:	4603      	mov	r3, r0
 800452c:	4642      	mov	r2, r8
 800452e:	189b      	adds	r3, r3, r2
 8004530:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004534:	464b      	mov	r3, r9
 8004536:	460a      	mov	r2, r1
 8004538:	eb42 0303 	adc.w	r3, r2, r3
 800453c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800454c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004550:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004554:	460b      	mov	r3, r1
 8004556:	18db      	adds	r3, r3, r3
 8004558:	62bb      	str	r3, [r7, #40]	@ 0x28
 800455a:	4613      	mov	r3, r2
 800455c:	eb42 0303 	adc.w	r3, r2, r3
 8004560:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004562:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004566:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800456a:	f7fc fbad 	bl	8000cc8 <__aeabi_uldivmod>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4b0d      	ldr	r3, [pc, #52]	@ (80045a8 <UART_SetConfig+0x2d4>)
 8004574:	fba3 1302 	umull	r1, r3, r3, r2
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	2164      	movs	r1, #100	@ 0x64
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	3332      	adds	r3, #50	@ 0x32
 8004586:	4a08      	ldr	r2, [pc, #32]	@ (80045a8 <UART_SetConfig+0x2d4>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	f003 0207 	and.w	r2, r3, #7
 8004592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4422      	add	r2, r4
 800459a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800459c:	e106      	b.n	80047ac <UART_SetConfig+0x4d8>
 800459e:	bf00      	nop
 80045a0:	40011000 	.word	0x40011000
 80045a4:	40011400 	.word	0x40011400
 80045a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045b0:	2200      	movs	r2, #0
 80045b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045be:	4642      	mov	r2, r8
 80045c0:	464b      	mov	r3, r9
 80045c2:	1891      	adds	r1, r2, r2
 80045c4:	6239      	str	r1, [r7, #32]
 80045c6:	415b      	adcs	r3, r3
 80045c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ce:	4641      	mov	r1, r8
 80045d0:	1854      	adds	r4, r2, r1
 80045d2:	4649      	mov	r1, r9
 80045d4:	eb43 0501 	adc.w	r5, r3, r1
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	00eb      	lsls	r3, r5, #3
 80045e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045e6:	00e2      	lsls	r2, r4, #3
 80045e8:	4614      	mov	r4, r2
 80045ea:	461d      	mov	r5, r3
 80045ec:	4643      	mov	r3, r8
 80045ee:	18e3      	adds	r3, r4, r3
 80045f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045f4:	464b      	mov	r3, r9
 80045f6:	eb45 0303 	adc.w	r3, r5, r3
 80045fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800460a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800461a:	4629      	mov	r1, r5
 800461c:	008b      	lsls	r3, r1, #2
 800461e:	4621      	mov	r1, r4
 8004620:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004624:	4621      	mov	r1, r4
 8004626:	008a      	lsls	r2, r1, #2
 8004628:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800462c:	f7fc fb4c 	bl	8000cc8 <__aeabi_uldivmod>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4b60      	ldr	r3, [pc, #384]	@ (80047b8 <UART_SetConfig+0x4e4>)
 8004636:	fba3 2302 	umull	r2, r3, r3, r2
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	011c      	lsls	r4, r3, #4
 800463e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004642:	2200      	movs	r2, #0
 8004644:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004648:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800464c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004650:	4642      	mov	r2, r8
 8004652:	464b      	mov	r3, r9
 8004654:	1891      	adds	r1, r2, r2
 8004656:	61b9      	str	r1, [r7, #24]
 8004658:	415b      	adcs	r3, r3
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004660:	4641      	mov	r1, r8
 8004662:	1851      	adds	r1, r2, r1
 8004664:	6139      	str	r1, [r7, #16]
 8004666:	4649      	mov	r1, r9
 8004668:	414b      	adcs	r3, r1
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004678:	4659      	mov	r1, fp
 800467a:	00cb      	lsls	r3, r1, #3
 800467c:	4651      	mov	r1, sl
 800467e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004682:	4651      	mov	r1, sl
 8004684:	00ca      	lsls	r2, r1, #3
 8004686:	4610      	mov	r0, r2
 8004688:	4619      	mov	r1, r3
 800468a:	4603      	mov	r3, r0
 800468c:	4642      	mov	r2, r8
 800468e:	189b      	adds	r3, r3, r2
 8004690:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004694:	464b      	mov	r3, r9
 8004696:	460a      	mov	r2, r1
 8004698:	eb42 0303 	adc.w	r3, r2, r3
 800469c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046b8:	4649      	mov	r1, r9
 80046ba:	008b      	lsls	r3, r1, #2
 80046bc:	4641      	mov	r1, r8
 80046be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046c2:	4641      	mov	r1, r8
 80046c4:	008a      	lsls	r2, r1, #2
 80046c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046ca:	f7fc fafd 	bl	8000cc8 <__aeabi_uldivmod>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4611      	mov	r1, r2
 80046d4:	4b38      	ldr	r3, [pc, #224]	@ (80047b8 <UART_SetConfig+0x4e4>)
 80046d6:	fba3 2301 	umull	r2, r3, r3, r1
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	2264      	movs	r2, #100	@ 0x64
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	1acb      	subs	r3, r1, r3
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	3332      	adds	r3, #50	@ 0x32
 80046e8:	4a33      	ldr	r2, [pc, #204]	@ (80047b8 <UART_SetConfig+0x4e4>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046f4:	441c      	add	r4, r3
 80046f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046fa:	2200      	movs	r2, #0
 80046fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80046fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004700:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004704:	4642      	mov	r2, r8
 8004706:	464b      	mov	r3, r9
 8004708:	1891      	adds	r1, r2, r2
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	415b      	adcs	r3, r3
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004714:	4641      	mov	r1, r8
 8004716:	1851      	adds	r1, r2, r1
 8004718:	6039      	str	r1, [r7, #0]
 800471a:	4649      	mov	r1, r9
 800471c:	414b      	adcs	r3, r1
 800471e:	607b      	str	r3, [r7, #4]
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800472c:	4659      	mov	r1, fp
 800472e:	00cb      	lsls	r3, r1, #3
 8004730:	4651      	mov	r1, sl
 8004732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004736:	4651      	mov	r1, sl
 8004738:	00ca      	lsls	r2, r1, #3
 800473a:	4610      	mov	r0, r2
 800473c:	4619      	mov	r1, r3
 800473e:	4603      	mov	r3, r0
 8004740:	4642      	mov	r2, r8
 8004742:	189b      	adds	r3, r3, r2
 8004744:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004746:	464b      	mov	r3, r9
 8004748:	460a      	mov	r2, r1
 800474a:	eb42 0303 	adc.w	r3, r2, r3
 800474e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	663b      	str	r3, [r7, #96]	@ 0x60
 800475a:	667a      	str	r2, [r7, #100]	@ 0x64
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004768:	4649      	mov	r1, r9
 800476a:	008b      	lsls	r3, r1, #2
 800476c:	4641      	mov	r1, r8
 800476e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004772:	4641      	mov	r1, r8
 8004774:	008a      	lsls	r2, r1, #2
 8004776:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800477a:	f7fc faa5 	bl	8000cc8 <__aeabi_uldivmod>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4b0d      	ldr	r3, [pc, #52]	@ (80047b8 <UART_SetConfig+0x4e4>)
 8004784:	fba3 1302 	umull	r1, r3, r3, r2
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	2164      	movs	r1, #100	@ 0x64
 800478c:	fb01 f303 	mul.w	r3, r1, r3
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	3332      	adds	r3, #50	@ 0x32
 8004796:	4a08      	ldr	r2, [pc, #32]	@ (80047b8 <UART_SetConfig+0x4e4>)
 8004798:	fba2 2303 	umull	r2, r3, r2, r3
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	f003 020f 	and.w	r2, r3, #15
 80047a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4422      	add	r2, r4
 80047aa:	609a      	str	r2, [r3, #8]
}
 80047ac:	bf00      	nop
 80047ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047b2:	46bd      	mov	sp, r7
 80047b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b8:	51eb851f 	.word	0x51eb851f

080047bc <__cvt>:
 80047bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047c0:	b088      	sub	sp, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	461d      	mov	r5, r3
 80047c6:	4614      	mov	r4, r2
 80047c8:	bfbc      	itt	lt
 80047ca:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80047ce:	4614      	movlt	r4, r2
 80047d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80047d2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80047d4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80047d8:	bfb6      	itet	lt
 80047da:	461d      	movlt	r5, r3
 80047dc:	2300      	movge	r3, #0
 80047de:	232d      	movlt	r3, #45	@ 0x2d
 80047e0:	7013      	strb	r3, [r2, #0]
 80047e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80047e4:	f023 0820 	bic.w	r8, r3, #32
 80047e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047ec:	d005      	beq.n	80047fa <__cvt+0x3e>
 80047ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80047f2:	d100      	bne.n	80047f6 <__cvt+0x3a>
 80047f4:	3601      	adds	r6, #1
 80047f6:	2302      	movs	r3, #2
 80047f8:	e000      	b.n	80047fc <__cvt+0x40>
 80047fa:	2303      	movs	r3, #3
 80047fc:	aa07      	add	r2, sp, #28
 80047fe:	9204      	str	r2, [sp, #16]
 8004800:	aa06      	add	r2, sp, #24
 8004802:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004806:	e9cd 3600 	strd	r3, r6, [sp]
 800480a:	4622      	mov	r2, r4
 800480c:	462b      	mov	r3, r5
 800480e:	f001 f89f 	bl	8005950 <_dtoa_r>
 8004812:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004816:	4607      	mov	r7, r0
 8004818:	d119      	bne.n	800484e <__cvt+0x92>
 800481a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800481c:	07db      	lsls	r3, r3, #31
 800481e:	d50e      	bpl.n	800483e <__cvt+0x82>
 8004820:	eb00 0906 	add.w	r9, r0, r6
 8004824:	2200      	movs	r2, #0
 8004826:	2300      	movs	r3, #0
 8004828:	4620      	mov	r0, r4
 800482a:	4629      	mov	r1, r5
 800482c:	f7fc f96c 	bl	8000b08 <__aeabi_dcmpeq>
 8004830:	b108      	cbz	r0, 8004836 <__cvt+0x7a>
 8004832:	f8cd 901c 	str.w	r9, [sp, #28]
 8004836:	2230      	movs	r2, #48	@ 0x30
 8004838:	9b07      	ldr	r3, [sp, #28]
 800483a:	454b      	cmp	r3, r9
 800483c:	d31e      	bcc.n	800487c <__cvt+0xc0>
 800483e:	9b07      	ldr	r3, [sp, #28]
 8004840:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004842:	1bdb      	subs	r3, r3, r7
 8004844:	4638      	mov	r0, r7
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	b008      	add	sp, #32
 800484a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800484e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004852:	eb00 0906 	add.w	r9, r0, r6
 8004856:	d1e5      	bne.n	8004824 <__cvt+0x68>
 8004858:	7803      	ldrb	r3, [r0, #0]
 800485a:	2b30      	cmp	r3, #48	@ 0x30
 800485c:	d10a      	bne.n	8004874 <__cvt+0xb8>
 800485e:	2200      	movs	r2, #0
 8004860:	2300      	movs	r3, #0
 8004862:	4620      	mov	r0, r4
 8004864:	4629      	mov	r1, r5
 8004866:	f7fc f94f 	bl	8000b08 <__aeabi_dcmpeq>
 800486a:	b918      	cbnz	r0, 8004874 <__cvt+0xb8>
 800486c:	f1c6 0601 	rsb	r6, r6, #1
 8004870:	f8ca 6000 	str.w	r6, [sl]
 8004874:	f8da 3000 	ldr.w	r3, [sl]
 8004878:	4499      	add	r9, r3
 800487a:	e7d3      	b.n	8004824 <__cvt+0x68>
 800487c:	1c59      	adds	r1, r3, #1
 800487e:	9107      	str	r1, [sp, #28]
 8004880:	701a      	strb	r2, [r3, #0]
 8004882:	e7d9      	b.n	8004838 <__cvt+0x7c>

08004884 <__exponent>:
 8004884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004886:	2900      	cmp	r1, #0
 8004888:	bfba      	itte	lt
 800488a:	4249      	neglt	r1, r1
 800488c:	232d      	movlt	r3, #45	@ 0x2d
 800488e:	232b      	movge	r3, #43	@ 0x2b
 8004890:	2909      	cmp	r1, #9
 8004892:	7002      	strb	r2, [r0, #0]
 8004894:	7043      	strb	r3, [r0, #1]
 8004896:	dd29      	ble.n	80048ec <__exponent+0x68>
 8004898:	f10d 0307 	add.w	r3, sp, #7
 800489c:	461d      	mov	r5, r3
 800489e:	270a      	movs	r7, #10
 80048a0:	461a      	mov	r2, r3
 80048a2:	fbb1 f6f7 	udiv	r6, r1, r7
 80048a6:	fb07 1416 	mls	r4, r7, r6, r1
 80048aa:	3430      	adds	r4, #48	@ 0x30
 80048ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80048b0:	460c      	mov	r4, r1
 80048b2:	2c63      	cmp	r4, #99	@ 0x63
 80048b4:	f103 33ff 	add.w	r3, r3, #4294967295
 80048b8:	4631      	mov	r1, r6
 80048ba:	dcf1      	bgt.n	80048a0 <__exponent+0x1c>
 80048bc:	3130      	adds	r1, #48	@ 0x30
 80048be:	1e94      	subs	r4, r2, #2
 80048c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80048c4:	1c41      	adds	r1, r0, #1
 80048c6:	4623      	mov	r3, r4
 80048c8:	42ab      	cmp	r3, r5
 80048ca:	d30a      	bcc.n	80048e2 <__exponent+0x5e>
 80048cc:	f10d 0309 	add.w	r3, sp, #9
 80048d0:	1a9b      	subs	r3, r3, r2
 80048d2:	42ac      	cmp	r4, r5
 80048d4:	bf88      	it	hi
 80048d6:	2300      	movhi	r3, #0
 80048d8:	3302      	adds	r3, #2
 80048da:	4403      	add	r3, r0
 80048dc:	1a18      	subs	r0, r3, r0
 80048de:	b003      	add	sp, #12
 80048e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80048e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80048ea:	e7ed      	b.n	80048c8 <__exponent+0x44>
 80048ec:	2330      	movs	r3, #48	@ 0x30
 80048ee:	3130      	adds	r1, #48	@ 0x30
 80048f0:	7083      	strb	r3, [r0, #2]
 80048f2:	70c1      	strb	r1, [r0, #3]
 80048f4:	1d03      	adds	r3, r0, #4
 80048f6:	e7f1      	b.n	80048dc <__exponent+0x58>

080048f8 <_printf_float>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	b091      	sub	sp, #68	@ 0x44
 80048fe:	460c      	mov	r4, r1
 8004900:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004904:	4616      	mov	r6, r2
 8004906:	461f      	mov	r7, r3
 8004908:	4605      	mov	r5, r0
 800490a:	f000 ff1b 	bl	8005744 <_localeconv_r>
 800490e:	6803      	ldr	r3, [r0, #0]
 8004910:	9308      	str	r3, [sp, #32]
 8004912:	4618      	mov	r0, r3
 8004914:	f7fb fccc 	bl	80002b0 <strlen>
 8004918:	2300      	movs	r3, #0
 800491a:	930e      	str	r3, [sp, #56]	@ 0x38
 800491c:	f8d8 3000 	ldr.w	r3, [r8]
 8004920:	9009      	str	r0, [sp, #36]	@ 0x24
 8004922:	3307      	adds	r3, #7
 8004924:	f023 0307 	bic.w	r3, r3, #7
 8004928:	f103 0208 	add.w	r2, r3, #8
 800492c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004930:	f8d4 b000 	ldr.w	fp, [r4]
 8004934:	f8c8 2000 	str.w	r2, [r8]
 8004938:	e9d3 8900 	ldrd	r8, r9, [r3]
 800493c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004940:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004942:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004946:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800494a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800494e:	4b9d      	ldr	r3, [pc, #628]	@ (8004bc4 <_printf_float+0x2cc>)
 8004950:	f04f 32ff 	mov.w	r2, #4294967295
 8004954:	f7fc f90a 	bl	8000b6c <__aeabi_dcmpun>
 8004958:	bb70      	cbnz	r0, 80049b8 <_printf_float+0xc0>
 800495a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800495e:	4b99      	ldr	r3, [pc, #612]	@ (8004bc4 <_printf_float+0x2cc>)
 8004960:	f04f 32ff 	mov.w	r2, #4294967295
 8004964:	f7fc f8e4 	bl	8000b30 <__aeabi_dcmple>
 8004968:	bb30      	cbnz	r0, 80049b8 <_printf_float+0xc0>
 800496a:	2200      	movs	r2, #0
 800496c:	2300      	movs	r3, #0
 800496e:	4640      	mov	r0, r8
 8004970:	4649      	mov	r1, r9
 8004972:	f7fc f8d3 	bl	8000b1c <__aeabi_dcmplt>
 8004976:	b110      	cbz	r0, 800497e <_printf_float+0x86>
 8004978:	232d      	movs	r3, #45	@ 0x2d
 800497a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800497e:	4a92      	ldr	r2, [pc, #584]	@ (8004bc8 <_printf_float+0x2d0>)
 8004980:	4b92      	ldr	r3, [pc, #584]	@ (8004bcc <_printf_float+0x2d4>)
 8004982:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004986:	bf8c      	ite	hi
 8004988:	4690      	movhi	r8, r2
 800498a:	4698      	movls	r8, r3
 800498c:	2303      	movs	r3, #3
 800498e:	6123      	str	r3, [r4, #16]
 8004990:	f02b 0304 	bic.w	r3, fp, #4
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	f04f 0900 	mov.w	r9, #0
 800499a:	9700      	str	r7, [sp, #0]
 800499c:	4633      	mov	r3, r6
 800499e:	aa0f      	add	r2, sp, #60	@ 0x3c
 80049a0:	4621      	mov	r1, r4
 80049a2:	4628      	mov	r0, r5
 80049a4:	f000 f9d4 	bl	8004d50 <_printf_common>
 80049a8:	3001      	adds	r0, #1
 80049aa:	f040 808f 	bne.w	8004acc <_printf_float+0x1d4>
 80049ae:	f04f 30ff 	mov.w	r0, #4294967295
 80049b2:	b011      	add	sp, #68	@ 0x44
 80049b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b8:	4642      	mov	r2, r8
 80049ba:	464b      	mov	r3, r9
 80049bc:	4640      	mov	r0, r8
 80049be:	4649      	mov	r1, r9
 80049c0:	f7fc f8d4 	bl	8000b6c <__aeabi_dcmpun>
 80049c4:	b140      	cbz	r0, 80049d8 <_printf_float+0xe0>
 80049c6:	464b      	mov	r3, r9
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bfbc      	itt	lt
 80049cc:	232d      	movlt	r3, #45	@ 0x2d
 80049ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80049d2:	4a7f      	ldr	r2, [pc, #508]	@ (8004bd0 <_printf_float+0x2d8>)
 80049d4:	4b7f      	ldr	r3, [pc, #508]	@ (8004bd4 <_printf_float+0x2dc>)
 80049d6:	e7d4      	b.n	8004982 <_printf_float+0x8a>
 80049d8:	6863      	ldr	r3, [r4, #4]
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80049e0:	d13f      	bne.n	8004a62 <_printf_float+0x16a>
 80049e2:	2306      	movs	r3, #6
 80049e4:	6063      	str	r3, [r4, #4]
 80049e6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80049ea:	2200      	movs	r2, #0
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	9206      	str	r2, [sp, #24]
 80049f0:	aa0e      	add	r2, sp, #56	@ 0x38
 80049f2:	e9cd a204 	strd	sl, r2, [sp, #16]
 80049f6:	aa0d      	add	r2, sp, #52	@ 0x34
 80049f8:	9203      	str	r2, [sp, #12]
 80049fa:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80049fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004a02:	6863      	ldr	r3, [r4, #4]
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	4642      	mov	r2, r8
 8004a08:	464b      	mov	r3, r9
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	910a      	str	r1, [sp, #40]	@ 0x28
 8004a0e:	f7ff fed5 	bl	80047bc <__cvt>
 8004a12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004a14:	2947      	cmp	r1, #71	@ 0x47
 8004a16:	4680      	mov	r8, r0
 8004a18:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004a1a:	d128      	bne.n	8004a6e <_printf_float+0x176>
 8004a1c:	1cc8      	adds	r0, r1, #3
 8004a1e:	db02      	blt.n	8004a26 <_printf_float+0x12e>
 8004a20:	6863      	ldr	r3, [r4, #4]
 8004a22:	4299      	cmp	r1, r3
 8004a24:	dd40      	ble.n	8004aa8 <_printf_float+0x1b0>
 8004a26:	f1aa 0a02 	sub.w	sl, sl, #2
 8004a2a:	fa5f fa8a 	uxtb.w	sl, sl
 8004a2e:	3901      	subs	r1, #1
 8004a30:	4652      	mov	r2, sl
 8004a32:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004a36:	910d      	str	r1, [sp, #52]	@ 0x34
 8004a38:	f7ff ff24 	bl	8004884 <__exponent>
 8004a3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a3e:	1813      	adds	r3, r2, r0
 8004a40:	2a01      	cmp	r2, #1
 8004a42:	4681      	mov	r9, r0
 8004a44:	6123      	str	r3, [r4, #16]
 8004a46:	dc02      	bgt.n	8004a4e <_printf_float+0x156>
 8004a48:	6822      	ldr	r2, [r4, #0]
 8004a4a:	07d2      	lsls	r2, r2, #31
 8004a4c:	d501      	bpl.n	8004a52 <_printf_float+0x15a>
 8004a4e:	3301      	adds	r3, #1
 8004a50:	6123      	str	r3, [r4, #16]
 8004a52:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d09f      	beq.n	800499a <_printf_float+0xa2>
 8004a5a:	232d      	movs	r3, #45	@ 0x2d
 8004a5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a60:	e79b      	b.n	800499a <_printf_float+0xa2>
 8004a62:	2947      	cmp	r1, #71	@ 0x47
 8004a64:	d1bf      	bne.n	80049e6 <_printf_float+0xee>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1bd      	bne.n	80049e6 <_printf_float+0xee>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e7ba      	b.n	80049e4 <_printf_float+0xec>
 8004a6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a72:	d9dc      	bls.n	8004a2e <_printf_float+0x136>
 8004a74:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004a78:	d118      	bne.n	8004aac <_printf_float+0x1b4>
 8004a7a:	2900      	cmp	r1, #0
 8004a7c:	6863      	ldr	r3, [r4, #4]
 8004a7e:	dd0b      	ble.n	8004a98 <_printf_float+0x1a0>
 8004a80:	6121      	str	r1, [r4, #16]
 8004a82:	b913      	cbnz	r3, 8004a8a <_printf_float+0x192>
 8004a84:	6822      	ldr	r2, [r4, #0]
 8004a86:	07d0      	lsls	r0, r2, #31
 8004a88:	d502      	bpl.n	8004a90 <_printf_float+0x198>
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	440b      	add	r3, r1
 8004a8e:	6123      	str	r3, [r4, #16]
 8004a90:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a92:	f04f 0900 	mov.w	r9, #0
 8004a96:	e7dc      	b.n	8004a52 <_printf_float+0x15a>
 8004a98:	b913      	cbnz	r3, 8004aa0 <_printf_float+0x1a8>
 8004a9a:	6822      	ldr	r2, [r4, #0]
 8004a9c:	07d2      	lsls	r2, r2, #31
 8004a9e:	d501      	bpl.n	8004aa4 <_printf_float+0x1ac>
 8004aa0:	3302      	adds	r3, #2
 8004aa2:	e7f4      	b.n	8004a8e <_printf_float+0x196>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e7f2      	b.n	8004a8e <_printf_float+0x196>
 8004aa8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004aac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004aae:	4299      	cmp	r1, r3
 8004ab0:	db05      	blt.n	8004abe <_printf_float+0x1c6>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	6121      	str	r1, [r4, #16]
 8004ab6:	07d8      	lsls	r0, r3, #31
 8004ab8:	d5ea      	bpl.n	8004a90 <_printf_float+0x198>
 8004aba:	1c4b      	adds	r3, r1, #1
 8004abc:	e7e7      	b.n	8004a8e <_printf_float+0x196>
 8004abe:	2900      	cmp	r1, #0
 8004ac0:	bfd4      	ite	le
 8004ac2:	f1c1 0202 	rsble	r2, r1, #2
 8004ac6:	2201      	movgt	r2, #1
 8004ac8:	4413      	add	r3, r2
 8004aca:	e7e0      	b.n	8004a8e <_printf_float+0x196>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	055a      	lsls	r2, r3, #21
 8004ad0:	d407      	bmi.n	8004ae2 <_printf_float+0x1ea>
 8004ad2:	6923      	ldr	r3, [r4, #16]
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	4631      	mov	r1, r6
 8004ad8:	4628      	mov	r0, r5
 8004ada:	47b8      	blx	r7
 8004adc:	3001      	adds	r0, #1
 8004ade:	d12b      	bne.n	8004b38 <_printf_float+0x240>
 8004ae0:	e765      	b.n	80049ae <_printf_float+0xb6>
 8004ae2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ae6:	f240 80dd 	bls.w	8004ca4 <_printf_float+0x3ac>
 8004aea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004aee:	2200      	movs	r2, #0
 8004af0:	2300      	movs	r3, #0
 8004af2:	f7fc f809 	bl	8000b08 <__aeabi_dcmpeq>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d033      	beq.n	8004b62 <_printf_float+0x26a>
 8004afa:	4a37      	ldr	r2, [pc, #220]	@ (8004bd8 <_printf_float+0x2e0>)
 8004afc:	2301      	movs	r3, #1
 8004afe:	4631      	mov	r1, r6
 8004b00:	4628      	mov	r0, r5
 8004b02:	47b8      	blx	r7
 8004b04:	3001      	adds	r0, #1
 8004b06:	f43f af52 	beq.w	80049ae <_printf_float+0xb6>
 8004b0a:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004b0e:	4543      	cmp	r3, r8
 8004b10:	db02      	blt.n	8004b18 <_printf_float+0x220>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	07d8      	lsls	r0, r3, #31
 8004b16:	d50f      	bpl.n	8004b38 <_printf_float+0x240>
 8004b18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b1c:	4631      	mov	r1, r6
 8004b1e:	4628      	mov	r0, r5
 8004b20:	47b8      	blx	r7
 8004b22:	3001      	adds	r0, #1
 8004b24:	f43f af43 	beq.w	80049ae <_printf_float+0xb6>
 8004b28:	f04f 0900 	mov.w	r9, #0
 8004b2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b30:	f104 0a1a 	add.w	sl, r4, #26
 8004b34:	45c8      	cmp	r8, r9
 8004b36:	dc09      	bgt.n	8004b4c <_printf_float+0x254>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	079b      	lsls	r3, r3, #30
 8004b3c:	f100 8103 	bmi.w	8004d46 <_printf_float+0x44e>
 8004b40:	68e0      	ldr	r0, [r4, #12]
 8004b42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b44:	4298      	cmp	r0, r3
 8004b46:	bfb8      	it	lt
 8004b48:	4618      	movlt	r0, r3
 8004b4a:	e732      	b.n	80049b2 <_printf_float+0xba>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	4652      	mov	r2, sl
 8004b50:	4631      	mov	r1, r6
 8004b52:	4628      	mov	r0, r5
 8004b54:	47b8      	blx	r7
 8004b56:	3001      	adds	r0, #1
 8004b58:	f43f af29 	beq.w	80049ae <_printf_float+0xb6>
 8004b5c:	f109 0901 	add.w	r9, r9, #1
 8004b60:	e7e8      	b.n	8004b34 <_printf_float+0x23c>
 8004b62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	dc39      	bgt.n	8004bdc <_printf_float+0x2e4>
 8004b68:	4a1b      	ldr	r2, [pc, #108]	@ (8004bd8 <_printf_float+0x2e0>)
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4631      	mov	r1, r6
 8004b6e:	4628      	mov	r0, r5
 8004b70:	47b8      	blx	r7
 8004b72:	3001      	adds	r0, #1
 8004b74:	f43f af1b 	beq.w	80049ae <_printf_float+0xb6>
 8004b78:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004b7c:	ea59 0303 	orrs.w	r3, r9, r3
 8004b80:	d102      	bne.n	8004b88 <_printf_float+0x290>
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	07d9      	lsls	r1, r3, #31
 8004b86:	d5d7      	bpl.n	8004b38 <_printf_float+0x240>
 8004b88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	4628      	mov	r0, r5
 8004b90:	47b8      	blx	r7
 8004b92:	3001      	adds	r0, #1
 8004b94:	f43f af0b 	beq.w	80049ae <_printf_float+0xb6>
 8004b98:	f04f 0a00 	mov.w	sl, #0
 8004b9c:	f104 0b1a 	add.w	fp, r4, #26
 8004ba0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ba2:	425b      	negs	r3, r3
 8004ba4:	4553      	cmp	r3, sl
 8004ba6:	dc01      	bgt.n	8004bac <_printf_float+0x2b4>
 8004ba8:	464b      	mov	r3, r9
 8004baa:	e793      	b.n	8004ad4 <_printf_float+0x1dc>
 8004bac:	2301      	movs	r3, #1
 8004bae:	465a      	mov	r2, fp
 8004bb0:	4631      	mov	r1, r6
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	47b8      	blx	r7
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	f43f aef9 	beq.w	80049ae <_printf_float+0xb6>
 8004bbc:	f10a 0a01 	add.w	sl, sl, #1
 8004bc0:	e7ee      	b.n	8004ba0 <_printf_float+0x2a8>
 8004bc2:	bf00      	nop
 8004bc4:	7fefffff 	.word	0x7fefffff
 8004bc8:	08009024 	.word	0x08009024
 8004bcc:	08009020 	.word	0x08009020
 8004bd0:	0800902c 	.word	0x0800902c
 8004bd4:	08009028 	.word	0x08009028
 8004bd8:	08009030 	.word	0x08009030
 8004bdc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004bde:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004be2:	4553      	cmp	r3, sl
 8004be4:	bfa8      	it	ge
 8004be6:	4653      	movge	r3, sl
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	4699      	mov	r9, r3
 8004bec:	dc36      	bgt.n	8004c5c <_printf_float+0x364>
 8004bee:	f04f 0b00 	mov.w	fp, #0
 8004bf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bf6:	f104 021a 	add.w	r2, r4, #26
 8004bfa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004bfc:	930a      	str	r3, [sp, #40]	@ 0x28
 8004bfe:	eba3 0309 	sub.w	r3, r3, r9
 8004c02:	455b      	cmp	r3, fp
 8004c04:	dc31      	bgt.n	8004c6a <_printf_float+0x372>
 8004c06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c08:	459a      	cmp	sl, r3
 8004c0a:	dc3a      	bgt.n	8004c82 <_printf_float+0x38a>
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	07da      	lsls	r2, r3, #31
 8004c10:	d437      	bmi.n	8004c82 <_printf_float+0x38a>
 8004c12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c14:	ebaa 0903 	sub.w	r9, sl, r3
 8004c18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c1a:	ebaa 0303 	sub.w	r3, sl, r3
 8004c1e:	4599      	cmp	r9, r3
 8004c20:	bfa8      	it	ge
 8004c22:	4699      	movge	r9, r3
 8004c24:	f1b9 0f00 	cmp.w	r9, #0
 8004c28:	dc33      	bgt.n	8004c92 <_printf_float+0x39a>
 8004c2a:	f04f 0800 	mov.w	r8, #0
 8004c2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c32:	f104 0b1a 	add.w	fp, r4, #26
 8004c36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c38:	ebaa 0303 	sub.w	r3, sl, r3
 8004c3c:	eba3 0309 	sub.w	r3, r3, r9
 8004c40:	4543      	cmp	r3, r8
 8004c42:	f77f af79 	ble.w	8004b38 <_printf_float+0x240>
 8004c46:	2301      	movs	r3, #1
 8004c48:	465a      	mov	r2, fp
 8004c4a:	4631      	mov	r1, r6
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	47b8      	blx	r7
 8004c50:	3001      	adds	r0, #1
 8004c52:	f43f aeac 	beq.w	80049ae <_printf_float+0xb6>
 8004c56:	f108 0801 	add.w	r8, r8, #1
 8004c5a:	e7ec      	b.n	8004c36 <_printf_float+0x33e>
 8004c5c:	4642      	mov	r2, r8
 8004c5e:	4631      	mov	r1, r6
 8004c60:	4628      	mov	r0, r5
 8004c62:	47b8      	blx	r7
 8004c64:	3001      	adds	r0, #1
 8004c66:	d1c2      	bne.n	8004bee <_printf_float+0x2f6>
 8004c68:	e6a1      	b.n	80049ae <_printf_float+0xb6>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4631      	mov	r1, r6
 8004c6e:	4628      	mov	r0, r5
 8004c70:	920a      	str	r2, [sp, #40]	@ 0x28
 8004c72:	47b8      	blx	r7
 8004c74:	3001      	adds	r0, #1
 8004c76:	f43f ae9a 	beq.w	80049ae <_printf_float+0xb6>
 8004c7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c7c:	f10b 0b01 	add.w	fp, fp, #1
 8004c80:	e7bb      	b.n	8004bfa <_printf_float+0x302>
 8004c82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c86:	4631      	mov	r1, r6
 8004c88:	4628      	mov	r0, r5
 8004c8a:	47b8      	blx	r7
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d1c0      	bne.n	8004c12 <_printf_float+0x31a>
 8004c90:	e68d      	b.n	80049ae <_printf_float+0xb6>
 8004c92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c94:	464b      	mov	r3, r9
 8004c96:	4442      	add	r2, r8
 8004c98:	4631      	mov	r1, r6
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	47b8      	blx	r7
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d1c3      	bne.n	8004c2a <_printf_float+0x332>
 8004ca2:	e684      	b.n	80049ae <_printf_float+0xb6>
 8004ca4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004ca8:	f1ba 0f01 	cmp.w	sl, #1
 8004cac:	dc01      	bgt.n	8004cb2 <_printf_float+0x3ba>
 8004cae:	07db      	lsls	r3, r3, #31
 8004cb0:	d536      	bpl.n	8004d20 <_printf_float+0x428>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	4628      	mov	r0, r5
 8004cba:	47b8      	blx	r7
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	f43f ae76 	beq.w	80049ae <_printf_float+0xb6>
 8004cc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004cc6:	4631      	mov	r1, r6
 8004cc8:	4628      	mov	r0, r5
 8004cca:	47b8      	blx	r7
 8004ccc:	3001      	adds	r0, #1
 8004cce:	f43f ae6e 	beq.w	80049ae <_printf_float+0xb6>
 8004cd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cde:	f7fb ff13 	bl	8000b08 <__aeabi_dcmpeq>
 8004ce2:	b9c0      	cbnz	r0, 8004d16 <_printf_float+0x41e>
 8004ce4:	4653      	mov	r3, sl
 8004ce6:	f108 0201 	add.w	r2, r8, #1
 8004cea:	4631      	mov	r1, r6
 8004cec:	4628      	mov	r0, r5
 8004cee:	47b8      	blx	r7
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d10c      	bne.n	8004d0e <_printf_float+0x416>
 8004cf4:	e65b      	b.n	80049ae <_printf_float+0xb6>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	465a      	mov	r2, fp
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	47b8      	blx	r7
 8004d00:	3001      	adds	r0, #1
 8004d02:	f43f ae54 	beq.w	80049ae <_printf_float+0xb6>
 8004d06:	f108 0801 	add.w	r8, r8, #1
 8004d0a:	45d0      	cmp	r8, sl
 8004d0c:	dbf3      	blt.n	8004cf6 <_printf_float+0x3fe>
 8004d0e:	464b      	mov	r3, r9
 8004d10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004d14:	e6df      	b.n	8004ad6 <_printf_float+0x1de>
 8004d16:	f04f 0800 	mov.w	r8, #0
 8004d1a:	f104 0b1a 	add.w	fp, r4, #26
 8004d1e:	e7f4      	b.n	8004d0a <_printf_float+0x412>
 8004d20:	2301      	movs	r3, #1
 8004d22:	4642      	mov	r2, r8
 8004d24:	e7e1      	b.n	8004cea <_printf_float+0x3f2>
 8004d26:	2301      	movs	r3, #1
 8004d28:	464a      	mov	r2, r9
 8004d2a:	4631      	mov	r1, r6
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	47b8      	blx	r7
 8004d30:	3001      	adds	r0, #1
 8004d32:	f43f ae3c 	beq.w	80049ae <_printf_float+0xb6>
 8004d36:	f108 0801 	add.w	r8, r8, #1
 8004d3a:	68e3      	ldr	r3, [r4, #12]
 8004d3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004d3e:	1a5b      	subs	r3, r3, r1
 8004d40:	4543      	cmp	r3, r8
 8004d42:	dcf0      	bgt.n	8004d26 <_printf_float+0x42e>
 8004d44:	e6fc      	b.n	8004b40 <_printf_float+0x248>
 8004d46:	f04f 0800 	mov.w	r8, #0
 8004d4a:	f104 0919 	add.w	r9, r4, #25
 8004d4e:	e7f4      	b.n	8004d3a <_printf_float+0x442>

08004d50 <_printf_common>:
 8004d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d54:	4616      	mov	r6, r2
 8004d56:	4698      	mov	r8, r3
 8004d58:	688a      	ldr	r2, [r1, #8]
 8004d5a:	690b      	ldr	r3, [r1, #16]
 8004d5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d60:	4293      	cmp	r3, r2
 8004d62:	bfb8      	it	lt
 8004d64:	4613      	movlt	r3, r2
 8004d66:	6033      	str	r3, [r6, #0]
 8004d68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d6c:	4607      	mov	r7, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	b10a      	cbz	r2, 8004d76 <_printf_common+0x26>
 8004d72:	3301      	adds	r3, #1
 8004d74:	6033      	str	r3, [r6, #0]
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	0699      	lsls	r1, r3, #26
 8004d7a:	bf42      	ittt	mi
 8004d7c:	6833      	ldrmi	r3, [r6, #0]
 8004d7e:	3302      	addmi	r3, #2
 8004d80:	6033      	strmi	r3, [r6, #0]
 8004d82:	6825      	ldr	r5, [r4, #0]
 8004d84:	f015 0506 	ands.w	r5, r5, #6
 8004d88:	d106      	bne.n	8004d98 <_printf_common+0x48>
 8004d8a:	f104 0a19 	add.w	sl, r4, #25
 8004d8e:	68e3      	ldr	r3, [r4, #12]
 8004d90:	6832      	ldr	r2, [r6, #0]
 8004d92:	1a9b      	subs	r3, r3, r2
 8004d94:	42ab      	cmp	r3, r5
 8004d96:	dc26      	bgt.n	8004de6 <_printf_common+0x96>
 8004d98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d9c:	6822      	ldr	r2, [r4, #0]
 8004d9e:	3b00      	subs	r3, #0
 8004da0:	bf18      	it	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	0692      	lsls	r2, r2, #26
 8004da6:	d42b      	bmi.n	8004e00 <_printf_common+0xb0>
 8004da8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004dac:	4641      	mov	r1, r8
 8004dae:	4638      	mov	r0, r7
 8004db0:	47c8      	blx	r9
 8004db2:	3001      	adds	r0, #1
 8004db4:	d01e      	beq.n	8004df4 <_printf_common+0xa4>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	6922      	ldr	r2, [r4, #16]
 8004dba:	f003 0306 	and.w	r3, r3, #6
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	bf02      	ittt	eq
 8004dc2:	68e5      	ldreq	r5, [r4, #12]
 8004dc4:	6833      	ldreq	r3, [r6, #0]
 8004dc6:	1aed      	subeq	r5, r5, r3
 8004dc8:	68a3      	ldr	r3, [r4, #8]
 8004dca:	bf0c      	ite	eq
 8004dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dd0:	2500      	movne	r5, #0
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	bfc4      	itt	gt
 8004dd6:	1a9b      	subgt	r3, r3, r2
 8004dd8:	18ed      	addgt	r5, r5, r3
 8004dda:	2600      	movs	r6, #0
 8004ddc:	341a      	adds	r4, #26
 8004dde:	42b5      	cmp	r5, r6
 8004de0:	d11a      	bne.n	8004e18 <_printf_common+0xc8>
 8004de2:	2000      	movs	r0, #0
 8004de4:	e008      	b.n	8004df8 <_printf_common+0xa8>
 8004de6:	2301      	movs	r3, #1
 8004de8:	4652      	mov	r2, sl
 8004dea:	4641      	mov	r1, r8
 8004dec:	4638      	mov	r0, r7
 8004dee:	47c8      	blx	r9
 8004df0:	3001      	adds	r0, #1
 8004df2:	d103      	bne.n	8004dfc <_printf_common+0xac>
 8004df4:	f04f 30ff 	mov.w	r0, #4294967295
 8004df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfc:	3501      	adds	r5, #1
 8004dfe:	e7c6      	b.n	8004d8e <_printf_common+0x3e>
 8004e00:	18e1      	adds	r1, r4, r3
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	2030      	movs	r0, #48	@ 0x30
 8004e06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e0a:	4422      	add	r2, r4
 8004e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e14:	3302      	adds	r3, #2
 8004e16:	e7c7      	b.n	8004da8 <_printf_common+0x58>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	4638      	mov	r0, r7
 8004e20:	47c8      	blx	r9
 8004e22:	3001      	adds	r0, #1
 8004e24:	d0e6      	beq.n	8004df4 <_printf_common+0xa4>
 8004e26:	3601      	adds	r6, #1
 8004e28:	e7d9      	b.n	8004dde <_printf_common+0x8e>
	...

08004e2c <_printf_i>:
 8004e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e30:	7e0f      	ldrb	r7, [r1, #24]
 8004e32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e34:	2f78      	cmp	r7, #120	@ 0x78
 8004e36:	4691      	mov	r9, r2
 8004e38:	4680      	mov	r8, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	469a      	mov	sl, r3
 8004e3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e42:	d807      	bhi.n	8004e54 <_printf_i+0x28>
 8004e44:	2f62      	cmp	r7, #98	@ 0x62
 8004e46:	d80a      	bhi.n	8004e5e <_printf_i+0x32>
 8004e48:	2f00      	cmp	r7, #0
 8004e4a:	f000 80d1 	beq.w	8004ff0 <_printf_i+0x1c4>
 8004e4e:	2f58      	cmp	r7, #88	@ 0x58
 8004e50:	f000 80b8 	beq.w	8004fc4 <_printf_i+0x198>
 8004e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e5c:	e03a      	b.n	8004ed4 <_printf_i+0xa8>
 8004e5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e62:	2b15      	cmp	r3, #21
 8004e64:	d8f6      	bhi.n	8004e54 <_printf_i+0x28>
 8004e66:	a101      	add	r1, pc, #4	@ (adr r1, 8004e6c <_printf_i+0x40>)
 8004e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e6c:	08004ec5 	.word	0x08004ec5
 8004e70:	08004ed9 	.word	0x08004ed9
 8004e74:	08004e55 	.word	0x08004e55
 8004e78:	08004e55 	.word	0x08004e55
 8004e7c:	08004e55 	.word	0x08004e55
 8004e80:	08004e55 	.word	0x08004e55
 8004e84:	08004ed9 	.word	0x08004ed9
 8004e88:	08004e55 	.word	0x08004e55
 8004e8c:	08004e55 	.word	0x08004e55
 8004e90:	08004e55 	.word	0x08004e55
 8004e94:	08004e55 	.word	0x08004e55
 8004e98:	08004fd7 	.word	0x08004fd7
 8004e9c:	08004f03 	.word	0x08004f03
 8004ea0:	08004f91 	.word	0x08004f91
 8004ea4:	08004e55 	.word	0x08004e55
 8004ea8:	08004e55 	.word	0x08004e55
 8004eac:	08004ff9 	.word	0x08004ff9
 8004eb0:	08004e55 	.word	0x08004e55
 8004eb4:	08004f03 	.word	0x08004f03
 8004eb8:	08004e55 	.word	0x08004e55
 8004ebc:	08004e55 	.word	0x08004e55
 8004ec0:	08004f99 	.word	0x08004f99
 8004ec4:	6833      	ldr	r3, [r6, #0]
 8004ec6:	1d1a      	adds	r2, r3, #4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6032      	str	r2, [r6, #0]
 8004ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ed0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e09c      	b.n	8005012 <_printf_i+0x1e6>
 8004ed8:	6833      	ldr	r3, [r6, #0]
 8004eda:	6820      	ldr	r0, [r4, #0]
 8004edc:	1d19      	adds	r1, r3, #4
 8004ede:	6031      	str	r1, [r6, #0]
 8004ee0:	0606      	lsls	r6, r0, #24
 8004ee2:	d501      	bpl.n	8004ee8 <_printf_i+0xbc>
 8004ee4:	681d      	ldr	r5, [r3, #0]
 8004ee6:	e003      	b.n	8004ef0 <_printf_i+0xc4>
 8004ee8:	0645      	lsls	r5, r0, #25
 8004eea:	d5fb      	bpl.n	8004ee4 <_printf_i+0xb8>
 8004eec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ef0:	2d00      	cmp	r5, #0
 8004ef2:	da03      	bge.n	8004efc <_printf_i+0xd0>
 8004ef4:	232d      	movs	r3, #45	@ 0x2d
 8004ef6:	426d      	negs	r5, r5
 8004ef8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004efc:	4858      	ldr	r0, [pc, #352]	@ (8005060 <_printf_i+0x234>)
 8004efe:	230a      	movs	r3, #10
 8004f00:	e011      	b.n	8004f26 <_printf_i+0xfa>
 8004f02:	6821      	ldr	r1, [r4, #0]
 8004f04:	6833      	ldr	r3, [r6, #0]
 8004f06:	0608      	lsls	r0, r1, #24
 8004f08:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f0c:	d402      	bmi.n	8004f14 <_printf_i+0xe8>
 8004f0e:	0649      	lsls	r1, r1, #25
 8004f10:	bf48      	it	mi
 8004f12:	b2ad      	uxthmi	r5, r5
 8004f14:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f16:	4852      	ldr	r0, [pc, #328]	@ (8005060 <_printf_i+0x234>)
 8004f18:	6033      	str	r3, [r6, #0]
 8004f1a:	bf14      	ite	ne
 8004f1c:	230a      	movne	r3, #10
 8004f1e:	2308      	moveq	r3, #8
 8004f20:	2100      	movs	r1, #0
 8004f22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f26:	6866      	ldr	r6, [r4, #4]
 8004f28:	60a6      	str	r6, [r4, #8]
 8004f2a:	2e00      	cmp	r6, #0
 8004f2c:	db05      	blt.n	8004f3a <_printf_i+0x10e>
 8004f2e:	6821      	ldr	r1, [r4, #0]
 8004f30:	432e      	orrs	r6, r5
 8004f32:	f021 0104 	bic.w	r1, r1, #4
 8004f36:	6021      	str	r1, [r4, #0]
 8004f38:	d04b      	beq.n	8004fd2 <_printf_i+0x1a6>
 8004f3a:	4616      	mov	r6, r2
 8004f3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f40:	fb03 5711 	mls	r7, r3, r1, r5
 8004f44:	5dc7      	ldrb	r7, [r0, r7]
 8004f46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f4a:	462f      	mov	r7, r5
 8004f4c:	42bb      	cmp	r3, r7
 8004f4e:	460d      	mov	r5, r1
 8004f50:	d9f4      	bls.n	8004f3c <_printf_i+0x110>
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d10b      	bne.n	8004f6e <_printf_i+0x142>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	07df      	lsls	r7, r3, #31
 8004f5a:	d508      	bpl.n	8004f6e <_printf_i+0x142>
 8004f5c:	6923      	ldr	r3, [r4, #16]
 8004f5e:	6861      	ldr	r1, [r4, #4]
 8004f60:	4299      	cmp	r1, r3
 8004f62:	bfde      	ittt	le
 8004f64:	2330      	movle	r3, #48	@ 0x30
 8004f66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f6e:	1b92      	subs	r2, r2, r6
 8004f70:	6122      	str	r2, [r4, #16]
 8004f72:	f8cd a000 	str.w	sl, [sp]
 8004f76:	464b      	mov	r3, r9
 8004f78:	aa03      	add	r2, sp, #12
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4640      	mov	r0, r8
 8004f7e:	f7ff fee7 	bl	8004d50 <_printf_common>
 8004f82:	3001      	adds	r0, #1
 8004f84:	d14a      	bne.n	800501c <_printf_i+0x1f0>
 8004f86:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8a:	b004      	add	sp, #16
 8004f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	f043 0320 	orr.w	r3, r3, #32
 8004f96:	6023      	str	r3, [r4, #0]
 8004f98:	4832      	ldr	r0, [pc, #200]	@ (8005064 <_printf_i+0x238>)
 8004f9a:	2778      	movs	r7, #120	@ 0x78
 8004f9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	6831      	ldr	r1, [r6, #0]
 8004fa4:	061f      	lsls	r7, r3, #24
 8004fa6:	f851 5b04 	ldr.w	r5, [r1], #4
 8004faa:	d402      	bmi.n	8004fb2 <_printf_i+0x186>
 8004fac:	065f      	lsls	r7, r3, #25
 8004fae:	bf48      	it	mi
 8004fb0:	b2ad      	uxthmi	r5, r5
 8004fb2:	6031      	str	r1, [r6, #0]
 8004fb4:	07d9      	lsls	r1, r3, #31
 8004fb6:	bf44      	itt	mi
 8004fb8:	f043 0320 	orrmi.w	r3, r3, #32
 8004fbc:	6023      	strmi	r3, [r4, #0]
 8004fbe:	b11d      	cbz	r5, 8004fc8 <_printf_i+0x19c>
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	e7ad      	b.n	8004f20 <_printf_i+0xf4>
 8004fc4:	4826      	ldr	r0, [pc, #152]	@ (8005060 <_printf_i+0x234>)
 8004fc6:	e7e9      	b.n	8004f9c <_printf_i+0x170>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	f023 0320 	bic.w	r3, r3, #32
 8004fce:	6023      	str	r3, [r4, #0]
 8004fd0:	e7f6      	b.n	8004fc0 <_printf_i+0x194>
 8004fd2:	4616      	mov	r6, r2
 8004fd4:	e7bd      	b.n	8004f52 <_printf_i+0x126>
 8004fd6:	6833      	ldr	r3, [r6, #0]
 8004fd8:	6825      	ldr	r5, [r4, #0]
 8004fda:	6961      	ldr	r1, [r4, #20]
 8004fdc:	1d18      	adds	r0, r3, #4
 8004fde:	6030      	str	r0, [r6, #0]
 8004fe0:	062e      	lsls	r6, r5, #24
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	d501      	bpl.n	8004fea <_printf_i+0x1be>
 8004fe6:	6019      	str	r1, [r3, #0]
 8004fe8:	e002      	b.n	8004ff0 <_printf_i+0x1c4>
 8004fea:	0668      	lsls	r0, r5, #25
 8004fec:	d5fb      	bpl.n	8004fe6 <_printf_i+0x1ba>
 8004fee:	8019      	strh	r1, [r3, #0]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	6123      	str	r3, [r4, #16]
 8004ff4:	4616      	mov	r6, r2
 8004ff6:	e7bc      	b.n	8004f72 <_printf_i+0x146>
 8004ff8:	6833      	ldr	r3, [r6, #0]
 8004ffa:	1d1a      	adds	r2, r3, #4
 8004ffc:	6032      	str	r2, [r6, #0]
 8004ffe:	681e      	ldr	r6, [r3, #0]
 8005000:	6862      	ldr	r2, [r4, #4]
 8005002:	2100      	movs	r1, #0
 8005004:	4630      	mov	r0, r6
 8005006:	f7fb f903 	bl	8000210 <memchr>
 800500a:	b108      	cbz	r0, 8005010 <_printf_i+0x1e4>
 800500c:	1b80      	subs	r0, r0, r6
 800500e:	6060      	str	r0, [r4, #4]
 8005010:	6863      	ldr	r3, [r4, #4]
 8005012:	6123      	str	r3, [r4, #16]
 8005014:	2300      	movs	r3, #0
 8005016:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800501a:	e7aa      	b.n	8004f72 <_printf_i+0x146>
 800501c:	6923      	ldr	r3, [r4, #16]
 800501e:	4632      	mov	r2, r6
 8005020:	4649      	mov	r1, r9
 8005022:	4640      	mov	r0, r8
 8005024:	47d0      	blx	sl
 8005026:	3001      	adds	r0, #1
 8005028:	d0ad      	beq.n	8004f86 <_printf_i+0x15a>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	079b      	lsls	r3, r3, #30
 800502e:	d413      	bmi.n	8005058 <_printf_i+0x22c>
 8005030:	68e0      	ldr	r0, [r4, #12]
 8005032:	9b03      	ldr	r3, [sp, #12]
 8005034:	4298      	cmp	r0, r3
 8005036:	bfb8      	it	lt
 8005038:	4618      	movlt	r0, r3
 800503a:	e7a6      	b.n	8004f8a <_printf_i+0x15e>
 800503c:	2301      	movs	r3, #1
 800503e:	4632      	mov	r2, r6
 8005040:	4649      	mov	r1, r9
 8005042:	4640      	mov	r0, r8
 8005044:	47d0      	blx	sl
 8005046:	3001      	adds	r0, #1
 8005048:	d09d      	beq.n	8004f86 <_printf_i+0x15a>
 800504a:	3501      	adds	r5, #1
 800504c:	68e3      	ldr	r3, [r4, #12]
 800504e:	9903      	ldr	r1, [sp, #12]
 8005050:	1a5b      	subs	r3, r3, r1
 8005052:	42ab      	cmp	r3, r5
 8005054:	dcf2      	bgt.n	800503c <_printf_i+0x210>
 8005056:	e7eb      	b.n	8005030 <_printf_i+0x204>
 8005058:	2500      	movs	r5, #0
 800505a:	f104 0619 	add.w	r6, r4, #25
 800505e:	e7f5      	b.n	800504c <_printf_i+0x220>
 8005060:	08009032 	.word	0x08009032
 8005064:	08009043 	.word	0x08009043

08005068 <_scanf_float>:
 8005068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506c:	b087      	sub	sp, #28
 800506e:	4691      	mov	r9, r2
 8005070:	9303      	str	r3, [sp, #12]
 8005072:	688b      	ldr	r3, [r1, #8]
 8005074:	1e5a      	subs	r2, r3, #1
 8005076:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800507a:	bf81      	itttt	hi
 800507c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005080:	eb03 0b05 	addhi.w	fp, r3, r5
 8005084:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005088:	608b      	strhi	r3, [r1, #8]
 800508a:	680b      	ldr	r3, [r1, #0]
 800508c:	460a      	mov	r2, r1
 800508e:	f04f 0500 	mov.w	r5, #0
 8005092:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005096:	f842 3b1c 	str.w	r3, [r2], #28
 800509a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800509e:	4680      	mov	r8, r0
 80050a0:	460c      	mov	r4, r1
 80050a2:	bf98      	it	ls
 80050a4:	f04f 0b00 	movls.w	fp, #0
 80050a8:	9201      	str	r2, [sp, #4]
 80050aa:	4616      	mov	r6, r2
 80050ac:	46aa      	mov	sl, r5
 80050ae:	462f      	mov	r7, r5
 80050b0:	9502      	str	r5, [sp, #8]
 80050b2:	68a2      	ldr	r2, [r4, #8]
 80050b4:	b15a      	cbz	r2, 80050ce <_scanf_float+0x66>
 80050b6:	f8d9 3000 	ldr.w	r3, [r9]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b4e      	cmp	r3, #78	@ 0x4e
 80050be:	d863      	bhi.n	8005188 <_scanf_float+0x120>
 80050c0:	2b40      	cmp	r3, #64	@ 0x40
 80050c2:	d83b      	bhi.n	800513c <_scanf_float+0xd4>
 80050c4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80050c8:	b2c8      	uxtb	r0, r1
 80050ca:	280e      	cmp	r0, #14
 80050cc:	d939      	bls.n	8005142 <_scanf_float+0xda>
 80050ce:	b11f      	cbz	r7, 80050d8 <_scanf_float+0x70>
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050d6:	6023      	str	r3, [r4, #0]
 80050d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050dc:	f1ba 0f01 	cmp.w	sl, #1
 80050e0:	f200 8114 	bhi.w	800530c <_scanf_float+0x2a4>
 80050e4:	9b01      	ldr	r3, [sp, #4]
 80050e6:	429e      	cmp	r6, r3
 80050e8:	f200 8105 	bhi.w	80052f6 <_scanf_float+0x28e>
 80050ec:	2001      	movs	r0, #1
 80050ee:	b007      	add	sp, #28
 80050f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80050f8:	2a0d      	cmp	r2, #13
 80050fa:	d8e8      	bhi.n	80050ce <_scanf_float+0x66>
 80050fc:	a101      	add	r1, pc, #4	@ (adr r1, 8005104 <_scanf_float+0x9c>)
 80050fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005102:	bf00      	nop
 8005104:	0800524d 	.word	0x0800524d
 8005108:	080050cf 	.word	0x080050cf
 800510c:	080050cf 	.word	0x080050cf
 8005110:	080050cf 	.word	0x080050cf
 8005114:	080052a9 	.word	0x080052a9
 8005118:	08005283 	.word	0x08005283
 800511c:	080050cf 	.word	0x080050cf
 8005120:	080050cf 	.word	0x080050cf
 8005124:	0800525b 	.word	0x0800525b
 8005128:	080050cf 	.word	0x080050cf
 800512c:	080050cf 	.word	0x080050cf
 8005130:	080050cf 	.word	0x080050cf
 8005134:	080050cf 	.word	0x080050cf
 8005138:	08005217 	.word	0x08005217
 800513c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005140:	e7da      	b.n	80050f8 <_scanf_float+0x90>
 8005142:	290e      	cmp	r1, #14
 8005144:	d8c3      	bhi.n	80050ce <_scanf_float+0x66>
 8005146:	a001      	add	r0, pc, #4	@ (adr r0, 800514c <_scanf_float+0xe4>)
 8005148:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800514c:	08005207 	.word	0x08005207
 8005150:	080050cf 	.word	0x080050cf
 8005154:	08005207 	.word	0x08005207
 8005158:	08005297 	.word	0x08005297
 800515c:	080050cf 	.word	0x080050cf
 8005160:	080051a9 	.word	0x080051a9
 8005164:	080051ed 	.word	0x080051ed
 8005168:	080051ed 	.word	0x080051ed
 800516c:	080051ed 	.word	0x080051ed
 8005170:	080051ed 	.word	0x080051ed
 8005174:	080051ed 	.word	0x080051ed
 8005178:	080051ed 	.word	0x080051ed
 800517c:	080051ed 	.word	0x080051ed
 8005180:	080051ed 	.word	0x080051ed
 8005184:	080051ed 	.word	0x080051ed
 8005188:	2b6e      	cmp	r3, #110	@ 0x6e
 800518a:	d809      	bhi.n	80051a0 <_scanf_float+0x138>
 800518c:	2b60      	cmp	r3, #96	@ 0x60
 800518e:	d8b1      	bhi.n	80050f4 <_scanf_float+0x8c>
 8005190:	2b54      	cmp	r3, #84	@ 0x54
 8005192:	d07b      	beq.n	800528c <_scanf_float+0x224>
 8005194:	2b59      	cmp	r3, #89	@ 0x59
 8005196:	d19a      	bne.n	80050ce <_scanf_float+0x66>
 8005198:	2d07      	cmp	r5, #7
 800519a:	d198      	bne.n	80050ce <_scanf_float+0x66>
 800519c:	2508      	movs	r5, #8
 800519e:	e02f      	b.n	8005200 <_scanf_float+0x198>
 80051a0:	2b74      	cmp	r3, #116	@ 0x74
 80051a2:	d073      	beq.n	800528c <_scanf_float+0x224>
 80051a4:	2b79      	cmp	r3, #121	@ 0x79
 80051a6:	e7f6      	b.n	8005196 <_scanf_float+0x12e>
 80051a8:	6821      	ldr	r1, [r4, #0]
 80051aa:	05c8      	lsls	r0, r1, #23
 80051ac:	d51e      	bpl.n	80051ec <_scanf_float+0x184>
 80051ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80051b2:	6021      	str	r1, [r4, #0]
 80051b4:	3701      	adds	r7, #1
 80051b6:	f1bb 0f00 	cmp.w	fp, #0
 80051ba:	d003      	beq.n	80051c4 <_scanf_float+0x15c>
 80051bc:	3201      	adds	r2, #1
 80051be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80051c2:	60a2      	str	r2, [r4, #8]
 80051c4:	68a3      	ldr	r3, [r4, #8]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	60a3      	str	r3, [r4, #8]
 80051ca:	6923      	ldr	r3, [r4, #16]
 80051cc:	3301      	adds	r3, #1
 80051ce:	6123      	str	r3, [r4, #16]
 80051d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f8c9 3004 	str.w	r3, [r9, #4]
 80051dc:	f340 8082 	ble.w	80052e4 <_scanf_float+0x27c>
 80051e0:	f8d9 3000 	ldr.w	r3, [r9]
 80051e4:	3301      	adds	r3, #1
 80051e6:	f8c9 3000 	str.w	r3, [r9]
 80051ea:	e762      	b.n	80050b2 <_scanf_float+0x4a>
 80051ec:	eb1a 0105 	adds.w	r1, sl, r5
 80051f0:	f47f af6d 	bne.w	80050ce <_scanf_float+0x66>
 80051f4:	6822      	ldr	r2, [r4, #0]
 80051f6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80051fa:	6022      	str	r2, [r4, #0]
 80051fc:	460d      	mov	r5, r1
 80051fe:	468a      	mov	sl, r1
 8005200:	f806 3b01 	strb.w	r3, [r6], #1
 8005204:	e7de      	b.n	80051c4 <_scanf_float+0x15c>
 8005206:	6822      	ldr	r2, [r4, #0]
 8005208:	0610      	lsls	r0, r2, #24
 800520a:	f57f af60 	bpl.w	80050ce <_scanf_float+0x66>
 800520e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005212:	6022      	str	r2, [r4, #0]
 8005214:	e7f4      	b.n	8005200 <_scanf_float+0x198>
 8005216:	f1ba 0f00 	cmp.w	sl, #0
 800521a:	d10c      	bne.n	8005236 <_scanf_float+0x1ce>
 800521c:	b977      	cbnz	r7, 800523c <_scanf_float+0x1d4>
 800521e:	6822      	ldr	r2, [r4, #0]
 8005220:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005224:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005228:	d108      	bne.n	800523c <_scanf_float+0x1d4>
 800522a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800522e:	6022      	str	r2, [r4, #0]
 8005230:	f04f 0a01 	mov.w	sl, #1
 8005234:	e7e4      	b.n	8005200 <_scanf_float+0x198>
 8005236:	f1ba 0f02 	cmp.w	sl, #2
 800523a:	d050      	beq.n	80052de <_scanf_float+0x276>
 800523c:	2d01      	cmp	r5, #1
 800523e:	d002      	beq.n	8005246 <_scanf_float+0x1de>
 8005240:	2d04      	cmp	r5, #4
 8005242:	f47f af44 	bne.w	80050ce <_scanf_float+0x66>
 8005246:	3501      	adds	r5, #1
 8005248:	b2ed      	uxtb	r5, r5
 800524a:	e7d9      	b.n	8005200 <_scanf_float+0x198>
 800524c:	f1ba 0f01 	cmp.w	sl, #1
 8005250:	f47f af3d 	bne.w	80050ce <_scanf_float+0x66>
 8005254:	f04f 0a02 	mov.w	sl, #2
 8005258:	e7d2      	b.n	8005200 <_scanf_float+0x198>
 800525a:	b975      	cbnz	r5, 800527a <_scanf_float+0x212>
 800525c:	2f00      	cmp	r7, #0
 800525e:	f47f af37 	bne.w	80050d0 <_scanf_float+0x68>
 8005262:	6822      	ldr	r2, [r4, #0]
 8005264:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005268:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800526c:	f040 80fe 	bne.w	800546c <_scanf_float+0x404>
 8005270:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005274:	6022      	str	r2, [r4, #0]
 8005276:	2501      	movs	r5, #1
 8005278:	e7c2      	b.n	8005200 <_scanf_float+0x198>
 800527a:	2d03      	cmp	r5, #3
 800527c:	d0e3      	beq.n	8005246 <_scanf_float+0x1de>
 800527e:	2d05      	cmp	r5, #5
 8005280:	e7df      	b.n	8005242 <_scanf_float+0x1da>
 8005282:	2d02      	cmp	r5, #2
 8005284:	f47f af23 	bne.w	80050ce <_scanf_float+0x66>
 8005288:	2503      	movs	r5, #3
 800528a:	e7b9      	b.n	8005200 <_scanf_float+0x198>
 800528c:	2d06      	cmp	r5, #6
 800528e:	f47f af1e 	bne.w	80050ce <_scanf_float+0x66>
 8005292:	2507      	movs	r5, #7
 8005294:	e7b4      	b.n	8005200 <_scanf_float+0x198>
 8005296:	6822      	ldr	r2, [r4, #0]
 8005298:	0591      	lsls	r1, r2, #22
 800529a:	f57f af18 	bpl.w	80050ce <_scanf_float+0x66>
 800529e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80052a2:	6022      	str	r2, [r4, #0]
 80052a4:	9702      	str	r7, [sp, #8]
 80052a6:	e7ab      	b.n	8005200 <_scanf_float+0x198>
 80052a8:	6822      	ldr	r2, [r4, #0]
 80052aa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80052ae:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80052b2:	d005      	beq.n	80052c0 <_scanf_float+0x258>
 80052b4:	0550      	lsls	r0, r2, #21
 80052b6:	f57f af0a 	bpl.w	80050ce <_scanf_float+0x66>
 80052ba:	2f00      	cmp	r7, #0
 80052bc:	f000 80d6 	beq.w	800546c <_scanf_float+0x404>
 80052c0:	0591      	lsls	r1, r2, #22
 80052c2:	bf58      	it	pl
 80052c4:	9902      	ldrpl	r1, [sp, #8]
 80052c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80052ca:	bf58      	it	pl
 80052cc:	1a79      	subpl	r1, r7, r1
 80052ce:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80052d2:	bf58      	it	pl
 80052d4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80052d8:	6022      	str	r2, [r4, #0]
 80052da:	2700      	movs	r7, #0
 80052dc:	e790      	b.n	8005200 <_scanf_float+0x198>
 80052de:	f04f 0a03 	mov.w	sl, #3
 80052e2:	e78d      	b.n	8005200 <_scanf_float+0x198>
 80052e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80052e8:	4649      	mov	r1, r9
 80052ea:	4640      	mov	r0, r8
 80052ec:	4798      	blx	r3
 80052ee:	2800      	cmp	r0, #0
 80052f0:	f43f aedf 	beq.w	80050b2 <_scanf_float+0x4a>
 80052f4:	e6eb      	b.n	80050ce <_scanf_float+0x66>
 80052f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052fe:	464a      	mov	r2, r9
 8005300:	4640      	mov	r0, r8
 8005302:	4798      	blx	r3
 8005304:	6923      	ldr	r3, [r4, #16]
 8005306:	3b01      	subs	r3, #1
 8005308:	6123      	str	r3, [r4, #16]
 800530a:	e6eb      	b.n	80050e4 <_scanf_float+0x7c>
 800530c:	1e6b      	subs	r3, r5, #1
 800530e:	2b06      	cmp	r3, #6
 8005310:	d824      	bhi.n	800535c <_scanf_float+0x2f4>
 8005312:	2d02      	cmp	r5, #2
 8005314:	d836      	bhi.n	8005384 <_scanf_float+0x31c>
 8005316:	9b01      	ldr	r3, [sp, #4]
 8005318:	429e      	cmp	r6, r3
 800531a:	f67f aee7 	bls.w	80050ec <_scanf_float+0x84>
 800531e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005322:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005326:	464a      	mov	r2, r9
 8005328:	4640      	mov	r0, r8
 800532a:	4798      	blx	r3
 800532c:	6923      	ldr	r3, [r4, #16]
 800532e:	3b01      	subs	r3, #1
 8005330:	6123      	str	r3, [r4, #16]
 8005332:	e7f0      	b.n	8005316 <_scanf_float+0x2ae>
 8005334:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005338:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800533c:	464a      	mov	r2, r9
 800533e:	4640      	mov	r0, r8
 8005340:	4798      	blx	r3
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	3b01      	subs	r3, #1
 8005346:	6123      	str	r3, [r4, #16]
 8005348:	f10a 3aff 	add.w	sl, sl, #4294967295
 800534c:	fa5f fa8a 	uxtb.w	sl, sl
 8005350:	f1ba 0f02 	cmp.w	sl, #2
 8005354:	d1ee      	bne.n	8005334 <_scanf_float+0x2cc>
 8005356:	3d03      	subs	r5, #3
 8005358:	b2ed      	uxtb	r5, r5
 800535a:	1b76      	subs	r6, r6, r5
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	05da      	lsls	r2, r3, #23
 8005360:	d530      	bpl.n	80053c4 <_scanf_float+0x35c>
 8005362:	055b      	lsls	r3, r3, #21
 8005364:	d511      	bpl.n	800538a <_scanf_float+0x322>
 8005366:	9b01      	ldr	r3, [sp, #4]
 8005368:	429e      	cmp	r6, r3
 800536a:	f67f aebf 	bls.w	80050ec <_scanf_float+0x84>
 800536e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005372:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005376:	464a      	mov	r2, r9
 8005378:	4640      	mov	r0, r8
 800537a:	4798      	blx	r3
 800537c:	6923      	ldr	r3, [r4, #16]
 800537e:	3b01      	subs	r3, #1
 8005380:	6123      	str	r3, [r4, #16]
 8005382:	e7f0      	b.n	8005366 <_scanf_float+0x2fe>
 8005384:	46aa      	mov	sl, r5
 8005386:	46b3      	mov	fp, r6
 8005388:	e7de      	b.n	8005348 <_scanf_float+0x2e0>
 800538a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	2965      	cmp	r1, #101	@ 0x65
 8005392:	f103 33ff 	add.w	r3, r3, #4294967295
 8005396:	f106 35ff 	add.w	r5, r6, #4294967295
 800539a:	6123      	str	r3, [r4, #16]
 800539c:	d00c      	beq.n	80053b8 <_scanf_float+0x350>
 800539e:	2945      	cmp	r1, #69	@ 0x45
 80053a0:	d00a      	beq.n	80053b8 <_scanf_float+0x350>
 80053a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80053a6:	464a      	mov	r2, r9
 80053a8:	4640      	mov	r0, r8
 80053aa:	4798      	blx	r3
 80053ac:	6923      	ldr	r3, [r4, #16]
 80053ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	1eb5      	subs	r5, r6, #2
 80053b6:	6123      	str	r3, [r4, #16]
 80053b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80053bc:	464a      	mov	r2, r9
 80053be:	4640      	mov	r0, r8
 80053c0:	4798      	blx	r3
 80053c2:	462e      	mov	r6, r5
 80053c4:	6822      	ldr	r2, [r4, #0]
 80053c6:	f012 0210 	ands.w	r2, r2, #16
 80053ca:	d001      	beq.n	80053d0 <_scanf_float+0x368>
 80053cc:	2000      	movs	r0, #0
 80053ce:	e68e      	b.n	80050ee <_scanf_float+0x86>
 80053d0:	7032      	strb	r2, [r6, #0]
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053dc:	d125      	bne.n	800542a <_scanf_float+0x3c2>
 80053de:	9b02      	ldr	r3, [sp, #8]
 80053e0:	429f      	cmp	r7, r3
 80053e2:	d00a      	beq.n	80053fa <_scanf_float+0x392>
 80053e4:	1bda      	subs	r2, r3, r7
 80053e6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80053ea:	429e      	cmp	r6, r3
 80053ec:	bf28      	it	cs
 80053ee:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80053f2:	491f      	ldr	r1, [pc, #124]	@ (8005470 <_scanf_float+0x408>)
 80053f4:	4630      	mov	r0, r6
 80053f6:	f000 f937 	bl	8005668 <siprintf>
 80053fa:	2200      	movs	r2, #0
 80053fc:	9901      	ldr	r1, [sp, #4]
 80053fe:	4640      	mov	r0, r8
 8005400:	f002 fc12 	bl	8007c28 <_strtod_r>
 8005404:	9b03      	ldr	r3, [sp, #12]
 8005406:	6825      	ldr	r5, [r4, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f015 0f02 	tst.w	r5, #2
 800540e:	4606      	mov	r6, r0
 8005410:	460f      	mov	r7, r1
 8005412:	f103 0204 	add.w	r2, r3, #4
 8005416:	d015      	beq.n	8005444 <_scanf_float+0x3dc>
 8005418:	9903      	ldr	r1, [sp, #12]
 800541a:	600a      	str	r2, [r1, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	e9c3 6700 	strd	r6, r7, [r3]
 8005422:	68e3      	ldr	r3, [r4, #12]
 8005424:	3301      	adds	r3, #1
 8005426:	60e3      	str	r3, [r4, #12]
 8005428:	e7d0      	b.n	80053cc <_scanf_float+0x364>
 800542a:	9b04      	ldr	r3, [sp, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0e4      	beq.n	80053fa <_scanf_float+0x392>
 8005430:	9905      	ldr	r1, [sp, #20]
 8005432:	230a      	movs	r3, #10
 8005434:	3101      	adds	r1, #1
 8005436:	4640      	mov	r0, r8
 8005438:	f002 fc76 	bl	8007d28 <_strtol_r>
 800543c:	9b04      	ldr	r3, [sp, #16]
 800543e:	9e05      	ldr	r6, [sp, #20]
 8005440:	1ac2      	subs	r2, r0, r3
 8005442:	e7d0      	b.n	80053e6 <_scanf_float+0x37e>
 8005444:	076d      	lsls	r5, r5, #29
 8005446:	d4e7      	bmi.n	8005418 <_scanf_float+0x3b0>
 8005448:	9d03      	ldr	r5, [sp, #12]
 800544a:	602a      	str	r2, [r5, #0]
 800544c:	681d      	ldr	r5, [r3, #0]
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	f7fb fb8b 	bl	8000b6c <__aeabi_dcmpun>
 8005456:	b120      	cbz	r0, 8005462 <_scanf_float+0x3fa>
 8005458:	4806      	ldr	r0, [pc, #24]	@ (8005474 <_scanf_float+0x40c>)
 800545a:	f000 f9eb 	bl	8005834 <nanf>
 800545e:	6028      	str	r0, [r5, #0]
 8005460:	e7df      	b.n	8005422 <_scanf_float+0x3ba>
 8005462:	4630      	mov	r0, r6
 8005464:	4639      	mov	r1, r7
 8005466:	f7fb fbdf 	bl	8000c28 <__aeabi_d2f>
 800546a:	e7f8      	b.n	800545e <_scanf_float+0x3f6>
 800546c:	2700      	movs	r7, #0
 800546e:	e633      	b.n	80050d8 <_scanf_float+0x70>
 8005470:	08009054 	.word	0x08009054
 8005474:	08009195 	.word	0x08009195

08005478 <std>:
 8005478:	2300      	movs	r3, #0
 800547a:	b510      	push	{r4, lr}
 800547c:	4604      	mov	r4, r0
 800547e:	e9c0 3300 	strd	r3, r3, [r0]
 8005482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005486:	6083      	str	r3, [r0, #8]
 8005488:	8181      	strh	r1, [r0, #12]
 800548a:	6643      	str	r3, [r0, #100]	@ 0x64
 800548c:	81c2      	strh	r2, [r0, #14]
 800548e:	6183      	str	r3, [r0, #24]
 8005490:	4619      	mov	r1, r3
 8005492:	2208      	movs	r2, #8
 8005494:	305c      	adds	r0, #92	@ 0x5c
 8005496:	f000 f94c 	bl	8005732 <memset>
 800549a:	4b0d      	ldr	r3, [pc, #52]	@ (80054d0 <std+0x58>)
 800549c:	6263      	str	r3, [r4, #36]	@ 0x24
 800549e:	4b0d      	ldr	r3, [pc, #52]	@ (80054d4 <std+0x5c>)
 80054a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80054a2:	4b0d      	ldr	r3, [pc, #52]	@ (80054d8 <std+0x60>)
 80054a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054a6:	4b0d      	ldr	r3, [pc, #52]	@ (80054dc <std+0x64>)
 80054a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80054aa:	4b0d      	ldr	r3, [pc, #52]	@ (80054e0 <std+0x68>)
 80054ac:	6224      	str	r4, [r4, #32]
 80054ae:	429c      	cmp	r4, r3
 80054b0:	d006      	beq.n	80054c0 <std+0x48>
 80054b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054b6:	4294      	cmp	r4, r2
 80054b8:	d002      	beq.n	80054c0 <std+0x48>
 80054ba:	33d0      	adds	r3, #208	@ 0xd0
 80054bc:	429c      	cmp	r4, r3
 80054be:	d105      	bne.n	80054cc <std+0x54>
 80054c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80054c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054c8:	f000 b9b0 	b.w	800582c <__retarget_lock_init_recursive>
 80054cc:	bd10      	pop	{r4, pc}
 80054ce:	bf00      	nop
 80054d0:	080056ad 	.word	0x080056ad
 80054d4:	080056cf 	.word	0x080056cf
 80054d8:	08005707 	.word	0x08005707
 80054dc:	0800572b 	.word	0x0800572b
 80054e0:	20000324 	.word	0x20000324

080054e4 <stdio_exit_handler>:
 80054e4:	4a02      	ldr	r2, [pc, #8]	@ (80054f0 <stdio_exit_handler+0xc>)
 80054e6:	4903      	ldr	r1, [pc, #12]	@ (80054f4 <stdio_exit_handler+0x10>)
 80054e8:	4803      	ldr	r0, [pc, #12]	@ (80054f8 <stdio_exit_handler+0x14>)
 80054ea:	f000 b869 	b.w	80055c0 <_fwalk_sglue>
 80054ee:	bf00      	nop
 80054f0:	2000000c 	.word	0x2000000c
 80054f4:	080080e5 	.word	0x080080e5
 80054f8:	2000001c 	.word	0x2000001c

080054fc <cleanup_stdio>:
 80054fc:	6841      	ldr	r1, [r0, #4]
 80054fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005530 <cleanup_stdio+0x34>)
 8005500:	4299      	cmp	r1, r3
 8005502:	b510      	push	{r4, lr}
 8005504:	4604      	mov	r4, r0
 8005506:	d001      	beq.n	800550c <cleanup_stdio+0x10>
 8005508:	f002 fdec 	bl	80080e4 <_fflush_r>
 800550c:	68a1      	ldr	r1, [r4, #8]
 800550e:	4b09      	ldr	r3, [pc, #36]	@ (8005534 <cleanup_stdio+0x38>)
 8005510:	4299      	cmp	r1, r3
 8005512:	d002      	beq.n	800551a <cleanup_stdio+0x1e>
 8005514:	4620      	mov	r0, r4
 8005516:	f002 fde5 	bl	80080e4 <_fflush_r>
 800551a:	68e1      	ldr	r1, [r4, #12]
 800551c:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <cleanup_stdio+0x3c>)
 800551e:	4299      	cmp	r1, r3
 8005520:	d004      	beq.n	800552c <cleanup_stdio+0x30>
 8005522:	4620      	mov	r0, r4
 8005524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005528:	f002 bddc 	b.w	80080e4 <_fflush_r>
 800552c:	bd10      	pop	{r4, pc}
 800552e:	bf00      	nop
 8005530:	20000324 	.word	0x20000324
 8005534:	2000038c 	.word	0x2000038c
 8005538:	200003f4 	.word	0x200003f4

0800553c <global_stdio_init.part.0>:
 800553c:	b510      	push	{r4, lr}
 800553e:	4b0b      	ldr	r3, [pc, #44]	@ (800556c <global_stdio_init.part.0+0x30>)
 8005540:	4c0b      	ldr	r4, [pc, #44]	@ (8005570 <global_stdio_init.part.0+0x34>)
 8005542:	4a0c      	ldr	r2, [pc, #48]	@ (8005574 <global_stdio_init.part.0+0x38>)
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	4620      	mov	r0, r4
 8005548:	2200      	movs	r2, #0
 800554a:	2104      	movs	r1, #4
 800554c:	f7ff ff94 	bl	8005478 <std>
 8005550:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005554:	2201      	movs	r2, #1
 8005556:	2109      	movs	r1, #9
 8005558:	f7ff ff8e 	bl	8005478 <std>
 800555c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005560:	2202      	movs	r2, #2
 8005562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005566:	2112      	movs	r1, #18
 8005568:	f7ff bf86 	b.w	8005478 <std>
 800556c:	2000045c 	.word	0x2000045c
 8005570:	20000324 	.word	0x20000324
 8005574:	080054e5 	.word	0x080054e5

08005578 <__sfp_lock_acquire>:
 8005578:	4801      	ldr	r0, [pc, #4]	@ (8005580 <__sfp_lock_acquire+0x8>)
 800557a:	f000 b958 	b.w	800582e <__retarget_lock_acquire_recursive>
 800557e:	bf00      	nop
 8005580:	20000465 	.word	0x20000465

08005584 <__sfp_lock_release>:
 8005584:	4801      	ldr	r0, [pc, #4]	@ (800558c <__sfp_lock_release+0x8>)
 8005586:	f000 b953 	b.w	8005830 <__retarget_lock_release_recursive>
 800558a:	bf00      	nop
 800558c:	20000465 	.word	0x20000465

08005590 <__sinit>:
 8005590:	b510      	push	{r4, lr}
 8005592:	4604      	mov	r4, r0
 8005594:	f7ff fff0 	bl	8005578 <__sfp_lock_acquire>
 8005598:	6a23      	ldr	r3, [r4, #32]
 800559a:	b11b      	cbz	r3, 80055a4 <__sinit+0x14>
 800559c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a0:	f7ff bff0 	b.w	8005584 <__sfp_lock_release>
 80055a4:	4b04      	ldr	r3, [pc, #16]	@ (80055b8 <__sinit+0x28>)
 80055a6:	6223      	str	r3, [r4, #32]
 80055a8:	4b04      	ldr	r3, [pc, #16]	@ (80055bc <__sinit+0x2c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1f5      	bne.n	800559c <__sinit+0xc>
 80055b0:	f7ff ffc4 	bl	800553c <global_stdio_init.part.0>
 80055b4:	e7f2      	b.n	800559c <__sinit+0xc>
 80055b6:	bf00      	nop
 80055b8:	080054fd 	.word	0x080054fd
 80055bc:	2000045c 	.word	0x2000045c

080055c0 <_fwalk_sglue>:
 80055c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055c4:	4607      	mov	r7, r0
 80055c6:	4688      	mov	r8, r1
 80055c8:	4614      	mov	r4, r2
 80055ca:	2600      	movs	r6, #0
 80055cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055d0:	f1b9 0901 	subs.w	r9, r9, #1
 80055d4:	d505      	bpl.n	80055e2 <_fwalk_sglue+0x22>
 80055d6:	6824      	ldr	r4, [r4, #0]
 80055d8:	2c00      	cmp	r4, #0
 80055da:	d1f7      	bne.n	80055cc <_fwalk_sglue+0xc>
 80055dc:	4630      	mov	r0, r6
 80055de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055e2:	89ab      	ldrh	r3, [r5, #12]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d907      	bls.n	80055f8 <_fwalk_sglue+0x38>
 80055e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055ec:	3301      	adds	r3, #1
 80055ee:	d003      	beq.n	80055f8 <_fwalk_sglue+0x38>
 80055f0:	4629      	mov	r1, r5
 80055f2:	4638      	mov	r0, r7
 80055f4:	47c0      	blx	r8
 80055f6:	4306      	orrs	r6, r0
 80055f8:	3568      	adds	r5, #104	@ 0x68
 80055fa:	e7e9      	b.n	80055d0 <_fwalk_sglue+0x10>

080055fc <sniprintf>:
 80055fc:	b40c      	push	{r2, r3}
 80055fe:	b530      	push	{r4, r5, lr}
 8005600:	4b18      	ldr	r3, [pc, #96]	@ (8005664 <sniprintf+0x68>)
 8005602:	1e0c      	subs	r4, r1, #0
 8005604:	681d      	ldr	r5, [r3, #0]
 8005606:	b09d      	sub	sp, #116	@ 0x74
 8005608:	da08      	bge.n	800561c <sniprintf+0x20>
 800560a:	238b      	movs	r3, #139	@ 0x8b
 800560c:	602b      	str	r3, [r5, #0]
 800560e:	f04f 30ff 	mov.w	r0, #4294967295
 8005612:	b01d      	add	sp, #116	@ 0x74
 8005614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005618:	b002      	add	sp, #8
 800561a:	4770      	bx	lr
 800561c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005620:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	931b      	str	r3, [sp, #108]	@ 0x6c
 800562a:	bf14      	ite	ne
 800562c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005630:	4623      	moveq	r3, r4
 8005632:	9304      	str	r3, [sp, #16]
 8005634:	9307      	str	r3, [sp, #28]
 8005636:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800563a:	9002      	str	r0, [sp, #8]
 800563c:	9006      	str	r0, [sp, #24]
 800563e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005642:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005644:	ab21      	add	r3, sp, #132	@ 0x84
 8005646:	a902      	add	r1, sp, #8
 8005648:	4628      	mov	r0, r5
 800564a:	9301      	str	r3, [sp, #4]
 800564c:	f002 fbca 	bl	8007de4 <_svfiprintf_r>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	bfbc      	itt	lt
 8005654:	238b      	movlt	r3, #139	@ 0x8b
 8005656:	602b      	strlt	r3, [r5, #0]
 8005658:	2c00      	cmp	r4, #0
 800565a:	d0da      	beq.n	8005612 <sniprintf+0x16>
 800565c:	9b02      	ldr	r3, [sp, #8]
 800565e:	2200      	movs	r2, #0
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	e7d6      	b.n	8005612 <sniprintf+0x16>
 8005664:	20000018 	.word	0x20000018

08005668 <siprintf>:
 8005668:	b40e      	push	{r1, r2, r3}
 800566a:	b510      	push	{r4, lr}
 800566c:	b09d      	sub	sp, #116	@ 0x74
 800566e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005670:	9002      	str	r0, [sp, #8]
 8005672:	9006      	str	r0, [sp, #24]
 8005674:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005678:	480a      	ldr	r0, [pc, #40]	@ (80056a4 <siprintf+0x3c>)
 800567a:	9107      	str	r1, [sp, #28]
 800567c:	9104      	str	r1, [sp, #16]
 800567e:	490a      	ldr	r1, [pc, #40]	@ (80056a8 <siprintf+0x40>)
 8005680:	f853 2b04 	ldr.w	r2, [r3], #4
 8005684:	9105      	str	r1, [sp, #20]
 8005686:	2400      	movs	r4, #0
 8005688:	a902      	add	r1, sp, #8
 800568a:	6800      	ldr	r0, [r0, #0]
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005690:	f002 fba8 	bl	8007de4 <_svfiprintf_r>
 8005694:	9b02      	ldr	r3, [sp, #8]
 8005696:	701c      	strb	r4, [r3, #0]
 8005698:	b01d      	add	sp, #116	@ 0x74
 800569a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800569e:	b003      	add	sp, #12
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000018 	.word	0x20000018
 80056a8:	ffff0208 	.word	0xffff0208

080056ac <__sread>:
 80056ac:	b510      	push	{r4, lr}
 80056ae:	460c      	mov	r4, r1
 80056b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b4:	f000 f86c 	bl	8005790 <_read_r>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	bfab      	itete	ge
 80056bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80056be:	89a3      	ldrhlt	r3, [r4, #12]
 80056c0:	181b      	addge	r3, r3, r0
 80056c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80056c6:	bfac      	ite	ge
 80056c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056ca:	81a3      	strhlt	r3, [r4, #12]
 80056cc:	bd10      	pop	{r4, pc}

080056ce <__swrite>:
 80056ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d2:	461f      	mov	r7, r3
 80056d4:	898b      	ldrh	r3, [r1, #12]
 80056d6:	05db      	lsls	r3, r3, #23
 80056d8:	4605      	mov	r5, r0
 80056da:	460c      	mov	r4, r1
 80056dc:	4616      	mov	r6, r2
 80056de:	d505      	bpl.n	80056ec <__swrite+0x1e>
 80056e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e4:	2302      	movs	r3, #2
 80056e6:	2200      	movs	r2, #0
 80056e8:	f000 f840 	bl	800576c <_lseek_r>
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056f6:	81a3      	strh	r3, [r4, #12]
 80056f8:	4632      	mov	r2, r6
 80056fa:	463b      	mov	r3, r7
 80056fc:	4628      	mov	r0, r5
 80056fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005702:	f000 b857 	b.w	80057b4 <_write_r>

08005706 <__sseek>:
 8005706:	b510      	push	{r4, lr}
 8005708:	460c      	mov	r4, r1
 800570a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800570e:	f000 f82d 	bl	800576c <_lseek_r>
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	bf15      	itete	ne
 8005718:	6560      	strne	r0, [r4, #84]	@ 0x54
 800571a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800571e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005722:	81a3      	strheq	r3, [r4, #12]
 8005724:	bf18      	it	ne
 8005726:	81a3      	strhne	r3, [r4, #12]
 8005728:	bd10      	pop	{r4, pc}

0800572a <__sclose>:
 800572a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800572e:	f000 b80d 	b.w	800574c <_close_r>

08005732 <memset>:
 8005732:	4402      	add	r2, r0
 8005734:	4603      	mov	r3, r0
 8005736:	4293      	cmp	r3, r2
 8005738:	d100      	bne.n	800573c <memset+0xa>
 800573a:	4770      	bx	lr
 800573c:	f803 1b01 	strb.w	r1, [r3], #1
 8005740:	e7f9      	b.n	8005736 <memset+0x4>
	...

08005744 <_localeconv_r>:
 8005744:	4800      	ldr	r0, [pc, #0]	@ (8005748 <_localeconv_r+0x4>)
 8005746:	4770      	bx	lr
 8005748:	20000158 	.word	0x20000158

0800574c <_close_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	4d06      	ldr	r5, [pc, #24]	@ (8005768 <_close_r+0x1c>)
 8005750:	2300      	movs	r3, #0
 8005752:	4604      	mov	r4, r0
 8005754:	4608      	mov	r0, r1
 8005756:	602b      	str	r3, [r5, #0]
 8005758:	f7fc fc15 	bl	8001f86 <_close>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	d102      	bne.n	8005766 <_close_r+0x1a>
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	b103      	cbz	r3, 8005766 <_close_r+0x1a>
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	20000460 	.word	0x20000460

0800576c <_lseek_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4d07      	ldr	r5, [pc, #28]	@ (800578c <_lseek_r+0x20>)
 8005770:	4604      	mov	r4, r0
 8005772:	4608      	mov	r0, r1
 8005774:	4611      	mov	r1, r2
 8005776:	2200      	movs	r2, #0
 8005778:	602a      	str	r2, [r5, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	f7fc fc2a 	bl	8001fd4 <_lseek>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d102      	bne.n	800578a <_lseek_r+0x1e>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	b103      	cbz	r3, 800578a <_lseek_r+0x1e>
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	20000460 	.word	0x20000460

08005790 <_read_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4d07      	ldr	r5, [pc, #28]	@ (80057b0 <_read_r+0x20>)
 8005794:	4604      	mov	r4, r0
 8005796:	4608      	mov	r0, r1
 8005798:	4611      	mov	r1, r2
 800579a:	2200      	movs	r2, #0
 800579c:	602a      	str	r2, [r5, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	f7fc fbd4 	bl	8001f4c <_read>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	d102      	bne.n	80057ae <_read_r+0x1e>
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	b103      	cbz	r3, 80057ae <_read_r+0x1e>
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	bd38      	pop	{r3, r4, r5, pc}
 80057b0:	20000460 	.word	0x20000460

080057b4 <_write_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	4d07      	ldr	r5, [pc, #28]	@ (80057d4 <_write_r+0x20>)
 80057b8:	4604      	mov	r4, r0
 80057ba:	4608      	mov	r0, r1
 80057bc:	4611      	mov	r1, r2
 80057be:	2200      	movs	r2, #0
 80057c0:	602a      	str	r2, [r5, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	f7fb ff2a 	bl	800161c <_write>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	d102      	bne.n	80057d2 <_write_r+0x1e>
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	b103      	cbz	r3, 80057d2 <_write_r+0x1e>
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	bd38      	pop	{r3, r4, r5, pc}
 80057d4:	20000460 	.word	0x20000460

080057d8 <__errno>:
 80057d8:	4b01      	ldr	r3, [pc, #4]	@ (80057e0 <__errno+0x8>)
 80057da:	6818      	ldr	r0, [r3, #0]
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	20000018 	.word	0x20000018

080057e4 <__libc_init_array>:
 80057e4:	b570      	push	{r4, r5, r6, lr}
 80057e6:	4d0d      	ldr	r5, [pc, #52]	@ (800581c <__libc_init_array+0x38>)
 80057e8:	4c0d      	ldr	r4, [pc, #52]	@ (8005820 <__libc_init_array+0x3c>)
 80057ea:	1b64      	subs	r4, r4, r5
 80057ec:	10a4      	asrs	r4, r4, #2
 80057ee:	2600      	movs	r6, #0
 80057f0:	42a6      	cmp	r6, r4
 80057f2:	d109      	bne.n	8005808 <__libc_init_array+0x24>
 80057f4:	4d0b      	ldr	r5, [pc, #44]	@ (8005824 <__libc_init_array+0x40>)
 80057f6:	4c0c      	ldr	r4, [pc, #48]	@ (8005828 <__libc_init_array+0x44>)
 80057f8:	f003 fb62 	bl	8008ec0 <_init>
 80057fc:	1b64      	subs	r4, r4, r5
 80057fe:	10a4      	asrs	r4, r4, #2
 8005800:	2600      	movs	r6, #0
 8005802:	42a6      	cmp	r6, r4
 8005804:	d105      	bne.n	8005812 <__libc_init_array+0x2e>
 8005806:	bd70      	pop	{r4, r5, r6, pc}
 8005808:	f855 3b04 	ldr.w	r3, [r5], #4
 800580c:	4798      	blx	r3
 800580e:	3601      	adds	r6, #1
 8005810:	e7ee      	b.n	80057f0 <__libc_init_array+0xc>
 8005812:	f855 3b04 	ldr.w	r3, [r5], #4
 8005816:	4798      	blx	r3
 8005818:	3601      	adds	r6, #1
 800581a:	e7f2      	b.n	8005802 <__libc_init_array+0x1e>
 800581c:	08009454 	.word	0x08009454
 8005820:	08009454 	.word	0x08009454
 8005824:	08009454 	.word	0x08009454
 8005828:	08009458 	.word	0x08009458

0800582c <__retarget_lock_init_recursive>:
 800582c:	4770      	bx	lr

0800582e <__retarget_lock_acquire_recursive>:
 800582e:	4770      	bx	lr

08005830 <__retarget_lock_release_recursive>:
 8005830:	4770      	bx	lr
	...

08005834 <nanf>:
 8005834:	4800      	ldr	r0, [pc, #0]	@ (8005838 <nanf+0x4>)
 8005836:	4770      	bx	lr
 8005838:	7fc00000 	.word	0x7fc00000

0800583c <quorem>:
 800583c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005840:	6903      	ldr	r3, [r0, #16]
 8005842:	690c      	ldr	r4, [r1, #16]
 8005844:	42a3      	cmp	r3, r4
 8005846:	4607      	mov	r7, r0
 8005848:	db7e      	blt.n	8005948 <quorem+0x10c>
 800584a:	3c01      	subs	r4, #1
 800584c:	f101 0814 	add.w	r8, r1, #20
 8005850:	00a3      	lsls	r3, r4, #2
 8005852:	f100 0514 	add.w	r5, r0, #20
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800585c:	9301      	str	r3, [sp, #4]
 800585e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005862:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005866:	3301      	adds	r3, #1
 8005868:	429a      	cmp	r2, r3
 800586a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800586e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005872:	d32e      	bcc.n	80058d2 <quorem+0x96>
 8005874:	f04f 0a00 	mov.w	sl, #0
 8005878:	46c4      	mov	ip, r8
 800587a:	46ae      	mov	lr, r5
 800587c:	46d3      	mov	fp, sl
 800587e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005882:	b298      	uxth	r0, r3
 8005884:	fb06 a000 	mla	r0, r6, r0, sl
 8005888:	0c02      	lsrs	r2, r0, #16
 800588a:	0c1b      	lsrs	r3, r3, #16
 800588c:	fb06 2303 	mla	r3, r6, r3, r2
 8005890:	f8de 2000 	ldr.w	r2, [lr]
 8005894:	b280      	uxth	r0, r0
 8005896:	b292      	uxth	r2, r2
 8005898:	1a12      	subs	r2, r2, r0
 800589a:	445a      	add	r2, fp
 800589c:	f8de 0000 	ldr.w	r0, [lr]
 80058a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80058aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80058ae:	b292      	uxth	r2, r2
 80058b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80058b4:	45e1      	cmp	r9, ip
 80058b6:	f84e 2b04 	str.w	r2, [lr], #4
 80058ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80058be:	d2de      	bcs.n	800587e <quorem+0x42>
 80058c0:	9b00      	ldr	r3, [sp, #0]
 80058c2:	58eb      	ldr	r3, [r5, r3]
 80058c4:	b92b      	cbnz	r3, 80058d2 <quorem+0x96>
 80058c6:	9b01      	ldr	r3, [sp, #4]
 80058c8:	3b04      	subs	r3, #4
 80058ca:	429d      	cmp	r5, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	d32f      	bcc.n	8005930 <quorem+0xf4>
 80058d0:	613c      	str	r4, [r7, #16]
 80058d2:	4638      	mov	r0, r7
 80058d4:	f001 f9c8 	bl	8006c68 <__mcmp>
 80058d8:	2800      	cmp	r0, #0
 80058da:	db25      	blt.n	8005928 <quorem+0xec>
 80058dc:	4629      	mov	r1, r5
 80058de:	2000      	movs	r0, #0
 80058e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80058e4:	f8d1 c000 	ldr.w	ip, [r1]
 80058e8:	fa1f fe82 	uxth.w	lr, r2
 80058ec:	fa1f f38c 	uxth.w	r3, ip
 80058f0:	eba3 030e 	sub.w	r3, r3, lr
 80058f4:	4403      	add	r3, r0
 80058f6:	0c12      	lsrs	r2, r2, #16
 80058f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80058fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005900:	b29b      	uxth	r3, r3
 8005902:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005906:	45c1      	cmp	r9, r8
 8005908:	f841 3b04 	str.w	r3, [r1], #4
 800590c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005910:	d2e6      	bcs.n	80058e0 <quorem+0xa4>
 8005912:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005916:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800591a:	b922      	cbnz	r2, 8005926 <quorem+0xea>
 800591c:	3b04      	subs	r3, #4
 800591e:	429d      	cmp	r5, r3
 8005920:	461a      	mov	r2, r3
 8005922:	d30b      	bcc.n	800593c <quorem+0x100>
 8005924:	613c      	str	r4, [r7, #16]
 8005926:	3601      	adds	r6, #1
 8005928:	4630      	mov	r0, r6
 800592a:	b003      	add	sp, #12
 800592c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005930:	6812      	ldr	r2, [r2, #0]
 8005932:	3b04      	subs	r3, #4
 8005934:	2a00      	cmp	r2, #0
 8005936:	d1cb      	bne.n	80058d0 <quorem+0x94>
 8005938:	3c01      	subs	r4, #1
 800593a:	e7c6      	b.n	80058ca <quorem+0x8e>
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	3b04      	subs	r3, #4
 8005940:	2a00      	cmp	r2, #0
 8005942:	d1ef      	bne.n	8005924 <quorem+0xe8>
 8005944:	3c01      	subs	r4, #1
 8005946:	e7ea      	b.n	800591e <quorem+0xe2>
 8005948:	2000      	movs	r0, #0
 800594a:	e7ee      	b.n	800592a <quorem+0xee>
 800594c:	0000      	movs	r0, r0
	...

08005950 <_dtoa_r>:
 8005950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005954:	69c7      	ldr	r7, [r0, #28]
 8005956:	b097      	sub	sp, #92	@ 0x5c
 8005958:	4614      	mov	r4, r2
 800595a:	461d      	mov	r5, r3
 800595c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005960:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005962:	4681      	mov	r9, r0
 8005964:	b97f      	cbnz	r7, 8005986 <_dtoa_r+0x36>
 8005966:	2010      	movs	r0, #16
 8005968:	f000 fe0c 	bl	8006584 <malloc>
 800596c:	4602      	mov	r2, r0
 800596e:	f8c9 001c 	str.w	r0, [r9, #28]
 8005972:	b920      	cbnz	r0, 800597e <_dtoa_r+0x2e>
 8005974:	4baa      	ldr	r3, [pc, #680]	@ (8005c20 <_dtoa_r+0x2d0>)
 8005976:	21ef      	movs	r1, #239	@ 0xef
 8005978:	48aa      	ldr	r0, [pc, #680]	@ (8005c24 <_dtoa_r+0x2d4>)
 800597a:	f002 fc2b 	bl	80081d4 <__assert_func>
 800597e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005982:	6007      	str	r7, [r0, #0]
 8005984:	60c7      	str	r7, [r0, #12]
 8005986:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800598a:	6819      	ldr	r1, [r3, #0]
 800598c:	b159      	cbz	r1, 80059a6 <_dtoa_r+0x56>
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	604a      	str	r2, [r1, #4]
 8005992:	2301      	movs	r3, #1
 8005994:	4093      	lsls	r3, r2
 8005996:	608b      	str	r3, [r1, #8]
 8005998:	4648      	mov	r0, r9
 800599a:	f000 fee9 	bl	8006770 <_Bfree>
 800599e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	1e2b      	subs	r3, r5, #0
 80059a8:	bfb9      	ittee	lt
 80059aa:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80059ae:	9307      	strlt	r3, [sp, #28]
 80059b0:	2300      	movge	r3, #0
 80059b2:	6033      	strge	r3, [r6, #0]
 80059b4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80059b8:	4b9b      	ldr	r3, [pc, #620]	@ (8005c28 <_dtoa_r+0x2d8>)
 80059ba:	bfbc      	itt	lt
 80059bc:	2201      	movlt	r2, #1
 80059be:	6032      	strlt	r2, [r6, #0]
 80059c0:	ea33 0308 	bics.w	r3, r3, r8
 80059c4:	d112      	bne.n	80059ec <_dtoa_r+0x9c>
 80059c6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80059c8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80059d2:	4323      	orrs	r3, r4
 80059d4:	f000 855b 	beq.w	800648e <_dtoa_r+0xb3e>
 80059d8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80059da:	f8df a260 	ldr.w	sl, [pc, #608]	@ 8005c3c <_dtoa_r+0x2ec>
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 855d 	beq.w	800649e <_dtoa_r+0xb4e>
 80059e4:	f10a 0303 	add.w	r3, sl, #3
 80059e8:	f000 bd57 	b.w	800649a <_dtoa_r+0xb4a>
 80059ec:	ed9d 7b06 	vldr	d7, [sp, #24]
 80059f0:	2200      	movs	r2, #0
 80059f2:	ec51 0b17 	vmov	r0, r1, d7
 80059f6:	2300      	movs	r3, #0
 80059f8:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80059fc:	f7fb f884 	bl	8000b08 <__aeabi_dcmpeq>
 8005a00:	4607      	mov	r7, r0
 8005a02:	b158      	cbz	r0, 8005a1c <_dtoa_r+0xcc>
 8005a04:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005a06:	2301      	movs	r3, #1
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005a0c:	b113      	cbz	r3, 8005a14 <_dtoa_r+0xc4>
 8005a0e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005a10:	4b86      	ldr	r3, [pc, #536]	@ (8005c2c <_dtoa_r+0x2dc>)
 8005a12:	6013      	str	r3, [r2, #0]
 8005a14:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005c40 <_dtoa_r+0x2f0>
 8005a18:	f000 bd41 	b.w	800649e <_dtoa_r+0xb4e>
 8005a1c:	ab14      	add	r3, sp, #80	@ 0x50
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	ab15      	add	r3, sp, #84	@ 0x54
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	4648      	mov	r0, r9
 8005a26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005a2a:	f001 fa37 	bl	8006e9c <__d2b>
 8005a2e:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005a32:	9003      	str	r0, [sp, #12]
 8005a34:	2e00      	cmp	r6, #0
 8005a36:	d077      	beq.n	8005b28 <_dtoa_r+0x1d8>
 8005a38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a3a:	9712      	str	r7, [sp, #72]	@ 0x48
 8005a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005a48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005a4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005a50:	4619      	mov	r1, r3
 8005a52:	2200      	movs	r2, #0
 8005a54:	4b76      	ldr	r3, [pc, #472]	@ (8005c30 <_dtoa_r+0x2e0>)
 8005a56:	f7fa fc37 	bl	80002c8 <__aeabi_dsub>
 8005a5a:	a36b      	add	r3, pc, #428	@ (adr r3, 8005c08 <_dtoa_r+0x2b8>)
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	f7fa fdea 	bl	8000638 <__aeabi_dmul>
 8005a64:	a36a      	add	r3, pc, #424	@ (adr r3, 8005c10 <_dtoa_r+0x2c0>)
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	f7fa fc2f 	bl	80002cc <__adddf3>
 8005a6e:	4604      	mov	r4, r0
 8005a70:	4630      	mov	r0, r6
 8005a72:	460d      	mov	r5, r1
 8005a74:	f7fa fd76 	bl	8000564 <__aeabi_i2d>
 8005a78:	a367      	add	r3, pc, #412	@ (adr r3, 8005c18 <_dtoa_r+0x2c8>)
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	f7fa fddb 	bl	8000638 <__aeabi_dmul>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4620      	mov	r0, r4
 8005a88:	4629      	mov	r1, r5
 8005a8a:	f7fa fc1f 	bl	80002cc <__adddf3>
 8005a8e:	4604      	mov	r4, r0
 8005a90:	460d      	mov	r5, r1
 8005a92:	f7fb f881 	bl	8000b98 <__aeabi_d2iz>
 8005a96:	2200      	movs	r2, #0
 8005a98:	4607      	mov	r7, r0
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	f7fb f83c 	bl	8000b1c <__aeabi_dcmplt>
 8005aa4:	b140      	cbz	r0, 8005ab8 <_dtoa_r+0x168>
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	f7fa fd5c 	bl	8000564 <__aeabi_i2d>
 8005aac:	4622      	mov	r2, r4
 8005aae:	462b      	mov	r3, r5
 8005ab0:	f7fb f82a 	bl	8000b08 <__aeabi_dcmpeq>
 8005ab4:	b900      	cbnz	r0, 8005ab8 <_dtoa_r+0x168>
 8005ab6:	3f01      	subs	r7, #1
 8005ab8:	2f16      	cmp	r7, #22
 8005aba:	d853      	bhi.n	8005b64 <_dtoa_r+0x214>
 8005abc:	4b5d      	ldr	r3, [pc, #372]	@ (8005c34 <_dtoa_r+0x2e4>)
 8005abe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005aca:	f7fb f827 	bl	8000b1c <__aeabi_dcmplt>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d04a      	beq.n	8005b68 <_dtoa_r+0x218>
 8005ad2:	3f01      	subs	r7, #1
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005ad8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005ada:	1b9b      	subs	r3, r3, r6
 8005adc:	1e5a      	subs	r2, r3, #1
 8005ade:	bf45      	ittet	mi
 8005ae0:	f1c3 0301 	rsbmi	r3, r3, #1
 8005ae4:	9304      	strmi	r3, [sp, #16]
 8005ae6:	2300      	movpl	r3, #0
 8005ae8:	2300      	movmi	r3, #0
 8005aea:	9209      	str	r2, [sp, #36]	@ 0x24
 8005aec:	bf54      	ite	pl
 8005aee:	9304      	strpl	r3, [sp, #16]
 8005af0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005af2:	2f00      	cmp	r7, #0
 8005af4:	db3a      	blt.n	8005b6c <_dtoa_r+0x21c>
 8005af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005af8:	970e      	str	r7, [sp, #56]	@ 0x38
 8005afa:	443b      	add	r3, r7
 8005afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005afe:	2300      	movs	r3, #0
 8005b00:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b04:	2b09      	cmp	r3, #9
 8005b06:	d864      	bhi.n	8005bd2 <_dtoa_r+0x282>
 8005b08:	2b05      	cmp	r3, #5
 8005b0a:	bfc4      	itt	gt
 8005b0c:	3b04      	subgt	r3, #4
 8005b0e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005b10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b12:	f1a3 0302 	sub.w	r3, r3, #2
 8005b16:	bfcc      	ite	gt
 8005b18:	2400      	movgt	r4, #0
 8005b1a:	2401      	movle	r4, #1
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d864      	bhi.n	8005bea <_dtoa_r+0x29a>
 8005b20:	e8df f003 	tbb	[pc, r3]
 8005b24:	2c385553 	.word	0x2c385553
 8005b28:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005b2c:	441e      	add	r6, r3
 8005b2e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	bfc1      	itttt	gt
 8005b36:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005b3a:	fa08 f803 	lslgt.w	r8, r8, r3
 8005b3e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005b42:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005b46:	bfd6      	itet	le
 8005b48:	f1c3 0320 	rsble	r3, r3, #32
 8005b4c:	ea48 0003 	orrgt.w	r0, r8, r3
 8005b50:	fa04 f003 	lslle.w	r0, r4, r3
 8005b54:	f7fa fcf6 	bl	8000544 <__aeabi_ui2d>
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005b5e:	3e01      	subs	r6, #1
 8005b60:	9212      	str	r2, [sp, #72]	@ 0x48
 8005b62:	e775      	b.n	8005a50 <_dtoa_r+0x100>
 8005b64:	2301      	movs	r3, #1
 8005b66:	e7b6      	b.n	8005ad6 <_dtoa_r+0x186>
 8005b68:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005b6a:	e7b5      	b.n	8005ad8 <_dtoa_r+0x188>
 8005b6c:	9b04      	ldr	r3, [sp, #16]
 8005b6e:	1bdb      	subs	r3, r3, r7
 8005b70:	9304      	str	r3, [sp, #16]
 8005b72:	427b      	negs	r3, r7
 8005b74:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b76:	2300      	movs	r3, #0
 8005b78:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b7a:	e7c2      	b.n	8005b02 <_dtoa_r+0x1b2>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b82:	eb07 0b03 	add.w	fp, r7, r3
 8005b86:	f10b 0301 	add.w	r3, fp, #1
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	9308      	str	r3, [sp, #32]
 8005b8e:	bfb8      	it	lt
 8005b90:	2301      	movlt	r3, #1
 8005b92:	e006      	b.n	8005ba2 <_dtoa_r+0x252>
 8005b94:	2301      	movs	r3, #1
 8005b96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	dd28      	ble.n	8005bf0 <_dtoa_r+0x2a0>
 8005b9e:	469b      	mov	fp, r3
 8005ba0:	9308      	str	r3, [sp, #32]
 8005ba2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	2204      	movs	r2, #4
 8005baa:	f102 0514 	add.w	r5, r2, #20
 8005bae:	429d      	cmp	r5, r3
 8005bb0:	d926      	bls.n	8005c00 <_dtoa_r+0x2b0>
 8005bb2:	6041      	str	r1, [r0, #4]
 8005bb4:	4648      	mov	r0, r9
 8005bb6:	f000 fd9b 	bl	80066f0 <_Balloc>
 8005bba:	4682      	mov	sl, r0
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d141      	bne.n	8005c44 <_dtoa_r+0x2f4>
 8005bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8005c38 <_dtoa_r+0x2e8>)
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	f240 11af 	movw	r1, #431	@ 0x1af
 8005bc8:	e6d6      	b.n	8005978 <_dtoa_r+0x28>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	e7e3      	b.n	8005b96 <_dtoa_r+0x246>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	e7d5      	b.n	8005b7e <_dtoa_r+0x22e>
 8005bd2:	2401      	movs	r4, #1
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	9320      	str	r3, [sp, #128]	@ 0x80
 8005bd8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005bda:	f04f 3bff 	mov.w	fp, #4294967295
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8cd b020 	str.w	fp, [sp, #32]
 8005be4:	2312      	movs	r3, #18
 8005be6:	9221      	str	r2, [sp, #132]	@ 0x84
 8005be8:	e7db      	b.n	8005ba2 <_dtoa_r+0x252>
 8005bea:	2301      	movs	r3, #1
 8005bec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bee:	e7f4      	b.n	8005bda <_dtoa_r+0x28a>
 8005bf0:	f04f 0b01 	mov.w	fp, #1
 8005bf4:	f8cd b020 	str.w	fp, [sp, #32]
 8005bf8:	465b      	mov	r3, fp
 8005bfa:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005bfe:	e7d0      	b.n	8005ba2 <_dtoa_r+0x252>
 8005c00:	3101      	adds	r1, #1
 8005c02:	0052      	lsls	r2, r2, #1
 8005c04:	e7d1      	b.n	8005baa <_dtoa_r+0x25a>
 8005c06:	bf00      	nop
 8005c08:	636f4361 	.word	0x636f4361
 8005c0c:	3fd287a7 	.word	0x3fd287a7
 8005c10:	8b60c8b3 	.word	0x8b60c8b3
 8005c14:	3fc68a28 	.word	0x3fc68a28
 8005c18:	509f79fb 	.word	0x509f79fb
 8005c1c:	3fd34413 	.word	0x3fd34413
 8005c20:	08009066 	.word	0x08009066
 8005c24:	0800907d 	.word	0x0800907d
 8005c28:	7ff00000 	.word	0x7ff00000
 8005c2c:	08009031 	.word	0x08009031
 8005c30:	3ff80000 	.word	0x3ff80000
 8005c34:	08009230 	.word	0x08009230
 8005c38:	080090d5 	.word	0x080090d5
 8005c3c:	08009062 	.word	0x08009062
 8005c40:	08009030 	.word	0x08009030
 8005c44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005c48:	6018      	str	r0, [r3, #0]
 8005c4a:	9b08      	ldr	r3, [sp, #32]
 8005c4c:	2b0e      	cmp	r3, #14
 8005c4e:	f200 80a1 	bhi.w	8005d94 <_dtoa_r+0x444>
 8005c52:	2c00      	cmp	r4, #0
 8005c54:	f000 809e 	beq.w	8005d94 <_dtoa_r+0x444>
 8005c58:	2f00      	cmp	r7, #0
 8005c5a:	dd33      	ble.n	8005cc4 <_dtoa_r+0x374>
 8005c5c:	4b9c      	ldr	r3, [pc, #624]	@ (8005ed0 <_dtoa_r+0x580>)
 8005c5e:	f007 020f 	and.w	r2, r7, #15
 8005c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c66:	ed93 7b00 	vldr	d7, [r3]
 8005c6a:	05f8      	lsls	r0, r7, #23
 8005c6c:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8005c70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005c74:	d516      	bpl.n	8005ca4 <_dtoa_r+0x354>
 8005c76:	4b97      	ldr	r3, [pc, #604]	@ (8005ed4 <_dtoa_r+0x584>)
 8005c78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c80:	f7fa fe04 	bl	800088c <__aeabi_ddiv>
 8005c84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c88:	f004 040f 	and.w	r4, r4, #15
 8005c8c:	2603      	movs	r6, #3
 8005c8e:	4d91      	ldr	r5, [pc, #580]	@ (8005ed4 <_dtoa_r+0x584>)
 8005c90:	b954      	cbnz	r4, 8005ca8 <_dtoa_r+0x358>
 8005c92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c9a:	f7fa fdf7 	bl	800088c <__aeabi_ddiv>
 8005c9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005ca2:	e028      	b.n	8005cf6 <_dtoa_r+0x3a6>
 8005ca4:	2602      	movs	r6, #2
 8005ca6:	e7f2      	b.n	8005c8e <_dtoa_r+0x33e>
 8005ca8:	07e1      	lsls	r1, r4, #31
 8005caa:	d508      	bpl.n	8005cbe <_dtoa_r+0x36e>
 8005cac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005cb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005cb4:	f7fa fcc0 	bl	8000638 <__aeabi_dmul>
 8005cb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005cbc:	3601      	adds	r6, #1
 8005cbe:	1064      	asrs	r4, r4, #1
 8005cc0:	3508      	adds	r5, #8
 8005cc2:	e7e5      	b.n	8005c90 <_dtoa_r+0x340>
 8005cc4:	f000 80af 	beq.w	8005e26 <_dtoa_r+0x4d6>
 8005cc8:	427c      	negs	r4, r7
 8005cca:	4b81      	ldr	r3, [pc, #516]	@ (8005ed0 <_dtoa_r+0x580>)
 8005ccc:	4d81      	ldr	r5, [pc, #516]	@ (8005ed4 <_dtoa_r+0x584>)
 8005cce:	f004 020f 	and.w	r2, r4, #15
 8005cd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cde:	f7fa fcab 	bl	8000638 <__aeabi_dmul>
 8005ce2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005ce6:	1124      	asrs	r4, r4, #4
 8005ce8:	2300      	movs	r3, #0
 8005cea:	2602      	movs	r6, #2
 8005cec:	2c00      	cmp	r4, #0
 8005cee:	f040 808f 	bne.w	8005e10 <_dtoa_r+0x4c0>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1d3      	bne.n	8005c9e <_dtoa_r+0x34e>
 8005cf6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cf8:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8094 	beq.w	8005e2a <_dtoa_r+0x4da>
 8005d02:	4b75      	ldr	r3, [pc, #468]	@ (8005ed8 <_dtoa_r+0x588>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	4620      	mov	r0, r4
 8005d08:	4629      	mov	r1, r5
 8005d0a:	f7fa ff07 	bl	8000b1c <__aeabi_dcmplt>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	f000 808b 	beq.w	8005e2a <_dtoa_r+0x4da>
 8005d14:	9b08      	ldr	r3, [sp, #32]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 8087 	beq.w	8005e2a <_dtoa_r+0x4da>
 8005d1c:	f1bb 0f00 	cmp.w	fp, #0
 8005d20:	dd34      	ble.n	8005d8c <_dtoa_r+0x43c>
 8005d22:	4620      	mov	r0, r4
 8005d24:	4b6d      	ldr	r3, [pc, #436]	@ (8005edc <_dtoa_r+0x58c>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	4629      	mov	r1, r5
 8005d2a:	f7fa fc85 	bl	8000638 <__aeabi_dmul>
 8005d2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d32:	f107 38ff 	add.w	r8, r7, #4294967295
 8005d36:	3601      	adds	r6, #1
 8005d38:	465c      	mov	r4, fp
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f7fa fc12 	bl	8000564 <__aeabi_i2d>
 8005d40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d44:	f7fa fc78 	bl	8000638 <__aeabi_dmul>
 8005d48:	4b65      	ldr	r3, [pc, #404]	@ (8005ee0 <_dtoa_r+0x590>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f7fa fabe 	bl	80002cc <__adddf3>
 8005d50:	4605      	mov	r5, r0
 8005d52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005d56:	2c00      	cmp	r4, #0
 8005d58:	d16a      	bne.n	8005e30 <_dtoa_r+0x4e0>
 8005d5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d5e:	4b61      	ldr	r3, [pc, #388]	@ (8005ee4 <_dtoa_r+0x594>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	f7fa fab1 	bl	80002c8 <__aeabi_dsub>
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005d6e:	462a      	mov	r2, r5
 8005d70:	4633      	mov	r3, r6
 8005d72:	f7fa fef1 	bl	8000b58 <__aeabi_dcmpgt>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	f040 8298 	bne.w	80062ac <_dtoa_r+0x95c>
 8005d7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d80:	462a      	mov	r2, r5
 8005d82:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005d86:	f7fa fec9 	bl	8000b1c <__aeabi_dcmplt>
 8005d8a:	bb38      	cbnz	r0, 8005ddc <_dtoa_r+0x48c>
 8005d8c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005d90:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005d94:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f2c0 8157 	blt.w	800604a <_dtoa_r+0x6fa>
 8005d9c:	2f0e      	cmp	r7, #14
 8005d9e:	f300 8154 	bgt.w	800604a <_dtoa_r+0x6fa>
 8005da2:	4b4b      	ldr	r3, [pc, #300]	@ (8005ed0 <_dtoa_r+0x580>)
 8005da4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005da8:	ed93 7b00 	vldr	d7, [r3]
 8005dac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005db4:	f280 80e5 	bge.w	8005f82 <_dtoa_r+0x632>
 8005db8:	9b08      	ldr	r3, [sp, #32]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f300 80e1 	bgt.w	8005f82 <_dtoa_r+0x632>
 8005dc0:	d10c      	bne.n	8005ddc <_dtoa_r+0x48c>
 8005dc2:	4b48      	ldr	r3, [pc, #288]	@ (8005ee4 <_dtoa_r+0x594>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	ec51 0b17 	vmov	r0, r1, d7
 8005dca:	f7fa fc35 	bl	8000638 <__aeabi_dmul>
 8005dce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dd2:	f7fa feb7 	bl	8000b44 <__aeabi_dcmpge>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	f000 8266 	beq.w	80062a8 <_dtoa_r+0x958>
 8005ddc:	2400      	movs	r4, #0
 8005dde:	4625      	mov	r5, r4
 8005de0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005de2:	4656      	mov	r6, sl
 8005de4:	ea6f 0803 	mvn.w	r8, r3
 8005de8:	2700      	movs	r7, #0
 8005dea:	4621      	mov	r1, r4
 8005dec:	4648      	mov	r0, r9
 8005dee:	f000 fcbf 	bl	8006770 <_Bfree>
 8005df2:	2d00      	cmp	r5, #0
 8005df4:	f000 80bd 	beq.w	8005f72 <_dtoa_r+0x622>
 8005df8:	b12f      	cbz	r7, 8005e06 <_dtoa_r+0x4b6>
 8005dfa:	42af      	cmp	r7, r5
 8005dfc:	d003      	beq.n	8005e06 <_dtoa_r+0x4b6>
 8005dfe:	4639      	mov	r1, r7
 8005e00:	4648      	mov	r0, r9
 8005e02:	f000 fcb5 	bl	8006770 <_Bfree>
 8005e06:	4629      	mov	r1, r5
 8005e08:	4648      	mov	r0, r9
 8005e0a:	f000 fcb1 	bl	8006770 <_Bfree>
 8005e0e:	e0b0      	b.n	8005f72 <_dtoa_r+0x622>
 8005e10:	07e2      	lsls	r2, r4, #31
 8005e12:	d505      	bpl.n	8005e20 <_dtoa_r+0x4d0>
 8005e14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e18:	f7fa fc0e 	bl	8000638 <__aeabi_dmul>
 8005e1c:	3601      	adds	r6, #1
 8005e1e:	2301      	movs	r3, #1
 8005e20:	1064      	asrs	r4, r4, #1
 8005e22:	3508      	adds	r5, #8
 8005e24:	e762      	b.n	8005cec <_dtoa_r+0x39c>
 8005e26:	2602      	movs	r6, #2
 8005e28:	e765      	b.n	8005cf6 <_dtoa_r+0x3a6>
 8005e2a:	9c08      	ldr	r4, [sp, #32]
 8005e2c:	46b8      	mov	r8, r7
 8005e2e:	e784      	b.n	8005d3a <_dtoa_r+0x3ea>
 8005e30:	4b27      	ldr	r3, [pc, #156]	@ (8005ed0 <_dtoa_r+0x580>)
 8005e32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e3c:	4454      	add	r4, sl
 8005e3e:	2900      	cmp	r1, #0
 8005e40:	d054      	beq.n	8005eec <_dtoa_r+0x59c>
 8005e42:	4929      	ldr	r1, [pc, #164]	@ (8005ee8 <_dtoa_r+0x598>)
 8005e44:	2000      	movs	r0, #0
 8005e46:	f7fa fd21 	bl	800088c <__aeabi_ddiv>
 8005e4a:	4633      	mov	r3, r6
 8005e4c:	462a      	mov	r2, r5
 8005e4e:	f7fa fa3b 	bl	80002c8 <__aeabi_dsub>
 8005e52:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e56:	4656      	mov	r6, sl
 8005e58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e5c:	f7fa fe9c 	bl	8000b98 <__aeabi_d2iz>
 8005e60:	4605      	mov	r5, r0
 8005e62:	f7fa fb7f 	bl	8000564 <__aeabi_i2d>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e6e:	f7fa fa2b 	bl	80002c8 <__aeabi_dsub>
 8005e72:	3530      	adds	r5, #48	@ 0x30
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005e7c:	f806 5b01 	strb.w	r5, [r6], #1
 8005e80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e84:	f7fa fe4a 	bl	8000b1c <__aeabi_dcmplt>
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	d172      	bne.n	8005f72 <_dtoa_r+0x622>
 8005e8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e90:	4911      	ldr	r1, [pc, #68]	@ (8005ed8 <_dtoa_r+0x588>)
 8005e92:	2000      	movs	r0, #0
 8005e94:	f7fa fa18 	bl	80002c8 <__aeabi_dsub>
 8005e98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e9c:	f7fa fe3e 	bl	8000b1c <__aeabi_dcmplt>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	f040 80b4 	bne.w	800600e <_dtoa_r+0x6be>
 8005ea6:	42a6      	cmp	r6, r4
 8005ea8:	f43f af70 	beq.w	8005d8c <_dtoa_r+0x43c>
 8005eac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8005edc <_dtoa_r+0x58c>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f7fa fbc0 	bl	8000638 <__aeabi_dmul>
 8005eb8:	4b08      	ldr	r3, [pc, #32]	@ (8005edc <_dtoa_r+0x58c>)
 8005eba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ec4:	f7fa fbb8 	bl	8000638 <__aeabi_dmul>
 8005ec8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005ecc:	e7c4      	b.n	8005e58 <_dtoa_r+0x508>
 8005ece:	bf00      	nop
 8005ed0:	08009230 	.word	0x08009230
 8005ed4:	08009208 	.word	0x08009208
 8005ed8:	3ff00000 	.word	0x3ff00000
 8005edc:	40240000 	.word	0x40240000
 8005ee0:	401c0000 	.word	0x401c0000
 8005ee4:	40140000 	.word	0x40140000
 8005ee8:	3fe00000 	.word	0x3fe00000
 8005eec:	4631      	mov	r1, r6
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f7fa fba2 	bl	8000638 <__aeabi_dmul>
 8005ef4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ef8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005efa:	4656      	mov	r6, sl
 8005efc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f00:	f7fa fe4a 	bl	8000b98 <__aeabi_d2iz>
 8005f04:	4605      	mov	r5, r0
 8005f06:	f7fa fb2d 	bl	8000564 <__aeabi_i2d>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f12:	f7fa f9d9 	bl	80002c8 <__aeabi_dsub>
 8005f16:	3530      	adds	r5, #48	@ 0x30
 8005f18:	f806 5b01 	strb.w	r5, [r6], #1
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	42a6      	cmp	r6, r4
 8005f22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	d124      	bne.n	8005f76 <_dtoa_r+0x626>
 8005f2c:	4baf      	ldr	r3, [pc, #700]	@ (80061ec <_dtoa_r+0x89c>)
 8005f2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005f32:	f7fa f9cb 	bl	80002cc <__adddf3>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f3e:	f7fa fe0b 	bl	8000b58 <__aeabi_dcmpgt>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d163      	bne.n	800600e <_dtoa_r+0x6be>
 8005f46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005f4a:	49a8      	ldr	r1, [pc, #672]	@ (80061ec <_dtoa_r+0x89c>)
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	f7fa f9bb 	bl	80002c8 <__aeabi_dsub>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f5a:	f7fa fddf 	bl	8000b1c <__aeabi_dcmplt>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	f43f af14 	beq.w	8005d8c <_dtoa_r+0x43c>
 8005f64:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005f66:	1e73      	subs	r3, r6, #1
 8005f68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f6a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005f6e:	2b30      	cmp	r3, #48	@ 0x30
 8005f70:	d0f8      	beq.n	8005f64 <_dtoa_r+0x614>
 8005f72:	4647      	mov	r7, r8
 8005f74:	e03b      	b.n	8005fee <_dtoa_r+0x69e>
 8005f76:	4b9e      	ldr	r3, [pc, #632]	@ (80061f0 <_dtoa_r+0x8a0>)
 8005f78:	f7fa fb5e 	bl	8000638 <__aeabi_dmul>
 8005f7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005f80:	e7bc      	b.n	8005efc <_dtoa_r+0x5ac>
 8005f82:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005f86:	4656      	mov	r6, sl
 8005f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	4629      	mov	r1, r5
 8005f90:	f7fa fc7c 	bl	800088c <__aeabi_ddiv>
 8005f94:	f7fa fe00 	bl	8000b98 <__aeabi_d2iz>
 8005f98:	4680      	mov	r8, r0
 8005f9a:	f7fa fae3 	bl	8000564 <__aeabi_i2d>
 8005f9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fa2:	f7fa fb49 	bl	8000638 <__aeabi_dmul>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4620      	mov	r0, r4
 8005fac:	4629      	mov	r1, r5
 8005fae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005fb2:	f7fa f989 	bl	80002c8 <__aeabi_dsub>
 8005fb6:	f806 4b01 	strb.w	r4, [r6], #1
 8005fba:	9d08      	ldr	r5, [sp, #32]
 8005fbc:	eba6 040a 	sub.w	r4, r6, sl
 8005fc0:	42a5      	cmp	r5, r4
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	d133      	bne.n	8006030 <_dtoa_r+0x6e0>
 8005fc8:	f7fa f980 	bl	80002cc <__adddf3>
 8005fcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	460d      	mov	r5, r1
 8005fd4:	f7fa fdc0 	bl	8000b58 <__aeabi_dcmpgt>
 8005fd8:	b9c0      	cbnz	r0, 800600c <_dtoa_r+0x6bc>
 8005fda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fde:	4620      	mov	r0, r4
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	f7fa fd91 	bl	8000b08 <__aeabi_dcmpeq>
 8005fe6:	b110      	cbz	r0, 8005fee <_dtoa_r+0x69e>
 8005fe8:	f018 0f01 	tst.w	r8, #1
 8005fec:	d10e      	bne.n	800600c <_dtoa_r+0x6bc>
 8005fee:	9903      	ldr	r1, [sp, #12]
 8005ff0:	4648      	mov	r0, r9
 8005ff2:	f000 fbbd 	bl	8006770 <_Bfree>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	7033      	strb	r3, [r6, #0]
 8005ffa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005ffc:	3701      	adds	r7, #1
 8005ffe:	601f      	str	r7, [r3, #0]
 8006000:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 824b 	beq.w	800649e <_dtoa_r+0xb4e>
 8006008:	601e      	str	r6, [r3, #0]
 800600a:	e248      	b.n	800649e <_dtoa_r+0xb4e>
 800600c:	46b8      	mov	r8, r7
 800600e:	4633      	mov	r3, r6
 8006010:	461e      	mov	r6, r3
 8006012:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006016:	2a39      	cmp	r2, #57	@ 0x39
 8006018:	d106      	bne.n	8006028 <_dtoa_r+0x6d8>
 800601a:	459a      	cmp	sl, r3
 800601c:	d1f8      	bne.n	8006010 <_dtoa_r+0x6c0>
 800601e:	2230      	movs	r2, #48	@ 0x30
 8006020:	f108 0801 	add.w	r8, r8, #1
 8006024:	f88a 2000 	strb.w	r2, [sl]
 8006028:	781a      	ldrb	r2, [r3, #0]
 800602a:	3201      	adds	r2, #1
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	e7a0      	b.n	8005f72 <_dtoa_r+0x622>
 8006030:	4b6f      	ldr	r3, [pc, #444]	@ (80061f0 <_dtoa_r+0x8a0>)
 8006032:	2200      	movs	r2, #0
 8006034:	f7fa fb00 	bl	8000638 <__aeabi_dmul>
 8006038:	2200      	movs	r2, #0
 800603a:	2300      	movs	r3, #0
 800603c:	4604      	mov	r4, r0
 800603e:	460d      	mov	r5, r1
 8006040:	f7fa fd62 	bl	8000b08 <__aeabi_dcmpeq>
 8006044:	2800      	cmp	r0, #0
 8006046:	d09f      	beq.n	8005f88 <_dtoa_r+0x638>
 8006048:	e7d1      	b.n	8005fee <_dtoa_r+0x69e>
 800604a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800604c:	2a00      	cmp	r2, #0
 800604e:	f000 80ea 	beq.w	8006226 <_dtoa_r+0x8d6>
 8006052:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006054:	2a01      	cmp	r2, #1
 8006056:	f300 80cd 	bgt.w	80061f4 <_dtoa_r+0x8a4>
 800605a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800605c:	2a00      	cmp	r2, #0
 800605e:	f000 80c1 	beq.w	80061e4 <_dtoa_r+0x894>
 8006062:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006066:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006068:	9e04      	ldr	r6, [sp, #16]
 800606a:	9a04      	ldr	r2, [sp, #16]
 800606c:	441a      	add	r2, r3
 800606e:	9204      	str	r2, [sp, #16]
 8006070:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006072:	2101      	movs	r1, #1
 8006074:	441a      	add	r2, r3
 8006076:	4648      	mov	r0, r9
 8006078:	9209      	str	r2, [sp, #36]	@ 0x24
 800607a:	f000 fc77 	bl	800696c <__i2b>
 800607e:	4605      	mov	r5, r0
 8006080:	b166      	cbz	r6, 800609c <_dtoa_r+0x74c>
 8006082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006084:	2b00      	cmp	r3, #0
 8006086:	dd09      	ble.n	800609c <_dtoa_r+0x74c>
 8006088:	42b3      	cmp	r3, r6
 800608a:	9a04      	ldr	r2, [sp, #16]
 800608c:	bfa8      	it	ge
 800608e:	4633      	movge	r3, r6
 8006090:	1ad2      	subs	r2, r2, r3
 8006092:	9204      	str	r2, [sp, #16]
 8006094:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006096:	1af6      	subs	r6, r6, r3
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	9309      	str	r3, [sp, #36]	@ 0x24
 800609c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800609e:	b30b      	cbz	r3, 80060e4 <_dtoa_r+0x794>
 80060a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 80c6 	beq.w	8006234 <_dtoa_r+0x8e4>
 80060a8:	2c00      	cmp	r4, #0
 80060aa:	f000 80c0 	beq.w	800622e <_dtoa_r+0x8de>
 80060ae:	4629      	mov	r1, r5
 80060b0:	4622      	mov	r2, r4
 80060b2:	4648      	mov	r0, r9
 80060b4:	f000 fd12 	bl	8006adc <__pow5mult>
 80060b8:	9a03      	ldr	r2, [sp, #12]
 80060ba:	4601      	mov	r1, r0
 80060bc:	4605      	mov	r5, r0
 80060be:	4648      	mov	r0, r9
 80060c0:	f000 fc6a 	bl	8006998 <__multiply>
 80060c4:	9903      	ldr	r1, [sp, #12]
 80060c6:	4680      	mov	r8, r0
 80060c8:	4648      	mov	r0, r9
 80060ca:	f000 fb51 	bl	8006770 <_Bfree>
 80060ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060d0:	1b1b      	subs	r3, r3, r4
 80060d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80060d4:	f000 80b1 	beq.w	800623a <_dtoa_r+0x8ea>
 80060d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060da:	4641      	mov	r1, r8
 80060dc:	4648      	mov	r0, r9
 80060de:	f000 fcfd 	bl	8006adc <__pow5mult>
 80060e2:	9003      	str	r0, [sp, #12]
 80060e4:	2101      	movs	r1, #1
 80060e6:	4648      	mov	r0, r9
 80060e8:	f000 fc40 	bl	800696c <__i2b>
 80060ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060ee:	4604      	mov	r4, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 81d8 	beq.w	80064a6 <_dtoa_r+0xb56>
 80060f6:	461a      	mov	r2, r3
 80060f8:	4601      	mov	r1, r0
 80060fa:	4648      	mov	r0, r9
 80060fc:	f000 fcee 	bl	8006adc <__pow5mult>
 8006100:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006102:	2b01      	cmp	r3, #1
 8006104:	4604      	mov	r4, r0
 8006106:	f300 809f 	bgt.w	8006248 <_dtoa_r+0x8f8>
 800610a:	9b06      	ldr	r3, [sp, #24]
 800610c:	2b00      	cmp	r3, #0
 800610e:	f040 8097 	bne.w	8006240 <_dtoa_r+0x8f0>
 8006112:	9b07      	ldr	r3, [sp, #28]
 8006114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006118:	2b00      	cmp	r3, #0
 800611a:	f040 8093 	bne.w	8006244 <_dtoa_r+0x8f4>
 800611e:	9b07      	ldr	r3, [sp, #28]
 8006120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006124:	0d1b      	lsrs	r3, r3, #20
 8006126:	051b      	lsls	r3, r3, #20
 8006128:	b133      	cbz	r3, 8006138 <_dtoa_r+0x7e8>
 800612a:	9b04      	ldr	r3, [sp, #16]
 800612c:	3301      	adds	r3, #1
 800612e:	9304      	str	r3, [sp, #16]
 8006130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006132:	3301      	adds	r3, #1
 8006134:	9309      	str	r3, [sp, #36]	@ 0x24
 8006136:	2301      	movs	r3, #1
 8006138:	930a      	str	r3, [sp, #40]	@ 0x28
 800613a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 81b8 	beq.w	80064b2 <_dtoa_r+0xb62>
 8006142:	6923      	ldr	r3, [r4, #16]
 8006144:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006148:	6918      	ldr	r0, [r3, #16]
 800614a:	f000 fbc3 	bl	80068d4 <__hi0bits>
 800614e:	f1c0 0020 	rsb	r0, r0, #32
 8006152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006154:	4418      	add	r0, r3
 8006156:	f010 001f 	ands.w	r0, r0, #31
 800615a:	f000 8082 	beq.w	8006262 <_dtoa_r+0x912>
 800615e:	f1c0 0320 	rsb	r3, r0, #32
 8006162:	2b04      	cmp	r3, #4
 8006164:	dd73      	ble.n	800624e <_dtoa_r+0x8fe>
 8006166:	9b04      	ldr	r3, [sp, #16]
 8006168:	f1c0 001c 	rsb	r0, r0, #28
 800616c:	4403      	add	r3, r0
 800616e:	9304      	str	r3, [sp, #16]
 8006170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006172:	4403      	add	r3, r0
 8006174:	4406      	add	r6, r0
 8006176:	9309      	str	r3, [sp, #36]	@ 0x24
 8006178:	9b04      	ldr	r3, [sp, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	dd05      	ble.n	800618a <_dtoa_r+0x83a>
 800617e:	9903      	ldr	r1, [sp, #12]
 8006180:	461a      	mov	r2, r3
 8006182:	4648      	mov	r0, r9
 8006184:	f000 fd04 	bl	8006b90 <__lshift>
 8006188:	9003      	str	r0, [sp, #12]
 800618a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800618c:	2b00      	cmp	r3, #0
 800618e:	dd05      	ble.n	800619c <_dtoa_r+0x84c>
 8006190:	4621      	mov	r1, r4
 8006192:	461a      	mov	r2, r3
 8006194:	4648      	mov	r0, r9
 8006196:	f000 fcfb 	bl	8006b90 <__lshift>
 800619a:	4604      	mov	r4, r0
 800619c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d061      	beq.n	8006266 <_dtoa_r+0x916>
 80061a2:	9803      	ldr	r0, [sp, #12]
 80061a4:	4621      	mov	r1, r4
 80061a6:	f000 fd5f 	bl	8006c68 <__mcmp>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	da5b      	bge.n	8006266 <_dtoa_r+0x916>
 80061ae:	2300      	movs	r3, #0
 80061b0:	9903      	ldr	r1, [sp, #12]
 80061b2:	220a      	movs	r2, #10
 80061b4:	4648      	mov	r0, r9
 80061b6:	f000 fafd 	bl	80067b4 <__multadd>
 80061ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061bc:	9003      	str	r0, [sp, #12]
 80061be:	f107 38ff 	add.w	r8, r7, #4294967295
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8177 	beq.w	80064b6 <_dtoa_r+0xb66>
 80061c8:	4629      	mov	r1, r5
 80061ca:	2300      	movs	r3, #0
 80061cc:	220a      	movs	r2, #10
 80061ce:	4648      	mov	r0, r9
 80061d0:	f000 faf0 	bl	80067b4 <__multadd>
 80061d4:	f1bb 0f00 	cmp.w	fp, #0
 80061d8:	4605      	mov	r5, r0
 80061da:	dc6f      	bgt.n	80062bc <_dtoa_r+0x96c>
 80061dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061de:	2b02      	cmp	r3, #2
 80061e0:	dc49      	bgt.n	8006276 <_dtoa_r+0x926>
 80061e2:	e06b      	b.n	80062bc <_dtoa_r+0x96c>
 80061e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80061e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80061ea:	e73c      	b.n	8006066 <_dtoa_r+0x716>
 80061ec:	3fe00000 	.word	0x3fe00000
 80061f0:	40240000 	.word	0x40240000
 80061f4:	9b08      	ldr	r3, [sp, #32]
 80061f6:	1e5c      	subs	r4, r3, #1
 80061f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061fa:	42a3      	cmp	r3, r4
 80061fc:	db09      	blt.n	8006212 <_dtoa_r+0x8c2>
 80061fe:	1b1c      	subs	r4, r3, r4
 8006200:	9b08      	ldr	r3, [sp, #32]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f6bf af30 	bge.w	8006068 <_dtoa_r+0x718>
 8006208:	9b04      	ldr	r3, [sp, #16]
 800620a:	9a08      	ldr	r2, [sp, #32]
 800620c:	1a9e      	subs	r6, r3, r2
 800620e:	2300      	movs	r3, #0
 8006210:	e72b      	b.n	800606a <_dtoa_r+0x71a>
 8006212:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006214:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006216:	940a      	str	r4, [sp, #40]	@ 0x28
 8006218:	1ae3      	subs	r3, r4, r3
 800621a:	441a      	add	r2, r3
 800621c:	9e04      	ldr	r6, [sp, #16]
 800621e:	9b08      	ldr	r3, [sp, #32]
 8006220:	920e      	str	r2, [sp, #56]	@ 0x38
 8006222:	2400      	movs	r4, #0
 8006224:	e721      	b.n	800606a <_dtoa_r+0x71a>
 8006226:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006228:	9e04      	ldr	r6, [sp, #16]
 800622a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800622c:	e728      	b.n	8006080 <_dtoa_r+0x730>
 800622e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006232:	e751      	b.n	80060d8 <_dtoa_r+0x788>
 8006234:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006236:	9903      	ldr	r1, [sp, #12]
 8006238:	e750      	b.n	80060dc <_dtoa_r+0x78c>
 800623a:	f8cd 800c 	str.w	r8, [sp, #12]
 800623e:	e751      	b.n	80060e4 <_dtoa_r+0x794>
 8006240:	2300      	movs	r3, #0
 8006242:	e779      	b.n	8006138 <_dtoa_r+0x7e8>
 8006244:	9b06      	ldr	r3, [sp, #24]
 8006246:	e777      	b.n	8006138 <_dtoa_r+0x7e8>
 8006248:	2300      	movs	r3, #0
 800624a:	930a      	str	r3, [sp, #40]	@ 0x28
 800624c:	e779      	b.n	8006142 <_dtoa_r+0x7f2>
 800624e:	d093      	beq.n	8006178 <_dtoa_r+0x828>
 8006250:	9a04      	ldr	r2, [sp, #16]
 8006252:	331c      	adds	r3, #28
 8006254:	441a      	add	r2, r3
 8006256:	9204      	str	r2, [sp, #16]
 8006258:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800625a:	441a      	add	r2, r3
 800625c:	441e      	add	r6, r3
 800625e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006260:	e78a      	b.n	8006178 <_dtoa_r+0x828>
 8006262:	4603      	mov	r3, r0
 8006264:	e7f4      	b.n	8006250 <_dtoa_r+0x900>
 8006266:	9b08      	ldr	r3, [sp, #32]
 8006268:	2b00      	cmp	r3, #0
 800626a:	46b8      	mov	r8, r7
 800626c:	dc20      	bgt.n	80062b0 <_dtoa_r+0x960>
 800626e:	469b      	mov	fp, r3
 8006270:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006272:	2b02      	cmp	r3, #2
 8006274:	dd1e      	ble.n	80062b4 <_dtoa_r+0x964>
 8006276:	f1bb 0f00 	cmp.w	fp, #0
 800627a:	f47f adb1 	bne.w	8005de0 <_dtoa_r+0x490>
 800627e:	4621      	mov	r1, r4
 8006280:	465b      	mov	r3, fp
 8006282:	2205      	movs	r2, #5
 8006284:	4648      	mov	r0, r9
 8006286:	f000 fa95 	bl	80067b4 <__multadd>
 800628a:	4601      	mov	r1, r0
 800628c:	4604      	mov	r4, r0
 800628e:	9803      	ldr	r0, [sp, #12]
 8006290:	f000 fcea 	bl	8006c68 <__mcmp>
 8006294:	2800      	cmp	r0, #0
 8006296:	f77f ada3 	ble.w	8005de0 <_dtoa_r+0x490>
 800629a:	4656      	mov	r6, sl
 800629c:	2331      	movs	r3, #49	@ 0x31
 800629e:	f806 3b01 	strb.w	r3, [r6], #1
 80062a2:	f108 0801 	add.w	r8, r8, #1
 80062a6:	e59f      	b.n	8005de8 <_dtoa_r+0x498>
 80062a8:	9c08      	ldr	r4, [sp, #32]
 80062aa:	46b8      	mov	r8, r7
 80062ac:	4625      	mov	r5, r4
 80062ae:	e7f4      	b.n	800629a <_dtoa_r+0x94a>
 80062b0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80062b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 8101 	beq.w	80064be <_dtoa_r+0xb6e>
 80062bc:	2e00      	cmp	r6, #0
 80062be:	dd05      	ble.n	80062cc <_dtoa_r+0x97c>
 80062c0:	4629      	mov	r1, r5
 80062c2:	4632      	mov	r2, r6
 80062c4:	4648      	mov	r0, r9
 80062c6:	f000 fc63 	bl	8006b90 <__lshift>
 80062ca:	4605      	mov	r5, r0
 80062cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d05c      	beq.n	800638c <_dtoa_r+0xa3c>
 80062d2:	6869      	ldr	r1, [r5, #4]
 80062d4:	4648      	mov	r0, r9
 80062d6:	f000 fa0b 	bl	80066f0 <_Balloc>
 80062da:	4606      	mov	r6, r0
 80062dc:	b928      	cbnz	r0, 80062ea <_dtoa_r+0x99a>
 80062de:	4b82      	ldr	r3, [pc, #520]	@ (80064e8 <_dtoa_r+0xb98>)
 80062e0:	4602      	mov	r2, r0
 80062e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80062e6:	f7ff bb47 	b.w	8005978 <_dtoa_r+0x28>
 80062ea:	692a      	ldr	r2, [r5, #16]
 80062ec:	3202      	adds	r2, #2
 80062ee:	0092      	lsls	r2, r2, #2
 80062f0:	f105 010c 	add.w	r1, r5, #12
 80062f4:	300c      	adds	r0, #12
 80062f6:	f001 ff59 	bl	80081ac <memcpy>
 80062fa:	2201      	movs	r2, #1
 80062fc:	4631      	mov	r1, r6
 80062fe:	4648      	mov	r0, r9
 8006300:	f000 fc46 	bl	8006b90 <__lshift>
 8006304:	f10a 0301 	add.w	r3, sl, #1
 8006308:	9304      	str	r3, [sp, #16]
 800630a:	eb0a 030b 	add.w	r3, sl, fp
 800630e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006310:	9b06      	ldr	r3, [sp, #24]
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	462f      	mov	r7, r5
 8006318:	9309      	str	r3, [sp, #36]	@ 0x24
 800631a:	4605      	mov	r5, r0
 800631c:	9b04      	ldr	r3, [sp, #16]
 800631e:	9803      	ldr	r0, [sp, #12]
 8006320:	4621      	mov	r1, r4
 8006322:	f103 3bff 	add.w	fp, r3, #4294967295
 8006326:	f7ff fa89 	bl	800583c <quorem>
 800632a:	4603      	mov	r3, r0
 800632c:	3330      	adds	r3, #48	@ 0x30
 800632e:	9008      	str	r0, [sp, #32]
 8006330:	4639      	mov	r1, r7
 8006332:	9803      	ldr	r0, [sp, #12]
 8006334:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006336:	f000 fc97 	bl	8006c68 <__mcmp>
 800633a:	462a      	mov	r2, r5
 800633c:	9006      	str	r0, [sp, #24]
 800633e:	4621      	mov	r1, r4
 8006340:	4648      	mov	r0, r9
 8006342:	f000 fcad 	bl	8006ca0 <__mdiff>
 8006346:	68c2      	ldr	r2, [r0, #12]
 8006348:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800634a:	4606      	mov	r6, r0
 800634c:	bb02      	cbnz	r2, 8006390 <_dtoa_r+0xa40>
 800634e:	4601      	mov	r1, r0
 8006350:	9803      	ldr	r0, [sp, #12]
 8006352:	f000 fc89 	bl	8006c68 <__mcmp>
 8006356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006358:	4602      	mov	r2, r0
 800635a:	4631      	mov	r1, r6
 800635c:	4648      	mov	r0, r9
 800635e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006362:	f000 fa05 	bl	8006770 <_Bfree>
 8006366:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006368:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800636a:	9e04      	ldr	r6, [sp, #16]
 800636c:	ea42 0103 	orr.w	r1, r2, r3
 8006370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006372:	4319      	orrs	r1, r3
 8006374:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006376:	d10d      	bne.n	8006394 <_dtoa_r+0xa44>
 8006378:	2b39      	cmp	r3, #57	@ 0x39
 800637a:	d027      	beq.n	80063cc <_dtoa_r+0xa7c>
 800637c:	9a06      	ldr	r2, [sp, #24]
 800637e:	2a00      	cmp	r2, #0
 8006380:	dd01      	ble.n	8006386 <_dtoa_r+0xa36>
 8006382:	9b08      	ldr	r3, [sp, #32]
 8006384:	3331      	adds	r3, #49	@ 0x31
 8006386:	f88b 3000 	strb.w	r3, [fp]
 800638a:	e52e      	b.n	8005dea <_dtoa_r+0x49a>
 800638c:	4628      	mov	r0, r5
 800638e:	e7b9      	b.n	8006304 <_dtoa_r+0x9b4>
 8006390:	2201      	movs	r2, #1
 8006392:	e7e2      	b.n	800635a <_dtoa_r+0xa0a>
 8006394:	9906      	ldr	r1, [sp, #24]
 8006396:	2900      	cmp	r1, #0
 8006398:	db04      	blt.n	80063a4 <_dtoa_r+0xa54>
 800639a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800639c:	4301      	orrs	r1, r0
 800639e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063a0:	4301      	orrs	r1, r0
 80063a2:	d120      	bne.n	80063e6 <_dtoa_r+0xa96>
 80063a4:	2a00      	cmp	r2, #0
 80063a6:	ddee      	ble.n	8006386 <_dtoa_r+0xa36>
 80063a8:	9903      	ldr	r1, [sp, #12]
 80063aa:	9304      	str	r3, [sp, #16]
 80063ac:	2201      	movs	r2, #1
 80063ae:	4648      	mov	r0, r9
 80063b0:	f000 fbee 	bl	8006b90 <__lshift>
 80063b4:	4621      	mov	r1, r4
 80063b6:	9003      	str	r0, [sp, #12]
 80063b8:	f000 fc56 	bl	8006c68 <__mcmp>
 80063bc:	2800      	cmp	r0, #0
 80063be:	9b04      	ldr	r3, [sp, #16]
 80063c0:	dc02      	bgt.n	80063c8 <_dtoa_r+0xa78>
 80063c2:	d1e0      	bne.n	8006386 <_dtoa_r+0xa36>
 80063c4:	07da      	lsls	r2, r3, #31
 80063c6:	d5de      	bpl.n	8006386 <_dtoa_r+0xa36>
 80063c8:	2b39      	cmp	r3, #57	@ 0x39
 80063ca:	d1da      	bne.n	8006382 <_dtoa_r+0xa32>
 80063cc:	2339      	movs	r3, #57	@ 0x39
 80063ce:	f88b 3000 	strb.w	r3, [fp]
 80063d2:	4633      	mov	r3, r6
 80063d4:	461e      	mov	r6, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80063dc:	2a39      	cmp	r2, #57	@ 0x39
 80063de:	d04e      	beq.n	800647e <_dtoa_r+0xb2e>
 80063e0:	3201      	adds	r2, #1
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	e501      	b.n	8005dea <_dtoa_r+0x49a>
 80063e6:	2a00      	cmp	r2, #0
 80063e8:	dd03      	ble.n	80063f2 <_dtoa_r+0xaa2>
 80063ea:	2b39      	cmp	r3, #57	@ 0x39
 80063ec:	d0ee      	beq.n	80063cc <_dtoa_r+0xa7c>
 80063ee:	3301      	adds	r3, #1
 80063f0:	e7c9      	b.n	8006386 <_dtoa_r+0xa36>
 80063f2:	9a04      	ldr	r2, [sp, #16]
 80063f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80063f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80063fa:	428a      	cmp	r2, r1
 80063fc:	d028      	beq.n	8006450 <_dtoa_r+0xb00>
 80063fe:	9903      	ldr	r1, [sp, #12]
 8006400:	2300      	movs	r3, #0
 8006402:	220a      	movs	r2, #10
 8006404:	4648      	mov	r0, r9
 8006406:	f000 f9d5 	bl	80067b4 <__multadd>
 800640a:	42af      	cmp	r7, r5
 800640c:	9003      	str	r0, [sp, #12]
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	f04f 020a 	mov.w	r2, #10
 8006416:	4639      	mov	r1, r7
 8006418:	4648      	mov	r0, r9
 800641a:	d107      	bne.n	800642c <_dtoa_r+0xadc>
 800641c:	f000 f9ca 	bl	80067b4 <__multadd>
 8006420:	4607      	mov	r7, r0
 8006422:	4605      	mov	r5, r0
 8006424:	9b04      	ldr	r3, [sp, #16]
 8006426:	3301      	adds	r3, #1
 8006428:	9304      	str	r3, [sp, #16]
 800642a:	e777      	b.n	800631c <_dtoa_r+0x9cc>
 800642c:	f000 f9c2 	bl	80067b4 <__multadd>
 8006430:	4629      	mov	r1, r5
 8006432:	4607      	mov	r7, r0
 8006434:	2300      	movs	r3, #0
 8006436:	220a      	movs	r2, #10
 8006438:	4648      	mov	r0, r9
 800643a:	f000 f9bb 	bl	80067b4 <__multadd>
 800643e:	4605      	mov	r5, r0
 8006440:	e7f0      	b.n	8006424 <_dtoa_r+0xad4>
 8006442:	f1bb 0f00 	cmp.w	fp, #0
 8006446:	bfcc      	ite	gt
 8006448:	465e      	movgt	r6, fp
 800644a:	2601      	movle	r6, #1
 800644c:	4456      	add	r6, sl
 800644e:	2700      	movs	r7, #0
 8006450:	9903      	ldr	r1, [sp, #12]
 8006452:	9304      	str	r3, [sp, #16]
 8006454:	2201      	movs	r2, #1
 8006456:	4648      	mov	r0, r9
 8006458:	f000 fb9a 	bl	8006b90 <__lshift>
 800645c:	4621      	mov	r1, r4
 800645e:	9003      	str	r0, [sp, #12]
 8006460:	f000 fc02 	bl	8006c68 <__mcmp>
 8006464:	2800      	cmp	r0, #0
 8006466:	dcb4      	bgt.n	80063d2 <_dtoa_r+0xa82>
 8006468:	d102      	bne.n	8006470 <_dtoa_r+0xb20>
 800646a:	9b04      	ldr	r3, [sp, #16]
 800646c:	07db      	lsls	r3, r3, #31
 800646e:	d4b0      	bmi.n	80063d2 <_dtoa_r+0xa82>
 8006470:	4633      	mov	r3, r6
 8006472:	461e      	mov	r6, r3
 8006474:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006478:	2a30      	cmp	r2, #48	@ 0x30
 800647a:	d0fa      	beq.n	8006472 <_dtoa_r+0xb22>
 800647c:	e4b5      	b.n	8005dea <_dtoa_r+0x49a>
 800647e:	459a      	cmp	sl, r3
 8006480:	d1a8      	bne.n	80063d4 <_dtoa_r+0xa84>
 8006482:	2331      	movs	r3, #49	@ 0x31
 8006484:	f108 0801 	add.w	r8, r8, #1
 8006488:	f88a 3000 	strb.w	r3, [sl]
 800648c:	e4ad      	b.n	8005dea <_dtoa_r+0x49a>
 800648e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006490:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80064ec <_dtoa_r+0xb9c>
 8006494:	b11b      	cbz	r3, 800649e <_dtoa_r+0xb4e>
 8006496:	f10a 0308 	add.w	r3, sl, #8
 800649a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	4650      	mov	r0, sl
 80064a0:	b017      	add	sp, #92	@ 0x5c
 80064a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	f77f ae2e 	ble.w	800610a <_dtoa_r+0x7ba>
 80064ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80064b2:	2001      	movs	r0, #1
 80064b4:	e64d      	b.n	8006152 <_dtoa_r+0x802>
 80064b6:	f1bb 0f00 	cmp.w	fp, #0
 80064ba:	f77f aed9 	ble.w	8006270 <_dtoa_r+0x920>
 80064be:	4656      	mov	r6, sl
 80064c0:	9803      	ldr	r0, [sp, #12]
 80064c2:	4621      	mov	r1, r4
 80064c4:	f7ff f9ba 	bl	800583c <quorem>
 80064c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80064cc:	f806 3b01 	strb.w	r3, [r6], #1
 80064d0:	eba6 020a 	sub.w	r2, r6, sl
 80064d4:	4593      	cmp	fp, r2
 80064d6:	ddb4      	ble.n	8006442 <_dtoa_r+0xaf2>
 80064d8:	9903      	ldr	r1, [sp, #12]
 80064da:	2300      	movs	r3, #0
 80064dc:	220a      	movs	r2, #10
 80064de:	4648      	mov	r0, r9
 80064e0:	f000 f968 	bl	80067b4 <__multadd>
 80064e4:	9003      	str	r0, [sp, #12]
 80064e6:	e7eb      	b.n	80064c0 <_dtoa_r+0xb70>
 80064e8:	080090d5 	.word	0x080090d5
 80064ec:	08009059 	.word	0x08009059

080064f0 <_free_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4605      	mov	r5, r0
 80064f4:	2900      	cmp	r1, #0
 80064f6:	d041      	beq.n	800657c <_free_r+0x8c>
 80064f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064fc:	1f0c      	subs	r4, r1, #4
 80064fe:	2b00      	cmp	r3, #0
 8006500:	bfb8      	it	lt
 8006502:	18e4      	addlt	r4, r4, r3
 8006504:	f000 f8e8 	bl	80066d8 <__malloc_lock>
 8006508:	4a1d      	ldr	r2, [pc, #116]	@ (8006580 <_free_r+0x90>)
 800650a:	6813      	ldr	r3, [r2, #0]
 800650c:	b933      	cbnz	r3, 800651c <_free_r+0x2c>
 800650e:	6063      	str	r3, [r4, #4]
 8006510:	6014      	str	r4, [r2, #0]
 8006512:	4628      	mov	r0, r5
 8006514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006518:	f000 b8e4 	b.w	80066e4 <__malloc_unlock>
 800651c:	42a3      	cmp	r3, r4
 800651e:	d908      	bls.n	8006532 <_free_r+0x42>
 8006520:	6820      	ldr	r0, [r4, #0]
 8006522:	1821      	adds	r1, r4, r0
 8006524:	428b      	cmp	r3, r1
 8006526:	bf01      	itttt	eq
 8006528:	6819      	ldreq	r1, [r3, #0]
 800652a:	685b      	ldreq	r3, [r3, #4]
 800652c:	1809      	addeq	r1, r1, r0
 800652e:	6021      	streq	r1, [r4, #0]
 8006530:	e7ed      	b.n	800650e <_free_r+0x1e>
 8006532:	461a      	mov	r2, r3
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	b10b      	cbz	r3, 800653c <_free_r+0x4c>
 8006538:	42a3      	cmp	r3, r4
 800653a:	d9fa      	bls.n	8006532 <_free_r+0x42>
 800653c:	6811      	ldr	r1, [r2, #0]
 800653e:	1850      	adds	r0, r2, r1
 8006540:	42a0      	cmp	r0, r4
 8006542:	d10b      	bne.n	800655c <_free_r+0x6c>
 8006544:	6820      	ldr	r0, [r4, #0]
 8006546:	4401      	add	r1, r0
 8006548:	1850      	adds	r0, r2, r1
 800654a:	4283      	cmp	r3, r0
 800654c:	6011      	str	r1, [r2, #0]
 800654e:	d1e0      	bne.n	8006512 <_free_r+0x22>
 8006550:	6818      	ldr	r0, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	6053      	str	r3, [r2, #4]
 8006556:	4408      	add	r0, r1
 8006558:	6010      	str	r0, [r2, #0]
 800655a:	e7da      	b.n	8006512 <_free_r+0x22>
 800655c:	d902      	bls.n	8006564 <_free_r+0x74>
 800655e:	230c      	movs	r3, #12
 8006560:	602b      	str	r3, [r5, #0]
 8006562:	e7d6      	b.n	8006512 <_free_r+0x22>
 8006564:	6820      	ldr	r0, [r4, #0]
 8006566:	1821      	adds	r1, r4, r0
 8006568:	428b      	cmp	r3, r1
 800656a:	bf04      	itt	eq
 800656c:	6819      	ldreq	r1, [r3, #0]
 800656e:	685b      	ldreq	r3, [r3, #4]
 8006570:	6063      	str	r3, [r4, #4]
 8006572:	bf04      	itt	eq
 8006574:	1809      	addeq	r1, r1, r0
 8006576:	6021      	streq	r1, [r4, #0]
 8006578:	6054      	str	r4, [r2, #4]
 800657a:	e7ca      	b.n	8006512 <_free_r+0x22>
 800657c:	bd38      	pop	{r3, r4, r5, pc}
 800657e:	bf00      	nop
 8006580:	2000046c 	.word	0x2000046c

08006584 <malloc>:
 8006584:	4b02      	ldr	r3, [pc, #8]	@ (8006590 <malloc+0xc>)
 8006586:	4601      	mov	r1, r0
 8006588:	6818      	ldr	r0, [r3, #0]
 800658a:	f000 b825 	b.w	80065d8 <_malloc_r>
 800658e:	bf00      	nop
 8006590:	20000018 	.word	0x20000018

08006594 <sbrk_aligned>:
 8006594:	b570      	push	{r4, r5, r6, lr}
 8006596:	4e0f      	ldr	r6, [pc, #60]	@ (80065d4 <sbrk_aligned+0x40>)
 8006598:	460c      	mov	r4, r1
 800659a:	6831      	ldr	r1, [r6, #0]
 800659c:	4605      	mov	r5, r0
 800659e:	b911      	cbnz	r1, 80065a6 <sbrk_aligned+0x12>
 80065a0:	f001 fdf4 	bl	800818c <_sbrk_r>
 80065a4:	6030      	str	r0, [r6, #0]
 80065a6:	4621      	mov	r1, r4
 80065a8:	4628      	mov	r0, r5
 80065aa:	f001 fdef 	bl	800818c <_sbrk_r>
 80065ae:	1c43      	adds	r3, r0, #1
 80065b0:	d103      	bne.n	80065ba <sbrk_aligned+0x26>
 80065b2:	f04f 34ff 	mov.w	r4, #4294967295
 80065b6:	4620      	mov	r0, r4
 80065b8:	bd70      	pop	{r4, r5, r6, pc}
 80065ba:	1cc4      	adds	r4, r0, #3
 80065bc:	f024 0403 	bic.w	r4, r4, #3
 80065c0:	42a0      	cmp	r0, r4
 80065c2:	d0f8      	beq.n	80065b6 <sbrk_aligned+0x22>
 80065c4:	1a21      	subs	r1, r4, r0
 80065c6:	4628      	mov	r0, r5
 80065c8:	f001 fde0 	bl	800818c <_sbrk_r>
 80065cc:	3001      	adds	r0, #1
 80065ce:	d1f2      	bne.n	80065b6 <sbrk_aligned+0x22>
 80065d0:	e7ef      	b.n	80065b2 <sbrk_aligned+0x1e>
 80065d2:	bf00      	nop
 80065d4:	20000468 	.word	0x20000468

080065d8 <_malloc_r>:
 80065d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065dc:	1ccd      	adds	r5, r1, #3
 80065de:	f025 0503 	bic.w	r5, r5, #3
 80065e2:	3508      	adds	r5, #8
 80065e4:	2d0c      	cmp	r5, #12
 80065e6:	bf38      	it	cc
 80065e8:	250c      	movcc	r5, #12
 80065ea:	2d00      	cmp	r5, #0
 80065ec:	4606      	mov	r6, r0
 80065ee:	db01      	blt.n	80065f4 <_malloc_r+0x1c>
 80065f0:	42a9      	cmp	r1, r5
 80065f2:	d904      	bls.n	80065fe <_malloc_r+0x26>
 80065f4:	230c      	movs	r3, #12
 80065f6:	6033      	str	r3, [r6, #0]
 80065f8:	2000      	movs	r0, #0
 80065fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80066d4 <_malloc_r+0xfc>
 8006602:	f000 f869 	bl	80066d8 <__malloc_lock>
 8006606:	f8d8 3000 	ldr.w	r3, [r8]
 800660a:	461c      	mov	r4, r3
 800660c:	bb44      	cbnz	r4, 8006660 <_malloc_r+0x88>
 800660e:	4629      	mov	r1, r5
 8006610:	4630      	mov	r0, r6
 8006612:	f7ff ffbf 	bl	8006594 <sbrk_aligned>
 8006616:	1c43      	adds	r3, r0, #1
 8006618:	4604      	mov	r4, r0
 800661a:	d158      	bne.n	80066ce <_malloc_r+0xf6>
 800661c:	f8d8 4000 	ldr.w	r4, [r8]
 8006620:	4627      	mov	r7, r4
 8006622:	2f00      	cmp	r7, #0
 8006624:	d143      	bne.n	80066ae <_malloc_r+0xd6>
 8006626:	2c00      	cmp	r4, #0
 8006628:	d04b      	beq.n	80066c2 <_malloc_r+0xea>
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	4639      	mov	r1, r7
 800662e:	4630      	mov	r0, r6
 8006630:	eb04 0903 	add.w	r9, r4, r3
 8006634:	f001 fdaa 	bl	800818c <_sbrk_r>
 8006638:	4581      	cmp	r9, r0
 800663a:	d142      	bne.n	80066c2 <_malloc_r+0xea>
 800663c:	6821      	ldr	r1, [r4, #0]
 800663e:	1a6d      	subs	r5, r5, r1
 8006640:	4629      	mov	r1, r5
 8006642:	4630      	mov	r0, r6
 8006644:	f7ff ffa6 	bl	8006594 <sbrk_aligned>
 8006648:	3001      	adds	r0, #1
 800664a:	d03a      	beq.n	80066c2 <_malloc_r+0xea>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	442b      	add	r3, r5
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	f8d8 3000 	ldr.w	r3, [r8]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	bb62      	cbnz	r2, 80066b4 <_malloc_r+0xdc>
 800665a:	f8c8 7000 	str.w	r7, [r8]
 800665e:	e00f      	b.n	8006680 <_malloc_r+0xa8>
 8006660:	6822      	ldr	r2, [r4, #0]
 8006662:	1b52      	subs	r2, r2, r5
 8006664:	d420      	bmi.n	80066a8 <_malloc_r+0xd0>
 8006666:	2a0b      	cmp	r2, #11
 8006668:	d917      	bls.n	800669a <_malloc_r+0xc2>
 800666a:	1961      	adds	r1, r4, r5
 800666c:	42a3      	cmp	r3, r4
 800666e:	6025      	str	r5, [r4, #0]
 8006670:	bf18      	it	ne
 8006672:	6059      	strne	r1, [r3, #4]
 8006674:	6863      	ldr	r3, [r4, #4]
 8006676:	bf08      	it	eq
 8006678:	f8c8 1000 	streq.w	r1, [r8]
 800667c:	5162      	str	r2, [r4, r5]
 800667e:	604b      	str	r3, [r1, #4]
 8006680:	4630      	mov	r0, r6
 8006682:	f000 f82f 	bl	80066e4 <__malloc_unlock>
 8006686:	f104 000b 	add.w	r0, r4, #11
 800668a:	1d23      	adds	r3, r4, #4
 800668c:	f020 0007 	bic.w	r0, r0, #7
 8006690:	1ac2      	subs	r2, r0, r3
 8006692:	bf1c      	itt	ne
 8006694:	1a1b      	subne	r3, r3, r0
 8006696:	50a3      	strne	r3, [r4, r2]
 8006698:	e7af      	b.n	80065fa <_malloc_r+0x22>
 800669a:	6862      	ldr	r2, [r4, #4]
 800669c:	42a3      	cmp	r3, r4
 800669e:	bf0c      	ite	eq
 80066a0:	f8c8 2000 	streq.w	r2, [r8]
 80066a4:	605a      	strne	r2, [r3, #4]
 80066a6:	e7eb      	b.n	8006680 <_malloc_r+0xa8>
 80066a8:	4623      	mov	r3, r4
 80066aa:	6864      	ldr	r4, [r4, #4]
 80066ac:	e7ae      	b.n	800660c <_malloc_r+0x34>
 80066ae:	463c      	mov	r4, r7
 80066b0:	687f      	ldr	r7, [r7, #4]
 80066b2:	e7b6      	b.n	8006622 <_malloc_r+0x4a>
 80066b4:	461a      	mov	r2, r3
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	d1fb      	bne.n	80066b4 <_malloc_r+0xdc>
 80066bc:	2300      	movs	r3, #0
 80066be:	6053      	str	r3, [r2, #4]
 80066c0:	e7de      	b.n	8006680 <_malloc_r+0xa8>
 80066c2:	230c      	movs	r3, #12
 80066c4:	6033      	str	r3, [r6, #0]
 80066c6:	4630      	mov	r0, r6
 80066c8:	f000 f80c 	bl	80066e4 <__malloc_unlock>
 80066cc:	e794      	b.n	80065f8 <_malloc_r+0x20>
 80066ce:	6005      	str	r5, [r0, #0]
 80066d0:	e7d6      	b.n	8006680 <_malloc_r+0xa8>
 80066d2:	bf00      	nop
 80066d4:	2000046c 	.word	0x2000046c

080066d8 <__malloc_lock>:
 80066d8:	4801      	ldr	r0, [pc, #4]	@ (80066e0 <__malloc_lock+0x8>)
 80066da:	f7ff b8a8 	b.w	800582e <__retarget_lock_acquire_recursive>
 80066de:	bf00      	nop
 80066e0:	20000464 	.word	0x20000464

080066e4 <__malloc_unlock>:
 80066e4:	4801      	ldr	r0, [pc, #4]	@ (80066ec <__malloc_unlock+0x8>)
 80066e6:	f7ff b8a3 	b.w	8005830 <__retarget_lock_release_recursive>
 80066ea:	bf00      	nop
 80066ec:	20000464 	.word	0x20000464

080066f0 <_Balloc>:
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	69c6      	ldr	r6, [r0, #28]
 80066f4:	4604      	mov	r4, r0
 80066f6:	460d      	mov	r5, r1
 80066f8:	b976      	cbnz	r6, 8006718 <_Balloc+0x28>
 80066fa:	2010      	movs	r0, #16
 80066fc:	f7ff ff42 	bl	8006584 <malloc>
 8006700:	4602      	mov	r2, r0
 8006702:	61e0      	str	r0, [r4, #28]
 8006704:	b920      	cbnz	r0, 8006710 <_Balloc+0x20>
 8006706:	4b18      	ldr	r3, [pc, #96]	@ (8006768 <_Balloc+0x78>)
 8006708:	4818      	ldr	r0, [pc, #96]	@ (800676c <_Balloc+0x7c>)
 800670a:	216b      	movs	r1, #107	@ 0x6b
 800670c:	f001 fd62 	bl	80081d4 <__assert_func>
 8006710:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006714:	6006      	str	r6, [r0, #0]
 8006716:	60c6      	str	r6, [r0, #12]
 8006718:	69e6      	ldr	r6, [r4, #28]
 800671a:	68f3      	ldr	r3, [r6, #12]
 800671c:	b183      	cbz	r3, 8006740 <_Balloc+0x50>
 800671e:	69e3      	ldr	r3, [r4, #28]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006726:	b9b8      	cbnz	r0, 8006758 <_Balloc+0x68>
 8006728:	2101      	movs	r1, #1
 800672a:	fa01 f605 	lsl.w	r6, r1, r5
 800672e:	1d72      	adds	r2, r6, #5
 8006730:	0092      	lsls	r2, r2, #2
 8006732:	4620      	mov	r0, r4
 8006734:	f001 fd6c 	bl	8008210 <_calloc_r>
 8006738:	b160      	cbz	r0, 8006754 <_Balloc+0x64>
 800673a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800673e:	e00e      	b.n	800675e <_Balloc+0x6e>
 8006740:	2221      	movs	r2, #33	@ 0x21
 8006742:	2104      	movs	r1, #4
 8006744:	4620      	mov	r0, r4
 8006746:	f001 fd63 	bl	8008210 <_calloc_r>
 800674a:	69e3      	ldr	r3, [r4, #28]
 800674c:	60f0      	str	r0, [r6, #12]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e4      	bne.n	800671e <_Balloc+0x2e>
 8006754:	2000      	movs	r0, #0
 8006756:	bd70      	pop	{r4, r5, r6, pc}
 8006758:	6802      	ldr	r2, [r0, #0]
 800675a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800675e:	2300      	movs	r3, #0
 8006760:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006764:	e7f7      	b.n	8006756 <_Balloc+0x66>
 8006766:	bf00      	nop
 8006768:	08009066 	.word	0x08009066
 800676c:	080090e6 	.word	0x080090e6

08006770 <_Bfree>:
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	69c6      	ldr	r6, [r0, #28]
 8006774:	4605      	mov	r5, r0
 8006776:	460c      	mov	r4, r1
 8006778:	b976      	cbnz	r6, 8006798 <_Bfree+0x28>
 800677a:	2010      	movs	r0, #16
 800677c:	f7ff ff02 	bl	8006584 <malloc>
 8006780:	4602      	mov	r2, r0
 8006782:	61e8      	str	r0, [r5, #28]
 8006784:	b920      	cbnz	r0, 8006790 <_Bfree+0x20>
 8006786:	4b09      	ldr	r3, [pc, #36]	@ (80067ac <_Bfree+0x3c>)
 8006788:	4809      	ldr	r0, [pc, #36]	@ (80067b0 <_Bfree+0x40>)
 800678a:	218f      	movs	r1, #143	@ 0x8f
 800678c:	f001 fd22 	bl	80081d4 <__assert_func>
 8006790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006794:	6006      	str	r6, [r0, #0]
 8006796:	60c6      	str	r6, [r0, #12]
 8006798:	b13c      	cbz	r4, 80067aa <_Bfree+0x3a>
 800679a:	69eb      	ldr	r3, [r5, #28]
 800679c:	6862      	ldr	r2, [r4, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067a4:	6021      	str	r1, [r4, #0]
 80067a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	08009066 	.word	0x08009066
 80067b0:	080090e6 	.word	0x080090e6

080067b4 <__multadd>:
 80067b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b8:	690d      	ldr	r5, [r1, #16]
 80067ba:	4607      	mov	r7, r0
 80067bc:	460c      	mov	r4, r1
 80067be:	461e      	mov	r6, r3
 80067c0:	f101 0c14 	add.w	ip, r1, #20
 80067c4:	2000      	movs	r0, #0
 80067c6:	f8dc 3000 	ldr.w	r3, [ip]
 80067ca:	b299      	uxth	r1, r3
 80067cc:	fb02 6101 	mla	r1, r2, r1, r6
 80067d0:	0c1e      	lsrs	r6, r3, #16
 80067d2:	0c0b      	lsrs	r3, r1, #16
 80067d4:	fb02 3306 	mla	r3, r2, r6, r3
 80067d8:	b289      	uxth	r1, r1
 80067da:	3001      	adds	r0, #1
 80067dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80067e0:	4285      	cmp	r5, r0
 80067e2:	f84c 1b04 	str.w	r1, [ip], #4
 80067e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80067ea:	dcec      	bgt.n	80067c6 <__multadd+0x12>
 80067ec:	b30e      	cbz	r6, 8006832 <__multadd+0x7e>
 80067ee:	68a3      	ldr	r3, [r4, #8]
 80067f0:	42ab      	cmp	r3, r5
 80067f2:	dc19      	bgt.n	8006828 <__multadd+0x74>
 80067f4:	6861      	ldr	r1, [r4, #4]
 80067f6:	4638      	mov	r0, r7
 80067f8:	3101      	adds	r1, #1
 80067fa:	f7ff ff79 	bl	80066f0 <_Balloc>
 80067fe:	4680      	mov	r8, r0
 8006800:	b928      	cbnz	r0, 800680e <__multadd+0x5a>
 8006802:	4602      	mov	r2, r0
 8006804:	4b0c      	ldr	r3, [pc, #48]	@ (8006838 <__multadd+0x84>)
 8006806:	480d      	ldr	r0, [pc, #52]	@ (800683c <__multadd+0x88>)
 8006808:	21ba      	movs	r1, #186	@ 0xba
 800680a:	f001 fce3 	bl	80081d4 <__assert_func>
 800680e:	6922      	ldr	r2, [r4, #16]
 8006810:	3202      	adds	r2, #2
 8006812:	f104 010c 	add.w	r1, r4, #12
 8006816:	0092      	lsls	r2, r2, #2
 8006818:	300c      	adds	r0, #12
 800681a:	f001 fcc7 	bl	80081ac <memcpy>
 800681e:	4621      	mov	r1, r4
 8006820:	4638      	mov	r0, r7
 8006822:	f7ff ffa5 	bl	8006770 <_Bfree>
 8006826:	4644      	mov	r4, r8
 8006828:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800682c:	3501      	adds	r5, #1
 800682e:	615e      	str	r6, [r3, #20]
 8006830:	6125      	str	r5, [r4, #16]
 8006832:	4620      	mov	r0, r4
 8006834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006838:	080090d5 	.word	0x080090d5
 800683c:	080090e6 	.word	0x080090e6

08006840 <__s2b>:
 8006840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006844:	460c      	mov	r4, r1
 8006846:	4615      	mov	r5, r2
 8006848:	461f      	mov	r7, r3
 800684a:	2209      	movs	r2, #9
 800684c:	3308      	adds	r3, #8
 800684e:	4606      	mov	r6, r0
 8006850:	fb93 f3f2 	sdiv	r3, r3, r2
 8006854:	2100      	movs	r1, #0
 8006856:	2201      	movs	r2, #1
 8006858:	429a      	cmp	r2, r3
 800685a:	db09      	blt.n	8006870 <__s2b+0x30>
 800685c:	4630      	mov	r0, r6
 800685e:	f7ff ff47 	bl	80066f0 <_Balloc>
 8006862:	b940      	cbnz	r0, 8006876 <__s2b+0x36>
 8006864:	4602      	mov	r2, r0
 8006866:	4b19      	ldr	r3, [pc, #100]	@ (80068cc <__s2b+0x8c>)
 8006868:	4819      	ldr	r0, [pc, #100]	@ (80068d0 <__s2b+0x90>)
 800686a:	21d3      	movs	r1, #211	@ 0xd3
 800686c:	f001 fcb2 	bl	80081d4 <__assert_func>
 8006870:	0052      	lsls	r2, r2, #1
 8006872:	3101      	adds	r1, #1
 8006874:	e7f0      	b.n	8006858 <__s2b+0x18>
 8006876:	9b08      	ldr	r3, [sp, #32]
 8006878:	6143      	str	r3, [r0, #20]
 800687a:	2d09      	cmp	r5, #9
 800687c:	f04f 0301 	mov.w	r3, #1
 8006880:	6103      	str	r3, [r0, #16]
 8006882:	dd16      	ble.n	80068b2 <__s2b+0x72>
 8006884:	f104 0909 	add.w	r9, r4, #9
 8006888:	46c8      	mov	r8, r9
 800688a:	442c      	add	r4, r5
 800688c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006890:	4601      	mov	r1, r0
 8006892:	3b30      	subs	r3, #48	@ 0x30
 8006894:	220a      	movs	r2, #10
 8006896:	4630      	mov	r0, r6
 8006898:	f7ff ff8c 	bl	80067b4 <__multadd>
 800689c:	45a0      	cmp	r8, r4
 800689e:	d1f5      	bne.n	800688c <__s2b+0x4c>
 80068a0:	f1a5 0408 	sub.w	r4, r5, #8
 80068a4:	444c      	add	r4, r9
 80068a6:	1b2d      	subs	r5, r5, r4
 80068a8:	1963      	adds	r3, r4, r5
 80068aa:	42bb      	cmp	r3, r7
 80068ac:	db04      	blt.n	80068b8 <__s2b+0x78>
 80068ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068b2:	340a      	adds	r4, #10
 80068b4:	2509      	movs	r5, #9
 80068b6:	e7f6      	b.n	80068a6 <__s2b+0x66>
 80068b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80068bc:	4601      	mov	r1, r0
 80068be:	3b30      	subs	r3, #48	@ 0x30
 80068c0:	220a      	movs	r2, #10
 80068c2:	4630      	mov	r0, r6
 80068c4:	f7ff ff76 	bl	80067b4 <__multadd>
 80068c8:	e7ee      	b.n	80068a8 <__s2b+0x68>
 80068ca:	bf00      	nop
 80068cc:	080090d5 	.word	0x080090d5
 80068d0:	080090e6 	.word	0x080090e6

080068d4 <__hi0bits>:
 80068d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80068d8:	4603      	mov	r3, r0
 80068da:	bf36      	itet	cc
 80068dc:	0403      	lslcc	r3, r0, #16
 80068de:	2000      	movcs	r0, #0
 80068e0:	2010      	movcc	r0, #16
 80068e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068e6:	bf3c      	itt	cc
 80068e8:	021b      	lslcc	r3, r3, #8
 80068ea:	3008      	addcc	r0, #8
 80068ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068f0:	bf3c      	itt	cc
 80068f2:	011b      	lslcc	r3, r3, #4
 80068f4:	3004      	addcc	r0, #4
 80068f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068fa:	bf3c      	itt	cc
 80068fc:	009b      	lslcc	r3, r3, #2
 80068fe:	3002      	addcc	r0, #2
 8006900:	2b00      	cmp	r3, #0
 8006902:	db05      	blt.n	8006910 <__hi0bits+0x3c>
 8006904:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006908:	f100 0001 	add.w	r0, r0, #1
 800690c:	bf08      	it	eq
 800690e:	2020      	moveq	r0, #32
 8006910:	4770      	bx	lr

08006912 <__lo0bits>:
 8006912:	6803      	ldr	r3, [r0, #0]
 8006914:	4602      	mov	r2, r0
 8006916:	f013 0007 	ands.w	r0, r3, #7
 800691a:	d00b      	beq.n	8006934 <__lo0bits+0x22>
 800691c:	07d9      	lsls	r1, r3, #31
 800691e:	d421      	bmi.n	8006964 <__lo0bits+0x52>
 8006920:	0798      	lsls	r0, r3, #30
 8006922:	bf49      	itett	mi
 8006924:	085b      	lsrmi	r3, r3, #1
 8006926:	089b      	lsrpl	r3, r3, #2
 8006928:	2001      	movmi	r0, #1
 800692a:	6013      	strmi	r3, [r2, #0]
 800692c:	bf5c      	itt	pl
 800692e:	6013      	strpl	r3, [r2, #0]
 8006930:	2002      	movpl	r0, #2
 8006932:	4770      	bx	lr
 8006934:	b299      	uxth	r1, r3
 8006936:	b909      	cbnz	r1, 800693c <__lo0bits+0x2a>
 8006938:	0c1b      	lsrs	r3, r3, #16
 800693a:	2010      	movs	r0, #16
 800693c:	b2d9      	uxtb	r1, r3
 800693e:	b909      	cbnz	r1, 8006944 <__lo0bits+0x32>
 8006940:	3008      	adds	r0, #8
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	0719      	lsls	r1, r3, #28
 8006946:	bf04      	itt	eq
 8006948:	091b      	lsreq	r3, r3, #4
 800694a:	3004      	addeq	r0, #4
 800694c:	0799      	lsls	r1, r3, #30
 800694e:	bf04      	itt	eq
 8006950:	089b      	lsreq	r3, r3, #2
 8006952:	3002      	addeq	r0, #2
 8006954:	07d9      	lsls	r1, r3, #31
 8006956:	d403      	bmi.n	8006960 <__lo0bits+0x4e>
 8006958:	085b      	lsrs	r3, r3, #1
 800695a:	f100 0001 	add.w	r0, r0, #1
 800695e:	d003      	beq.n	8006968 <__lo0bits+0x56>
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	4770      	bx	lr
 8006964:	2000      	movs	r0, #0
 8006966:	4770      	bx	lr
 8006968:	2020      	movs	r0, #32
 800696a:	4770      	bx	lr

0800696c <__i2b>:
 800696c:	b510      	push	{r4, lr}
 800696e:	460c      	mov	r4, r1
 8006970:	2101      	movs	r1, #1
 8006972:	f7ff febd 	bl	80066f0 <_Balloc>
 8006976:	4602      	mov	r2, r0
 8006978:	b928      	cbnz	r0, 8006986 <__i2b+0x1a>
 800697a:	4b05      	ldr	r3, [pc, #20]	@ (8006990 <__i2b+0x24>)
 800697c:	4805      	ldr	r0, [pc, #20]	@ (8006994 <__i2b+0x28>)
 800697e:	f240 1145 	movw	r1, #325	@ 0x145
 8006982:	f001 fc27 	bl	80081d4 <__assert_func>
 8006986:	2301      	movs	r3, #1
 8006988:	6144      	str	r4, [r0, #20]
 800698a:	6103      	str	r3, [r0, #16]
 800698c:	bd10      	pop	{r4, pc}
 800698e:	bf00      	nop
 8006990:	080090d5 	.word	0x080090d5
 8006994:	080090e6 	.word	0x080090e6

08006998 <__multiply>:
 8006998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	4617      	mov	r7, r2
 800699e:	690a      	ldr	r2, [r1, #16]
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	bfa8      	it	ge
 80069a6:	463b      	movge	r3, r7
 80069a8:	4689      	mov	r9, r1
 80069aa:	bfa4      	itt	ge
 80069ac:	460f      	movge	r7, r1
 80069ae:	4699      	movge	r9, r3
 80069b0:	693d      	ldr	r5, [r7, #16]
 80069b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	eb05 060a 	add.w	r6, r5, sl
 80069be:	42b3      	cmp	r3, r6
 80069c0:	b085      	sub	sp, #20
 80069c2:	bfb8      	it	lt
 80069c4:	3101      	addlt	r1, #1
 80069c6:	f7ff fe93 	bl	80066f0 <_Balloc>
 80069ca:	b930      	cbnz	r0, 80069da <__multiply+0x42>
 80069cc:	4602      	mov	r2, r0
 80069ce:	4b41      	ldr	r3, [pc, #260]	@ (8006ad4 <__multiply+0x13c>)
 80069d0:	4841      	ldr	r0, [pc, #260]	@ (8006ad8 <__multiply+0x140>)
 80069d2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80069d6:	f001 fbfd 	bl	80081d4 <__assert_func>
 80069da:	f100 0414 	add.w	r4, r0, #20
 80069de:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80069e2:	4623      	mov	r3, r4
 80069e4:	2200      	movs	r2, #0
 80069e6:	4573      	cmp	r3, lr
 80069e8:	d320      	bcc.n	8006a2c <__multiply+0x94>
 80069ea:	f107 0814 	add.w	r8, r7, #20
 80069ee:	f109 0114 	add.w	r1, r9, #20
 80069f2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80069f6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80069fa:	9302      	str	r3, [sp, #8]
 80069fc:	1beb      	subs	r3, r5, r7
 80069fe:	3b15      	subs	r3, #21
 8006a00:	f023 0303 	bic.w	r3, r3, #3
 8006a04:	3304      	adds	r3, #4
 8006a06:	3715      	adds	r7, #21
 8006a08:	42bd      	cmp	r5, r7
 8006a0a:	bf38      	it	cc
 8006a0c:	2304      	movcc	r3, #4
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	9b02      	ldr	r3, [sp, #8]
 8006a12:	9103      	str	r1, [sp, #12]
 8006a14:	428b      	cmp	r3, r1
 8006a16:	d80c      	bhi.n	8006a32 <__multiply+0x9a>
 8006a18:	2e00      	cmp	r6, #0
 8006a1a:	dd03      	ble.n	8006a24 <__multiply+0x8c>
 8006a1c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d055      	beq.n	8006ad0 <__multiply+0x138>
 8006a24:	6106      	str	r6, [r0, #16]
 8006a26:	b005      	add	sp, #20
 8006a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2c:	f843 2b04 	str.w	r2, [r3], #4
 8006a30:	e7d9      	b.n	80069e6 <__multiply+0x4e>
 8006a32:	f8b1 a000 	ldrh.w	sl, [r1]
 8006a36:	f1ba 0f00 	cmp.w	sl, #0
 8006a3a:	d01f      	beq.n	8006a7c <__multiply+0xe4>
 8006a3c:	46c4      	mov	ip, r8
 8006a3e:	46a1      	mov	r9, r4
 8006a40:	2700      	movs	r7, #0
 8006a42:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a46:	f8d9 3000 	ldr.w	r3, [r9]
 8006a4a:	fa1f fb82 	uxth.w	fp, r2
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	fb0a 330b 	mla	r3, sl, fp, r3
 8006a54:	443b      	add	r3, r7
 8006a56:	f8d9 7000 	ldr.w	r7, [r9]
 8006a5a:	0c12      	lsrs	r2, r2, #16
 8006a5c:	0c3f      	lsrs	r7, r7, #16
 8006a5e:	fb0a 7202 	mla	r2, sl, r2, r7
 8006a62:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a6c:	4565      	cmp	r5, ip
 8006a6e:	f849 3b04 	str.w	r3, [r9], #4
 8006a72:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006a76:	d8e4      	bhi.n	8006a42 <__multiply+0xaa>
 8006a78:	9b01      	ldr	r3, [sp, #4]
 8006a7a:	50e7      	str	r7, [r4, r3]
 8006a7c:	9b03      	ldr	r3, [sp, #12]
 8006a7e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006a82:	3104      	adds	r1, #4
 8006a84:	f1b9 0f00 	cmp.w	r9, #0
 8006a88:	d020      	beq.n	8006acc <__multiply+0x134>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	4647      	mov	r7, r8
 8006a8e:	46a4      	mov	ip, r4
 8006a90:	f04f 0a00 	mov.w	sl, #0
 8006a94:	f8b7 b000 	ldrh.w	fp, [r7]
 8006a98:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006a9c:	fb09 220b 	mla	r2, r9, fp, r2
 8006aa0:	4452      	add	r2, sl
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aa8:	f84c 3b04 	str.w	r3, [ip], #4
 8006aac:	f857 3b04 	ldr.w	r3, [r7], #4
 8006ab0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ab4:	f8bc 3000 	ldrh.w	r3, [ip]
 8006ab8:	fb09 330a 	mla	r3, r9, sl, r3
 8006abc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006ac0:	42bd      	cmp	r5, r7
 8006ac2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ac6:	d8e5      	bhi.n	8006a94 <__multiply+0xfc>
 8006ac8:	9a01      	ldr	r2, [sp, #4]
 8006aca:	50a3      	str	r3, [r4, r2]
 8006acc:	3404      	adds	r4, #4
 8006ace:	e79f      	b.n	8006a10 <__multiply+0x78>
 8006ad0:	3e01      	subs	r6, #1
 8006ad2:	e7a1      	b.n	8006a18 <__multiply+0x80>
 8006ad4:	080090d5 	.word	0x080090d5
 8006ad8:	080090e6 	.word	0x080090e6

08006adc <__pow5mult>:
 8006adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ae0:	4615      	mov	r5, r2
 8006ae2:	f012 0203 	ands.w	r2, r2, #3
 8006ae6:	4607      	mov	r7, r0
 8006ae8:	460e      	mov	r6, r1
 8006aea:	d007      	beq.n	8006afc <__pow5mult+0x20>
 8006aec:	4c25      	ldr	r4, [pc, #148]	@ (8006b84 <__pow5mult+0xa8>)
 8006aee:	3a01      	subs	r2, #1
 8006af0:	2300      	movs	r3, #0
 8006af2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006af6:	f7ff fe5d 	bl	80067b4 <__multadd>
 8006afa:	4606      	mov	r6, r0
 8006afc:	10ad      	asrs	r5, r5, #2
 8006afe:	d03d      	beq.n	8006b7c <__pow5mult+0xa0>
 8006b00:	69fc      	ldr	r4, [r7, #28]
 8006b02:	b97c      	cbnz	r4, 8006b24 <__pow5mult+0x48>
 8006b04:	2010      	movs	r0, #16
 8006b06:	f7ff fd3d 	bl	8006584 <malloc>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	61f8      	str	r0, [r7, #28]
 8006b0e:	b928      	cbnz	r0, 8006b1c <__pow5mult+0x40>
 8006b10:	4b1d      	ldr	r3, [pc, #116]	@ (8006b88 <__pow5mult+0xac>)
 8006b12:	481e      	ldr	r0, [pc, #120]	@ (8006b8c <__pow5mult+0xb0>)
 8006b14:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006b18:	f001 fb5c 	bl	80081d4 <__assert_func>
 8006b1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b20:	6004      	str	r4, [r0, #0]
 8006b22:	60c4      	str	r4, [r0, #12]
 8006b24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006b28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b2c:	b94c      	cbnz	r4, 8006b42 <__pow5mult+0x66>
 8006b2e:	f240 2171 	movw	r1, #625	@ 0x271
 8006b32:	4638      	mov	r0, r7
 8006b34:	f7ff ff1a 	bl	800696c <__i2b>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b3e:	4604      	mov	r4, r0
 8006b40:	6003      	str	r3, [r0, #0]
 8006b42:	f04f 0900 	mov.w	r9, #0
 8006b46:	07eb      	lsls	r3, r5, #31
 8006b48:	d50a      	bpl.n	8006b60 <__pow5mult+0x84>
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	4638      	mov	r0, r7
 8006b50:	f7ff ff22 	bl	8006998 <__multiply>
 8006b54:	4631      	mov	r1, r6
 8006b56:	4680      	mov	r8, r0
 8006b58:	4638      	mov	r0, r7
 8006b5a:	f7ff fe09 	bl	8006770 <_Bfree>
 8006b5e:	4646      	mov	r6, r8
 8006b60:	106d      	asrs	r5, r5, #1
 8006b62:	d00b      	beq.n	8006b7c <__pow5mult+0xa0>
 8006b64:	6820      	ldr	r0, [r4, #0]
 8006b66:	b938      	cbnz	r0, 8006b78 <__pow5mult+0x9c>
 8006b68:	4622      	mov	r2, r4
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	f7ff ff13 	bl	8006998 <__multiply>
 8006b72:	6020      	str	r0, [r4, #0]
 8006b74:	f8c0 9000 	str.w	r9, [r0]
 8006b78:	4604      	mov	r4, r0
 8006b7a:	e7e4      	b.n	8006b46 <__pow5mult+0x6a>
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b82:	bf00      	nop
 8006b84:	080091f8 	.word	0x080091f8
 8006b88:	08009066 	.word	0x08009066
 8006b8c:	080090e6 	.word	0x080090e6

08006b90 <__lshift>:
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	460c      	mov	r4, r1
 8006b96:	6849      	ldr	r1, [r1, #4]
 8006b98:	6923      	ldr	r3, [r4, #16]
 8006b9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b9e:	68a3      	ldr	r3, [r4, #8]
 8006ba0:	4607      	mov	r7, r0
 8006ba2:	4691      	mov	r9, r2
 8006ba4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ba8:	f108 0601 	add.w	r6, r8, #1
 8006bac:	42b3      	cmp	r3, r6
 8006bae:	db0b      	blt.n	8006bc8 <__lshift+0x38>
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	f7ff fd9d 	bl	80066f0 <_Balloc>
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	b948      	cbnz	r0, 8006bce <__lshift+0x3e>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	4b28      	ldr	r3, [pc, #160]	@ (8006c60 <__lshift+0xd0>)
 8006bbe:	4829      	ldr	r0, [pc, #164]	@ (8006c64 <__lshift+0xd4>)
 8006bc0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006bc4:	f001 fb06 	bl	80081d4 <__assert_func>
 8006bc8:	3101      	adds	r1, #1
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	e7ee      	b.n	8006bac <__lshift+0x1c>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f100 0114 	add.w	r1, r0, #20
 8006bd4:	f100 0210 	add.w	r2, r0, #16
 8006bd8:	4618      	mov	r0, r3
 8006bda:	4553      	cmp	r3, sl
 8006bdc:	db33      	blt.n	8006c46 <__lshift+0xb6>
 8006bde:	6920      	ldr	r0, [r4, #16]
 8006be0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006be4:	f104 0314 	add.w	r3, r4, #20
 8006be8:	f019 091f 	ands.w	r9, r9, #31
 8006bec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006bf4:	d02b      	beq.n	8006c4e <__lshift+0xbe>
 8006bf6:	f1c9 0e20 	rsb	lr, r9, #32
 8006bfa:	468a      	mov	sl, r1
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	fa00 f009 	lsl.w	r0, r0, r9
 8006c04:	4310      	orrs	r0, r2
 8006c06:	f84a 0b04 	str.w	r0, [sl], #4
 8006c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c0e:	459c      	cmp	ip, r3
 8006c10:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c14:	d8f3      	bhi.n	8006bfe <__lshift+0x6e>
 8006c16:	ebac 0304 	sub.w	r3, ip, r4
 8006c1a:	3b15      	subs	r3, #21
 8006c1c:	f023 0303 	bic.w	r3, r3, #3
 8006c20:	3304      	adds	r3, #4
 8006c22:	f104 0015 	add.w	r0, r4, #21
 8006c26:	4560      	cmp	r0, ip
 8006c28:	bf88      	it	hi
 8006c2a:	2304      	movhi	r3, #4
 8006c2c:	50ca      	str	r2, [r1, r3]
 8006c2e:	b10a      	cbz	r2, 8006c34 <__lshift+0xa4>
 8006c30:	f108 0602 	add.w	r6, r8, #2
 8006c34:	3e01      	subs	r6, #1
 8006c36:	4638      	mov	r0, r7
 8006c38:	612e      	str	r6, [r5, #16]
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	f7ff fd98 	bl	8006770 <_Bfree>
 8006c40:	4628      	mov	r0, r5
 8006c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c46:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	e7c5      	b.n	8006bda <__lshift+0x4a>
 8006c4e:	3904      	subs	r1, #4
 8006c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c54:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c58:	459c      	cmp	ip, r3
 8006c5a:	d8f9      	bhi.n	8006c50 <__lshift+0xc0>
 8006c5c:	e7ea      	b.n	8006c34 <__lshift+0xa4>
 8006c5e:	bf00      	nop
 8006c60:	080090d5 	.word	0x080090d5
 8006c64:	080090e6 	.word	0x080090e6

08006c68 <__mcmp>:
 8006c68:	690a      	ldr	r2, [r1, #16]
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	6900      	ldr	r0, [r0, #16]
 8006c6e:	1a80      	subs	r0, r0, r2
 8006c70:	b530      	push	{r4, r5, lr}
 8006c72:	d10e      	bne.n	8006c92 <__mcmp+0x2a>
 8006c74:	3314      	adds	r3, #20
 8006c76:	3114      	adds	r1, #20
 8006c78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006c7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006c80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c88:	4295      	cmp	r5, r2
 8006c8a:	d003      	beq.n	8006c94 <__mcmp+0x2c>
 8006c8c:	d205      	bcs.n	8006c9a <__mcmp+0x32>
 8006c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c92:	bd30      	pop	{r4, r5, pc}
 8006c94:	42a3      	cmp	r3, r4
 8006c96:	d3f3      	bcc.n	8006c80 <__mcmp+0x18>
 8006c98:	e7fb      	b.n	8006c92 <__mcmp+0x2a>
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	e7f9      	b.n	8006c92 <__mcmp+0x2a>
	...

08006ca0 <__mdiff>:
 8006ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca4:	4689      	mov	r9, r1
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	4611      	mov	r1, r2
 8006caa:	4648      	mov	r0, r9
 8006cac:	4614      	mov	r4, r2
 8006cae:	f7ff ffdb 	bl	8006c68 <__mcmp>
 8006cb2:	1e05      	subs	r5, r0, #0
 8006cb4:	d112      	bne.n	8006cdc <__mdiff+0x3c>
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f7ff fd19 	bl	80066f0 <_Balloc>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	b928      	cbnz	r0, 8006cce <__mdiff+0x2e>
 8006cc2:	4b3f      	ldr	r3, [pc, #252]	@ (8006dc0 <__mdiff+0x120>)
 8006cc4:	f240 2137 	movw	r1, #567	@ 0x237
 8006cc8:	483e      	ldr	r0, [pc, #248]	@ (8006dc4 <__mdiff+0x124>)
 8006cca:	f001 fa83 	bl	80081d4 <__assert_func>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	b003      	add	sp, #12
 8006cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cdc:	bfbc      	itt	lt
 8006cde:	464b      	movlt	r3, r9
 8006ce0:	46a1      	movlt	r9, r4
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ce8:	bfba      	itte	lt
 8006cea:	461c      	movlt	r4, r3
 8006cec:	2501      	movlt	r5, #1
 8006cee:	2500      	movge	r5, #0
 8006cf0:	f7ff fcfe 	bl	80066f0 <_Balloc>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	b918      	cbnz	r0, 8006d00 <__mdiff+0x60>
 8006cf8:	4b31      	ldr	r3, [pc, #196]	@ (8006dc0 <__mdiff+0x120>)
 8006cfa:	f240 2145 	movw	r1, #581	@ 0x245
 8006cfe:	e7e3      	b.n	8006cc8 <__mdiff+0x28>
 8006d00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006d04:	6926      	ldr	r6, [r4, #16]
 8006d06:	60c5      	str	r5, [r0, #12]
 8006d08:	f109 0310 	add.w	r3, r9, #16
 8006d0c:	f109 0514 	add.w	r5, r9, #20
 8006d10:	f104 0e14 	add.w	lr, r4, #20
 8006d14:	f100 0b14 	add.w	fp, r0, #20
 8006d18:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006d1c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006d20:	9301      	str	r3, [sp, #4]
 8006d22:	46d9      	mov	r9, fp
 8006d24:	f04f 0c00 	mov.w	ip, #0
 8006d28:	9b01      	ldr	r3, [sp, #4]
 8006d2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006d2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	fa1f f38a 	uxth.w	r3, sl
 8006d38:	4619      	mov	r1, r3
 8006d3a:	b283      	uxth	r3, r0
 8006d3c:	1acb      	subs	r3, r1, r3
 8006d3e:	0c00      	lsrs	r0, r0, #16
 8006d40:	4463      	add	r3, ip
 8006d42:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006d46:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006d50:	4576      	cmp	r6, lr
 8006d52:	f849 3b04 	str.w	r3, [r9], #4
 8006d56:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d5a:	d8e5      	bhi.n	8006d28 <__mdiff+0x88>
 8006d5c:	1b33      	subs	r3, r6, r4
 8006d5e:	3b15      	subs	r3, #21
 8006d60:	f023 0303 	bic.w	r3, r3, #3
 8006d64:	3415      	adds	r4, #21
 8006d66:	3304      	adds	r3, #4
 8006d68:	42a6      	cmp	r6, r4
 8006d6a:	bf38      	it	cc
 8006d6c:	2304      	movcc	r3, #4
 8006d6e:	441d      	add	r5, r3
 8006d70:	445b      	add	r3, fp
 8006d72:	461e      	mov	r6, r3
 8006d74:	462c      	mov	r4, r5
 8006d76:	4544      	cmp	r4, r8
 8006d78:	d30e      	bcc.n	8006d98 <__mdiff+0xf8>
 8006d7a:	f108 0103 	add.w	r1, r8, #3
 8006d7e:	1b49      	subs	r1, r1, r5
 8006d80:	f021 0103 	bic.w	r1, r1, #3
 8006d84:	3d03      	subs	r5, #3
 8006d86:	45a8      	cmp	r8, r5
 8006d88:	bf38      	it	cc
 8006d8a:	2100      	movcc	r1, #0
 8006d8c:	440b      	add	r3, r1
 8006d8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d92:	b191      	cbz	r1, 8006dba <__mdiff+0x11a>
 8006d94:	6117      	str	r7, [r2, #16]
 8006d96:	e79d      	b.n	8006cd4 <__mdiff+0x34>
 8006d98:	f854 1b04 	ldr.w	r1, [r4], #4
 8006d9c:	46e6      	mov	lr, ip
 8006d9e:	0c08      	lsrs	r0, r1, #16
 8006da0:	fa1c fc81 	uxtah	ip, ip, r1
 8006da4:	4471      	add	r1, lr
 8006da6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006daa:	b289      	uxth	r1, r1
 8006dac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006db0:	f846 1b04 	str.w	r1, [r6], #4
 8006db4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006db8:	e7dd      	b.n	8006d76 <__mdiff+0xd6>
 8006dba:	3f01      	subs	r7, #1
 8006dbc:	e7e7      	b.n	8006d8e <__mdiff+0xee>
 8006dbe:	bf00      	nop
 8006dc0:	080090d5 	.word	0x080090d5
 8006dc4:	080090e6 	.word	0x080090e6

08006dc8 <__ulp>:
 8006dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8006e04 <__ulp+0x3c>)
 8006dca:	400b      	ands	r3, r1
 8006dcc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	dc08      	bgt.n	8006de6 <__ulp+0x1e>
 8006dd4:	425b      	negs	r3, r3
 8006dd6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006dda:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006dde:	da04      	bge.n	8006dea <__ulp+0x22>
 8006de0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006de4:	4113      	asrs	r3, r2
 8006de6:	2200      	movs	r2, #0
 8006de8:	e008      	b.n	8006dfc <__ulp+0x34>
 8006dea:	f1a2 0314 	sub.w	r3, r2, #20
 8006dee:	2b1e      	cmp	r3, #30
 8006df0:	bfda      	itte	le
 8006df2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006df6:	40da      	lsrle	r2, r3
 8006df8:	2201      	movgt	r2, #1
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	7ff00000 	.word	0x7ff00000

08006e08 <__b2d>:
 8006e08:	6902      	ldr	r2, [r0, #16]
 8006e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0c:	f100 0614 	add.w	r6, r0, #20
 8006e10:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006e14:	4f20      	ldr	r7, [pc, #128]	@ (8006e98 <__b2d+0x90>)
 8006e16:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f7ff fd5a 	bl	80068d4 <__hi0bits>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b0a      	cmp	r3, #10
 8006e24:	f1c0 0020 	rsb	r0, r0, #32
 8006e28:	f1a2 0504 	sub.w	r5, r2, #4
 8006e2c:	6008      	str	r0, [r1, #0]
 8006e2e:	dc13      	bgt.n	8006e58 <__b2d+0x50>
 8006e30:	42ae      	cmp	r6, r5
 8006e32:	bf38      	it	cc
 8006e34:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006e38:	f1c3 0c0b 	rsb	ip, r3, #11
 8006e3c:	bf28      	it	cs
 8006e3e:	2200      	movcs	r2, #0
 8006e40:	3315      	adds	r3, #21
 8006e42:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006e46:	fa04 f303 	lsl.w	r3, r4, r3
 8006e4a:	fa22 f20c 	lsr.w	r2, r2, ip
 8006e4e:	ea4e 0107 	orr.w	r1, lr, r7
 8006e52:	431a      	orrs	r2, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e58:	42ae      	cmp	r6, r5
 8006e5a:	bf36      	itet	cc
 8006e5c:	f1a2 0508 	subcc.w	r5, r2, #8
 8006e60:	2200      	movcs	r2, #0
 8006e62:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006e66:	3b0b      	subs	r3, #11
 8006e68:	d012      	beq.n	8006e90 <__b2d+0x88>
 8006e6a:	f1c3 0720 	rsb	r7, r3, #32
 8006e6e:	fa22 f107 	lsr.w	r1, r2, r7
 8006e72:	409c      	lsls	r4, r3
 8006e74:	430c      	orrs	r4, r1
 8006e76:	42b5      	cmp	r5, r6
 8006e78:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006e7c:	bf8c      	ite	hi
 8006e7e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006e82:	2400      	movls	r4, #0
 8006e84:	409a      	lsls	r2, r3
 8006e86:	40fc      	lsrs	r4, r7
 8006e88:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006e8c:	4322      	orrs	r2, r4
 8006e8e:	e7e1      	b.n	8006e54 <__b2d+0x4c>
 8006e90:	ea44 0107 	orr.w	r1, r4, r7
 8006e94:	e7de      	b.n	8006e54 <__b2d+0x4c>
 8006e96:	bf00      	nop
 8006e98:	3ff00000 	.word	0x3ff00000

08006e9c <__d2b>:
 8006e9c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	9e08      	ldr	r6, [sp, #32]
 8006ea4:	4690      	mov	r8, r2
 8006ea6:	4699      	mov	r9, r3
 8006ea8:	f7ff fc22 	bl	80066f0 <_Balloc>
 8006eac:	4604      	mov	r4, r0
 8006eae:	b930      	cbnz	r0, 8006ebe <__d2b+0x22>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	4b24      	ldr	r3, [pc, #144]	@ (8006f44 <__d2b+0xa8>)
 8006eb4:	4824      	ldr	r0, [pc, #144]	@ (8006f48 <__d2b+0xac>)
 8006eb6:	f240 310f 	movw	r1, #783	@ 0x30f
 8006eba:	f001 f98b 	bl	80081d4 <__assert_func>
 8006ebe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ec2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ec6:	b10d      	cbz	r5, 8006ecc <__d2b+0x30>
 8006ec8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	f1b8 0300 	subs.w	r3, r8, #0
 8006ed2:	d024      	beq.n	8006f1e <__d2b+0x82>
 8006ed4:	4668      	mov	r0, sp
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	f7ff fd1b 	bl	8006912 <__lo0bits>
 8006edc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ee0:	b1d8      	cbz	r0, 8006f1a <__d2b+0x7e>
 8006ee2:	f1c0 0320 	rsb	r3, r0, #32
 8006ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eea:	430b      	orrs	r3, r1
 8006eec:	40c2      	lsrs	r2, r0
 8006eee:	6163      	str	r3, [r4, #20]
 8006ef0:	9201      	str	r2, [sp, #4]
 8006ef2:	9b01      	ldr	r3, [sp, #4]
 8006ef4:	61a3      	str	r3, [r4, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	bf0c      	ite	eq
 8006efa:	2201      	moveq	r2, #1
 8006efc:	2202      	movne	r2, #2
 8006efe:	6122      	str	r2, [r4, #16]
 8006f00:	b1ad      	cbz	r5, 8006f2e <__d2b+0x92>
 8006f02:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006f06:	4405      	add	r5, r0
 8006f08:	6035      	str	r5, [r6, #0]
 8006f0a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f10:	6018      	str	r0, [r3, #0]
 8006f12:	4620      	mov	r0, r4
 8006f14:	b002      	add	sp, #8
 8006f16:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006f1a:	6161      	str	r1, [r4, #20]
 8006f1c:	e7e9      	b.n	8006ef2 <__d2b+0x56>
 8006f1e:	a801      	add	r0, sp, #4
 8006f20:	f7ff fcf7 	bl	8006912 <__lo0bits>
 8006f24:	9b01      	ldr	r3, [sp, #4]
 8006f26:	6163      	str	r3, [r4, #20]
 8006f28:	3020      	adds	r0, #32
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	e7e7      	b.n	8006efe <__d2b+0x62>
 8006f2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006f36:	6030      	str	r0, [r6, #0]
 8006f38:	6918      	ldr	r0, [r3, #16]
 8006f3a:	f7ff fccb 	bl	80068d4 <__hi0bits>
 8006f3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f42:	e7e4      	b.n	8006f0e <__d2b+0x72>
 8006f44:	080090d5 	.word	0x080090d5
 8006f48:	080090e6 	.word	0x080090e6

08006f4c <__ratio>:
 8006f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f50:	b085      	sub	sp, #20
 8006f52:	e9cd 1000 	strd	r1, r0, [sp]
 8006f56:	a902      	add	r1, sp, #8
 8006f58:	f7ff ff56 	bl	8006e08 <__b2d>
 8006f5c:	468b      	mov	fp, r1
 8006f5e:	4606      	mov	r6, r0
 8006f60:	460f      	mov	r7, r1
 8006f62:	9800      	ldr	r0, [sp, #0]
 8006f64:	a903      	add	r1, sp, #12
 8006f66:	f7ff ff4f 	bl	8006e08 <__b2d>
 8006f6a:	9b01      	ldr	r3, [sp, #4]
 8006f6c:	4689      	mov	r9, r1
 8006f6e:	460d      	mov	r5, r1
 8006f70:	6919      	ldr	r1, [r3, #16]
 8006f72:	9b00      	ldr	r3, [sp, #0]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	1ac9      	subs	r1, r1, r3
 8006f78:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006f7c:	1a9b      	subs	r3, r3, r2
 8006f7e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	bfcd      	iteet	gt
 8006f86:	463a      	movgt	r2, r7
 8006f88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006f8c:	462a      	movle	r2, r5
 8006f8e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006f92:	bfd8      	it	le
 8006f94:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006f98:	4604      	mov	r4, r0
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	464b      	mov	r3, r9
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	4659      	mov	r1, fp
 8006fa2:	f7f9 fc73 	bl	800088c <__aeabi_ddiv>
 8006fa6:	b005      	add	sp, #20
 8006fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006fac <__copybits>:
 8006fac:	3901      	subs	r1, #1
 8006fae:	b570      	push	{r4, r5, r6, lr}
 8006fb0:	1149      	asrs	r1, r1, #5
 8006fb2:	6914      	ldr	r4, [r2, #16]
 8006fb4:	3101      	adds	r1, #1
 8006fb6:	f102 0314 	add.w	r3, r2, #20
 8006fba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006fbe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006fc2:	1f05      	subs	r5, r0, #4
 8006fc4:	42a3      	cmp	r3, r4
 8006fc6:	d30c      	bcc.n	8006fe2 <__copybits+0x36>
 8006fc8:	1aa3      	subs	r3, r4, r2
 8006fca:	3b11      	subs	r3, #17
 8006fcc:	f023 0303 	bic.w	r3, r3, #3
 8006fd0:	3211      	adds	r2, #17
 8006fd2:	42a2      	cmp	r2, r4
 8006fd4:	bf88      	it	hi
 8006fd6:	2300      	movhi	r3, #0
 8006fd8:	4418      	add	r0, r3
 8006fda:	2300      	movs	r3, #0
 8006fdc:	4288      	cmp	r0, r1
 8006fde:	d305      	bcc.n	8006fec <__copybits+0x40>
 8006fe0:	bd70      	pop	{r4, r5, r6, pc}
 8006fe2:	f853 6b04 	ldr.w	r6, [r3], #4
 8006fe6:	f845 6f04 	str.w	r6, [r5, #4]!
 8006fea:	e7eb      	b.n	8006fc4 <__copybits+0x18>
 8006fec:	f840 3b04 	str.w	r3, [r0], #4
 8006ff0:	e7f4      	b.n	8006fdc <__copybits+0x30>

08006ff2 <__any_on>:
 8006ff2:	f100 0214 	add.w	r2, r0, #20
 8006ff6:	6900      	ldr	r0, [r0, #16]
 8006ff8:	114b      	asrs	r3, r1, #5
 8006ffa:	4298      	cmp	r0, r3
 8006ffc:	b510      	push	{r4, lr}
 8006ffe:	db11      	blt.n	8007024 <__any_on+0x32>
 8007000:	dd0a      	ble.n	8007018 <__any_on+0x26>
 8007002:	f011 011f 	ands.w	r1, r1, #31
 8007006:	d007      	beq.n	8007018 <__any_on+0x26>
 8007008:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800700c:	fa24 f001 	lsr.w	r0, r4, r1
 8007010:	fa00 f101 	lsl.w	r1, r0, r1
 8007014:	428c      	cmp	r4, r1
 8007016:	d10b      	bne.n	8007030 <__any_on+0x3e>
 8007018:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800701c:	4293      	cmp	r3, r2
 800701e:	d803      	bhi.n	8007028 <__any_on+0x36>
 8007020:	2000      	movs	r0, #0
 8007022:	bd10      	pop	{r4, pc}
 8007024:	4603      	mov	r3, r0
 8007026:	e7f7      	b.n	8007018 <__any_on+0x26>
 8007028:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800702c:	2900      	cmp	r1, #0
 800702e:	d0f5      	beq.n	800701c <__any_on+0x2a>
 8007030:	2001      	movs	r0, #1
 8007032:	e7f6      	b.n	8007022 <__any_on+0x30>

08007034 <sulp>:
 8007034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007038:	460f      	mov	r7, r1
 800703a:	4690      	mov	r8, r2
 800703c:	f7ff fec4 	bl	8006dc8 <__ulp>
 8007040:	4604      	mov	r4, r0
 8007042:	460d      	mov	r5, r1
 8007044:	f1b8 0f00 	cmp.w	r8, #0
 8007048:	d011      	beq.n	800706e <sulp+0x3a>
 800704a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800704e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007052:	2b00      	cmp	r3, #0
 8007054:	dd0b      	ble.n	800706e <sulp+0x3a>
 8007056:	051b      	lsls	r3, r3, #20
 8007058:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800705c:	2400      	movs	r4, #0
 800705e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007062:	4622      	mov	r2, r4
 8007064:	462b      	mov	r3, r5
 8007066:	f7f9 fae7 	bl	8000638 <__aeabi_dmul>
 800706a:	4604      	mov	r4, r0
 800706c:	460d      	mov	r5, r1
 800706e:	4620      	mov	r0, r4
 8007070:	4629      	mov	r1, r5
 8007072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007078 <_strtod_l>:
 8007078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	b09f      	sub	sp, #124	@ 0x7c
 800707e:	460c      	mov	r4, r1
 8007080:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007082:	2200      	movs	r2, #0
 8007084:	921a      	str	r2, [sp, #104]	@ 0x68
 8007086:	9005      	str	r0, [sp, #20]
 8007088:	f04f 0a00 	mov.w	sl, #0
 800708c:	f04f 0b00 	mov.w	fp, #0
 8007090:	460a      	mov	r2, r1
 8007092:	9219      	str	r2, [sp, #100]	@ 0x64
 8007094:	7811      	ldrb	r1, [r2, #0]
 8007096:	292b      	cmp	r1, #43	@ 0x2b
 8007098:	d048      	beq.n	800712c <_strtod_l+0xb4>
 800709a:	d836      	bhi.n	800710a <_strtod_l+0x92>
 800709c:	290d      	cmp	r1, #13
 800709e:	d830      	bhi.n	8007102 <_strtod_l+0x8a>
 80070a0:	2908      	cmp	r1, #8
 80070a2:	d830      	bhi.n	8007106 <_strtod_l+0x8e>
 80070a4:	2900      	cmp	r1, #0
 80070a6:	d039      	beq.n	800711c <_strtod_l+0xa4>
 80070a8:	2200      	movs	r2, #0
 80070aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80070ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80070ae:	782a      	ldrb	r2, [r5, #0]
 80070b0:	2a30      	cmp	r2, #48	@ 0x30
 80070b2:	f040 80b0 	bne.w	8007216 <_strtod_l+0x19e>
 80070b6:	786a      	ldrb	r2, [r5, #1]
 80070b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80070bc:	2a58      	cmp	r2, #88	@ 0x58
 80070be:	d16c      	bne.n	800719a <_strtod_l+0x122>
 80070c0:	9302      	str	r3, [sp, #8]
 80070c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	4a8e      	ldr	r2, [pc, #568]	@ (8007304 <_strtod_l+0x28c>)
 80070cc:	9805      	ldr	r0, [sp, #20]
 80070ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80070d0:	a919      	add	r1, sp, #100	@ 0x64
 80070d2:	f001 f919 	bl	8008308 <__gethex>
 80070d6:	f010 060f 	ands.w	r6, r0, #15
 80070da:	4604      	mov	r4, r0
 80070dc:	d005      	beq.n	80070ea <_strtod_l+0x72>
 80070de:	2e06      	cmp	r6, #6
 80070e0:	d126      	bne.n	8007130 <_strtod_l+0xb8>
 80070e2:	3501      	adds	r5, #1
 80070e4:	2300      	movs	r3, #0
 80070e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80070e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80070ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f040 8584 	bne.w	8007bfa <_strtod_l+0xb82>
 80070f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070f4:	b1bb      	cbz	r3, 8007126 <_strtod_l+0xae>
 80070f6:	4650      	mov	r0, sl
 80070f8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80070fc:	b01f      	add	sp, #124	@ 0x7c
 80070fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007102:	2920      	cmp	r1, #32
 8007104:	d1d0      	bne.n	80070a8 <_strtod_l+0x30>
 8007106:	3201      	adds	r2, #1
 8007108:	e7c3      	b.n	8007092 <_strtod_l+0x1a>
 800710a:	292d      	cmp	r1, #45	@ 0x2d
 800710c:	d1cc      	bne.n	80070a8 <_strtod_l+0x30>
 800710e:	2101      	movs	r1, #1
 8007110:	910e      	str	r1, [sp, #56]	@ 0x38
 8007112:	1c51      	adds	r1, r2, #1
 8007114:	9119      	str	r1, [sp, #100]	@ 0x64
 8007116:	7852      	ldrb	r2, [r2, #1]
 8007118:	2a00      	cmp	r2, #0
 800711a:	d1c7      	bne.n	80070ac <_strtod_l+0x34>
 800711c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800711e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007120:	2b00      	cmp	r3, #0
 8007122:	f040 8568 	bne.w	8007bf6 <_strtod_l+0xb7e>
 8007126:	4650      	mov	r0, sl
 8007128:	4659      	mov	r1, fp
 800712a:	e7e7      	b.n	80070fc <_strtod_l+0x84>
 800712c:	2100      	movs	r1, #0
 800712e:	e7ef      	b.n	8007110 <_strtod_l+0x98>
 8007130:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007132:	b13a      	cbz	r2, 8007144 <_strtod_l+0xcc>
 8007134:	2135      	movs	r1, #53	@ 0x35
 8007136:	a81c      	add	r0, sp, #112	@ 0x70
 8007138:	f7ff ff38 	bl	8006fac <__copybits>
 800713c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800713e:	9805      	ldr	r0, [sp, #20]
 8007140:	f7ff fb16 	bl	8006770 <_Bfree>
 8007144:	3e01      	subs	r6, #1
 8007146:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007148:	2e04      	cmp	r6, #4
 800714a:	d806      	bhi.n	800715a <_strtod_l+0xe2>
 800714c:	e8df f006 	tbb	[pc, r6]
 8007150:	201d0314 	.word	0x201d0314
 8007154:	14          	.byte	0x14
 8007155:	00          	.byte	0x00
 8007156:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800715a:	05e1      	lsls	r1, r4, #23
 800715c:	bf48      	it	mi
 800715e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007162:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007166:	0d1b      	lsrs	r3, r3, #20
 8007168:	051b      	lsls	r3, r3, #20
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1bd      	bne.n	80070ea <_strtod_l+0x72>
 800716e:	f7fe fb33 	bl	80057d8 <__errno>
 8007172:	2322      	movs	r3, #34	@ 0x22
 8007174:	6003      	str	r3, [r0, #0]
 8007176:	e7b8      	b.n	80070ea <_strtod_l+0x72>
 8007178:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800717c:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007180:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007184:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007188:	e7e7      	b.n	800715a <_strtod_l+0xe2>
 800718a:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800730c <_strtod_l+0x294>
 800718e:	e7e4      	b.n	800715a <_strtod_l+0xe2>
 8007190:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007194:	f04f 3aff 	mov.w	sl, #4294967295
 8007198:	e7df      	b.n	800715a <_strtod_l+0xe2>
 800719a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	9219      	str	r2, [sp, #100]	@ 0x64
 80071a0:	785b      	ldrb	r3, [r3, #1]
 80071a2:	2b30      	cmp	r3, #48	@ 0x30
 80071a4:	d0f9      	beq.n	800719a <_strtod_l+0x122>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d09f      	beq.n	80070ea <_strtod_l+0x72>
 80071aa:	2301      	movs	r3, #1
 80071ac:	2700      	movs	r7, #0
 80071ae:	9308      	str	r3, [sp, #32]
 80071b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80071b4:	970b      	str	r7, [sp, #44]	@ 0x2c
 80071b6:	46b9      	mov	r9, r7
 80071b8:	220a      	movs	r2, #10
 80071ba:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80071bc:	7805      	ldrb	r5, [r0, #0]
 80071be:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80071c2:	b2d9      	uxtb	r1, r3
 80071c4:	2909      	cmp	r1, #9
 80071c6:	d928      	bls.n	800721a <_strtod_l+0x1a2>
 80071c8:	494f      	ldr	r1, [pc, #316]	@ (8007308 <_strtod_l+0x290>)
 80071ca:	2201      	movs	r2, #1
 80071cc:	f000 ffcc 	bl	8008168 <strncmp>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	d032      	beq.n	800723a <_strtod_l+0x1c2>
 80071d4:	2000      	movs	r0, #0
 80071d6:	462a      	mov	r2, r5
 80071d8:	900a      	str	r0, [sp, #40]	@ 0x28
 80071da:	464d      	mov	r5, r9
 80071dc:	4603      	mov	r3, r0
 80071de:	2a65      	cmp	r2, #101	@ 0x65
 80071e0:	d001      	beq.n	80071e6 <_strtod_l+0x16e>
 80071e2:	2a45      	cmp	r2, #69	@ 0x45
 80071e4:	d114      	bne.n	8007210 <_strtod_l+0x198>
 80071e6:	b91d      	cbnz	r5, 80071f0 <_strtod_l+0x178>
 80071e8:	9a08      	ldr	r2, [sp, #32]
 80071ea:	4302      	orrs	r2, r0
 80071ec:	d096      	beq.n	800711c <_strtod_l+0xa4>
 80071ee:	2500      	movs	r5, #0
 80071f0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80071f2:	1c62      	adds	r2, r4, #1
 80071f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80071f6:	7862      	ldrb	r2, [r4, #1]
 80071f8:	2a2b      	cmp	r2, #43	@ 0x2b
 80071fa:	d07a      	beq.n	80072f2 <_strtod_l+0x27a>
 80071fc:	2a2d      	cmp	r2, #45	@ 0x2d
 80071fe:	d07e      	beq.n	80072fe <_strtod_l+0x286>
 8007200:	f04f 0c00 	mov.w	ip, #0
 8007204:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007208:	2909      	cmp	r1, #9
 800720a:	f240 8085 	bls.w	8007318 <_strtod_l+0x2a0>
 800720e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007210:	f04f 0800 	mov.w	r8, #0
 8007214:	e0a5      	b.n	8007362 <_strtod_l+0x2ea>
 8007216:	2300      	movs	r3, #0
 8007218:	e7c8      	b.n	80071ac <_strtod_l+0x134>
 800721a:	f1b9 0f08 	cmp.w	r9, #8
 800721e:	bfd8      	it	le
 8007220:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007222:	f100 0001 	add.w	r0, r0, #1
 8007226:	bfda      	itte	le
 8007228:	fb02 3301 	mlale	r3, r2, r1, r3
 800722c:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800722e:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007232:	f109 0901 	add.w	r9, r9, #1
 8007236:	9019      	str	r0, [sp, #100]	@ 0x64
 8007238:	e7bf      	b.n	80071ba <_strtod_l+0x142>
 800723a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007240:	785a      	ldrb	r2, [r3, #1]
 8007242:	f1b9 0f00 	cmp.w	r9, #0
 8007246:	d03b      	beq.n	80072c0 <_strtod_l+0x248>
 8007248:	900a      	str	r0, [sp, #40]	@ 0x28
 800724a:	464d      	mov	r5, r9
 800724c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007250:	2b09      	cmp	r3, #9
 8007252:	d912      	bls.n	800727a <_strtod_l+0x202>
 8007254:	2301      	movs	r3, #1
 8007256:	e7c2      	b.n	80071de <_strtod_l+0x166>
 8007258:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	9219      	str	r2, [sp, #100]	@ 0x64
 800725e:	785a      	ldrb	r2, [r3, #1]
 8007260:	3001      	adds	r0, #1
 8007262:	2a30      	cmp	r2, #48	@ 0x30
 8007264:	d0f8      	beq.n	8007258 <_strtod_l+0x1e0>
 8007266:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800726a:	2b08      	cmp	r3, #8
 800726c:	f200 84ca 	bhi.w	8007c04 <_strtod_l+0xb8c>
 8007270:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007272:	900a      	str	r0, [sp, #40]	@ 0x28
 8007274:	2000      	movs	r0, #0
 8007276:	930c      	str	r3, [sp, #48]	@ 0x30
 8007278:	4605      	mov	r5, r0
 800727a:	3a30      	subs	r2, #48	@ 0x30
 800727c:	f100 0301 	add.w	r3, r0, #1
 8007280:	d018      	beq.n	80072b4 <_strtod_l+0x23c>
 8007282:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007284:	4419      	add	r1, r3
 8007286:	910a      	str	r1, [sp, #40]	@ 0x28
 8007288:	462e      	mov	r6, r5
 800728a:	f04f 0e0a 	mov.w	lr, #10
 800728e:	1c71      	adds	r1, r6, #1
 8007290:	eba1 0c05 	sub.w	ip, r1, r5
 8007294:	4563      	cmp	r3, ip
 8007296:	dc15      	bgt.n	80072c4 <_strtod_l+0x24c>
 8007298:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800729c:	182b      	adds	r3, r5, r0
 800729e:	2b08      	cmp	r3, #8
 80072a0:	f105 0501 	add.w	r5, r5, #1
 80072a4:	4405      	add	r5, r0
 80072a6:	dc1a      	bgt.n	80072de <_strtod_l+0x266>
 80072a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072aa:	230a      	movs	r3, #10
 80072ac:	fb03 2301 	mla	r3, r3, r1, r2
 80072b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072b2:	2300      	movs	r3, #0
 80072b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072b6:	1c51      	adds	r1, r2, #1
 80072b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80072ba:	7852      	ldrb	r2, [r2, #1]
 80072bc:	4618      	mov	r0, r3
 80072be:	e7c5      	b.n	800724c <_strtod_l+0x1d4>
 80072c0:	4648      	mov	r0, r9
 80072c2:	e7ce      	b.n	8007262 <_strtod_l+0x1ea>
 80072c4:	2e08      	cmp	r6, #8
 80072c6:	dc05      	bgt.n	80072d4 <_strtod_l+0x25c>
 80072c8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80072ca:	fb0e f606 	mul.w	r6, lr, r6
 80072ce:	960b      	str	r6, [sp, #44]	@ 0x2c
 80072d0:	460e      	mov	r6, r1
 80072d2:	e7dc      	b.n	800728e <_strtod_l+0x216>
 80072d4:	2910      	cmp	r1, #16
 80072d6:	bfd8      	it	le
 80072d8:	fb0e f707 	mulle.w	r7, lr, r7
 80072dc:	e7f8      	b.n	80072d0 <_strtod_l+0x258>
 80072de:	2b0f      	cmp	r3, #15
 80072e0:	bfdc      	itt	le
 80072e2:	230a      	movle	r3, #10
 80072e4:	fb03 2707 	mlale	r7, r3, r7, r2
 80072e8:	e7e3      	b.n	80072b2 <_strtod_l+0x23a>
 80072ea:	2300      	movs	r3, #0
 80072ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80072ee:	2301      	movs	r3, #1
 80072f0:	e77a      	b.n	80071e8 <_strtod_l+0x170>
 80072f2:	f04f 0c00 	mov.w	ip, #0
 80072f6:	1ca2      	adds	r2, r4, #2
 80072f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80072fa:	78a2      	ldrb	r2, [r4, #2]
 80072fc:	e782      	b.n	8007204 <_strtod_l+0x18c>
 80072fe:	f04f 0c01 	mov.w	ip, #1
 8007302:	e7f8      	b.n	80072f6 <_strtod_l+0x27e>
 8007304:	0800930c 	.word	0x0800930c
 8007308:	0800913f 	.word	0x0800913f
 800730c:	7ff00000 	.word	0x7ff00000
 8007310:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007312:	1c51      	adds	r1, r2, #1
 8007314:	9119      	str	r1, [sp, #100]	@ 0x64
 8007316:	7852      	ldrb	r2, [r2, #1]
 8007318:	2a30      	cmp	r2, #48	@ 0x30
 800731a:	d0f9      	beq.n	8007310 <_strtod_l+0x298>
 800731c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007320:	2908      	cmp	r1, #8
 8007322:	f63f af75 	bhi.w	8007210 <_strtod_l+0x198>
 8007326:	3a30      	subs	r2, #48	@ 0x30
 8007328:	9209      	str	r2, [sp, #36]	@ 0x24
 800732a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800732c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800732e:	f04f 080a 	mov.w	r8, #10
 8007332:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007334:	1c56      	adds	r6, r2, #1
 8007336:	9619      	str	r6, [sp, #100]	@ 0x64
 8007338:	7852      	ldrb	r2, [r2, #1]
 800733a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800733e:	f1be 0f09 	cmp.w	lr, #9
 8007342:	d939      	bls.n	80073b8 <_strtod_l+0x340>
 8007344:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007346:	1a76      	subs	r6, r6, r1
 8007348:	2e08      	cmp	r6, #8
 800734a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800734e:	dc03      	bgt.n	8007358 <_strtod_l+0x2e0>
 8007350:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007352:	4588      	cmp	r8, r1
 8007354:	bfa8      	it	ge
 8007356:	4688      	movge	r8, r1
 8007358:	f1bc 0f00 	cmp.w	ip, #0
 800735c:	d001      	beq.n	8007362 <_strtod_l+0x2ea>
 800735e:	f1c8 0800 	rsb	r8, r8, #0
 8007362:	2d00      	cmp	r5, #0
 8007364:	d14e      	bne.n	8007404 <_strtod_l+0x38c>
 8007366:	9908      	ldr	r1, [sp, #32]
 8007368:	4308      	orrs	r0, r1
 800736a:	f47f aebe 	bne.w	80070ea <_strtod_l+0x72>
 800736e:	2b00      	cmp	r3, #0
 8007370:	f47f aed4 	bne.w	800711c <_strtod_l+0xa4>
 8007374:	2a69      	cmp	r2, #105	@ 0x69
 8007376:	d028      	beq.n	80073ca <_strtod_l+0x352>
 8007378:	dc25      	bgt.n	80073c6 <_strtod_l+0x34e>
 800737a:	2a49      	cmp	r2, #73	@ 0x49
 800737c:	d025      	beq.n	80073ca <_strtod_l+0x352>
 800737e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007380:	f47f aecc 	bne.w	800711c <_strtod_l+0xa4>
 8007384:	4999      	ldr	r1, [pc, #612]	@ (80075ec <_strtod_l+0x574>)
 8007386:	a819      	add	r0, sp, #100	@ 0x64
 8007388:	f001 f9e0 	bl	800874c <__match>
 800738c:	2800      	cmp	r0, #0
 800738e:	f43f aec5 	beq.w	800711c <_strtod_l+0xa4>
 8007392:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b28      	cmp	r3, #40	@ 0x28
 8007398:	d12e      	bne.n	80073f8 <_strtod_l+0x380>
 800739a:	4995      	ldr	r1, [pc, #596]	@ (80075f0 <_strtod_l+0x578>)
 800739c:	aa1c      	add	r2, sp, #112	@ 0x70
 800739e:	a819      	add	r0, sp, #100	@ 0x64
 80073a0:	f001 f9e8 	bl	8008774 <__hexnan>
 80073a4:	2805      	cmp	r0, #5
 80073a6:	d127      	bne.n	80073f8 <_strtod_l+0x380>
 80073a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80073aa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80073ae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80073b2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80073b6:	e698      	b.n	80070ea <_strtod_l+0x72>
 80073b8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073ba:	fb08 2101 	mla	r1, r8, r1, r2
 80073be:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80073c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80073c4:	e7b5      	b.n	8007332 <_strtod_l+0x2ba>
 80073c6:	2a6e      	cmp	r2, #110	@ 0x6e
 80073c8:	e7da      	b.n	8007380 <_strtod_l+0x308>
 80073ca:	498a      	ldr	r1, [pc, #552]	@ (80075f4 <_strtod_l+0x57c>)
 80073cc:	a819      	add	r0, sp, #100	@ 0x64
 80073ce:	f001 f9bd 	bl	800874c <__match>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	f43f aea2 	beq.w	800711c <_strtod_l+0xa4>
 80073d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073da:	4987      	ldr	r1, [pc, #540]	@ (80075f8 <_strtod_l+0x580>)
 80073dc:	3b01      	subs	r3, #1
 80073de:	a819      	add	r0, sp, #100	@ 0x64
 80073e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80073e2:	f001 f9b3 	bl	800874c <__match>
 80073e6:	b910      	cbnz	r0, 80073ee <_strtod_l+0x376>
 80073e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073ea:	3301      	adds	r3, #1
 80073ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80073ee:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8007608 <_strtod_l+0x590>
 80073f2:	f04f 0a00 	mov.w	sl, #0
 80073f6:	e678      	b.n	80070ea <_strtod_l+0x72>
 80073f8:	4880      	ldr	r0, [pc, #512]	@ (80075fc <_strtod_l+0x584>)
 80073fa:	f000 fee5 	bl	80081c8 <nan>
 80073fe:	4682      	mov	sl, r0
 8007400:	468b      	mov	fp, r1
 8007402:	e672      	b.n	80070ea <_strtod_l+0x72>
 8007404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007406:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007408:	eba8 0303 	sub.w	r3, r8, r3
 800740c:	f1b9 0f00 	cmp.w	r9, #0
 8007410:	bf08      	it	eq
 8007412:	46a9      	moveq	r9, r5
 8007414:	2d10      	cmp	r5, #16
 8007416:	9309      	str	r3, [sp, #36]	@ 0x24
 8007418:	462c      	mov	r4, r5
 800741a:	bfa8      	it	ge
 800741c:	2410      	movge	r4, #16
 800741e:	f7f9 f891 	bl	8000544 <__aeabi_ui2d>
 8007422:	2d09      	cmp	r5, #9
 8007424:	4682      	mov	sl, r0
 8007426:	468b      	mov	fp, r1
 8007428:	dc11      	bgt.n	800744e <_strtod_l+0x3d6>
 800742a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800742c:	2b00      	cmp	r3, #0
 800742e:	f43f ae5c 	beq.w	80070ea <_strtod_l+0x72>
 8007432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007434:	dd76      	ble.n	8007524 <_strtod_l+0x4ac>
 8007436:	2b16      	cmp	r3, #22
 8007438:	dc5d      	bgt.n	80074f6 <_strtod_l+0x47e>
 800743a:	4971      	ldr	r1, [pc, #452]	@ (8007600 <_strtod_l+0x588>)
 800743c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007444:	4652      	mov	r2, sl
 8007446:	465b      	mov	r3, fp
 8007448:	f7f9 f8f6 	bl	8000638 <__aeabi_dmul>
 800744c:	e7d7      	b.n	80073fe <_strtod_l+0x386>
 800744e:	4b6c      	ldr	r3, [pc, #432]	@ (8007600 <_strtod_l+0x588>)
 8007450:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007454:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007458:	f7f9 f8ee 	bl	8000638 <__aeabi_dmul>
 800745c:	4682      	mov	sl, r0
 800745e:	4638      	mov	r0, r7
 8007460:	468b      	mov	fp, r1
 8007462:	f7f9 f86f 	bl	8000544 <__aeabi_ui2d>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4650      	mov	r0, sl
 800746c:	4659      	mov	r1, fp
 800746e:	f7f8 ff2d 	bl	80002cc <__adddf3>
 8007472:	2d0f      	cmp	r5, #15
 8007474:	4682      	mov	sl, r0
 8007476:	468b      	mov	fp, r1
 8007478:	ddd7      	ble.n	800742a <_strtod_l+0x3b2>
 800747a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800747c:	1b2c      	subs	r4, r5, r4
 800747e:	441c      	add	r4, r3
 8007480:	2c00      	cmp	r4, #0
 8007482:	f340 8093 	ble.w	80075ac <_strtod_l+0x534>
 8007486:	f014 030f 	ands.w	r3, r4, #15
 800748a:	d00a      	beq.n	80074a2 <_strtod_l+0x42a>
 800748c:	495c      	ldr	r1, [pc, #368]	@ (8007600 <_strtod_l+0x588>)
 800748e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007492:	4652      	mov	r2, sl
 8007494:	465b      	mov	r3, fp
 8007496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800749a:	f7f9 f8cd 	bl	8000638 <__aeabi_dmul>
 800749e:	4682      	mov	sl, r0
 80074a0:	468b      	mov	fp, r1
 80074a2:	f034 040f 	bics.w	r4, r4, #15
 80074a6:	d073      	beq.n	8007590 <_strtod_l+0x518>
 80074a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80074ac:	dd49      	ble.n	8007542 <_strtod_l+0x4ca>
 80074ae:	2400      	movs	r4, #0
 80074b0:	46a0      	mov	r8, r4
 80074b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074b4:	46a1      	mov	r9, r4
 80074b6:	9a05      	ldr	r2, [sp, #20]
 80074b8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007608 <_strtod_l+0x590>
 80074bc:	2322      	movs	r3, #34	@ 0x22
 80074be:	6013      	str	r3, [r2, #0]
 80074c0:	f04f 0a00 	mov.w	sl, #0
 80074c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f43f ae0f 	beq.w	80070ea <_strtod_l+0x72>
 80074cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074ce:	9805      	ldr	r0, [sp, #20]
 80074d0:	f7ff f94e 	bl	8006770 <_Bfree>
 80074d4:	9805      	ldr	r0, [sp, #20]
 80074d6:	4649      	mov	r1, r9
 80074d8:	f7ff f94a 	bl	8006770 <_Bfree>
 80074dc:	9805      	ldr	r0, [sp, #20]
 80074de:	4641      	mov	r1, r8
 80074e0:	f7ff f946 	bl	8006770 <_Bfree>
 80074e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074e6:	9805      	ldr	r0, [sp, #20]
 80074e8:	f7ff f942 	bl	8006770 <_Bfree>
 80074ec:	9805      	ldr	r0, [sp, #20]
 80074ee:	4621      	mov	r1, r4
 80074f0:	f7ff f93e 	bl	8006770 <_Bfree>
 80074f4:	e5f9      	b.n	80070ea <_strtod_l+0x72>
 80074f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80074fc:	4293      	cmp	r3, r2
 80074fe:	dbbc      	blt.n	800747a <_strtod_l+0x402>
 8007500:	4c3f      	ldr	r4, [pc, #252]	@ (8007600 <_strtod_l+0x588>)
 8007502:	f1c5 050f 	rsb	r5, r5, #15
 8007506:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800750a:	4652      	mov	r2, sl
 800750c:	465b      	mov	r3, fp
 800750e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007512:	f7f9 f891 	bl	8000638 <__aeabi_dmul>
 8007516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007518:	1b5d      	subs	r5, r3, r5
 800751a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800751e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007522:	e791      	b.n	8007448 <_strtod_l+0x3d0>
 8007524:	3316      	adds	r3, #22
 8007526:	dba8      	blt.n	800747a <_strtod_l+0x402>
 8007528:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800752a:	eba3 0808 	sub.w	r8, r3, r8
 800752e:	4b34      	ldr	r3, [pc, #208]	@ (8007600 <_strtod_l+0x588>)
 8007530:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007534:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007538:	4650      	mov	r0, sl
 800753a:	4659      	mov	r1, fp
 800753c:	f7f9 f9a6 	bl	800088c <__aeabi_ddiv>
 8007540:	e75d      	b.n	80073fe <_strtod_l+0x386>
 8007542:	2300      	movs	r3, #0
 8007544:	4f2f      	ldr	r7, [pc, #188]	@ (8007604 <_strtod_l+0x58c>)
 8007546:	1124      	asrs	r4, r4, #4
 8007548:	4650      	mov	r0, sl
 800754a:	4659      	mov	r1, fp
 800754c:	461e      	mov	r6, r3
 800754e:	2c01      	cmp	r4, #1
 8007550:	dc21      	bgt.n	8007596 <_strtod_l+0x51e>
 8007552:	b10b      	cbz	r3, 8007558 <_strtod_l+0x4e0>
 8007554:	4682      	mov	sl, r0
 8007556:	468b      	mov	fp, r1
 8007558:	492a      	ldr	r1, [pc, #168]	@ (8007604 <_strtod_l+0x58c>)
 800755a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800755e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007562:	4652      	mov	r2, sl
 8007564:	465b      	mov	r3, fp
 8007566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800756a:	f7f9 f865 	bl	8000638 <__aeabi_dmul>
 800756e:	4b26      	ldr	r3, [pc, #152]	@ (8007608 <_strtod_l+0x590>)
 8007570:	460a      	mov	r2, r1
 8007572:	400b      	ands	r3, r1
 8007574:	4925      	ldr	r1, [pc, #148]	@ (800760c <_strtod_l+0x594>)
 8007576:	428b      	cmp	r3, r1
 8007578:	4682      	mov	sl, r0
 800757a:	d898      	bhi.n	80074ae <_strtod_l+0x436>
 800757c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007580:	428b      	cmp	r3, r1
 8007582:	bf86      	itte	hi
 8007584:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007610 <_strtod_l+0x598>
 8007588:	f04f 3aff 	movhi.w	sl, #4294967295
 800758c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007590:	2300      	movs	r3, #0
 8007592:	9308      	str	r3, [sp, #32]
 8007594:	e076      	b.n	8007684 <_strtod_l+0x60c>
 8007596:	07e2      	lsls	r2, r4, #31
 8007598:	d504      	bpl.n	80075a4 <_strtod_l+0x52c>
 800759a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800759e:	f7f9 f84b 	bl	8000638 <__aeabi_dmul>
 80075a2:	2301      	movs	r3, #1
 80075a4:	3601      	adds	r6, #1
 80075a6:	1064      	asrs	r4, r4, #1
 80075a8:	3708      	adds	r7, #8
 80075aa:	e7d0      	b.n	800754e <_strtod_l+0x4d6>
 80075ac:	d0f0      	beq.n	8007590 <_strtod_l+0x518>
 80075ae:	4264      	negs	r4, r4
 80075b0:	f014 020f 	ands.w	r2, r4, #15
 80075b4:	d00a      	beq.n	80075cc <_strtod_l+0x554>
 80075b6:	4b12      	ldr	r3, [pc, #72]	@ (8007600 <_strtod_l+0x588>)
 80075b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075bc:	4650      	mov	r0, sl
 80075be:	4659      	mov	r1, fp
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f7f9 f962 	bl	800088c <__aeabi_ddiv>
 80075c8:	4682      	mov	sl, r0
 80075ca:	468b      	mov	fp, r1
 80075cc:	1124      	asrs	r4, r4, #4
 80075ce:	d0df      	beq.n	8007590 <_strtod_l+0x518>
 80075d0:	2c1f      	cmp	r4, #31
 80075d2:	dd1f      	ble.n	8007614 <_strtod_l+0x59c>
 80075d4:	2400      	movs	r4, #0
 80075d6:	46a0      	mov	r8, r4
 80075d8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80075da:	46a1      	mov	r9, r4
 80075dc:	9a05      	ldr	r2, [sp, #20]
 80075de:	2322      	movs	r3, #34	@ 0x22
 80075e0:	f04f 0a00 	mov.w	sl, #0
 80075e4:	f04f 0b00 	mov.w	fp, #0
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	e76b      	b.n	80074c4 <_strtod_l+0x44c>
 80075ec:	0800902d 	.word	0x0800902d
 80075f0:	080092f8 	.word	0x080092f8
 80075f4:	08009025 	.word	0x08009025
 80075f8:	0800905c 	.word	0x0800905c
 80075fc:	08009195 	.word	0x08009195
 8007600:	08009230 	.word	0x08009230
 8007604:	08009208 	.word	0x08009208
 8007608:	7ff00000 	.word	0x7ff00000
 800760c:	7ca00000 	.word	0x7ca00000
 8007610:	7fefffff 	.word	0x7fefffff
 8007614:	f014 0310 	ands.w	r3, r4, #16
 8007618:	bf18      	it	ne
 800761a:	236a      	movne	r3, #106	@ 0x6a
 800761c:	4e78      	ldr	r6, [pc, #480]	@ (8007800 <_strtod_l+0x788>)
 800761e:	9308      	str	r3, [sp, #32]
 8007620:	4650      	mov	r0, sl
 8007622:	4659      	mov	r1, fp
 8007624:	2300      	movs	r3, #0
 8007626:	07e7      	lsls	r7, r4, #31
 8007628:	d504      	bpl.n	8007634 <_strtod_l+0x5bc>
 800762a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800762e:	f7f9 f803 	bl	8000638 <__aeabi_dmul>
 8007632:	2301      	movs	r3, #1
 8007634:	1064      	asrs	r4, r4, #1
 8007636:	f106 0608 	add.w	r6, r6, #8
 800763a:	d1f4      	bne.n	8007626 <_strtod_l+0x5ae>
 800763c:	b10b      	cbz	r3, 8007642 <_strtod_l+0x5ca>
 800763e:	4682      	mov	sl, r0
 8007640:	468b      	mov	fp, r1
 8007642:	9b08      	ldr	r3, [sp, #32]
 8007644:	b1b3      	cbz	r3, 8007674 <_strtod_l+0x5fc>
 8007646:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800764a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800764e:	2b00      	cmp	r3, #0
 8007650:	4659      	mov	r1, fp
 8007652:	dd0f      	ble.n	8007674 <_strtod_l+0x5fc>
 8007654:	2b1f      	cmp	r3, #31
 8007656:	dd58      	ble.n	800770a <_strtod_l+0x692>
 8007658:	2b34      	cmp	r3, #52	@ 0x34
 800765a:	bfde      	ittt	le
 800765c:	f04f 33ff 	movle.w	r3, #4294967295
 8007660:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007664:	4093      	lslle	r3, r2
 8007666:	f04f 0a00 	mov.w	sl, #0
 800766a:	bfcc      	ite	gt
 800766c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007670:	ea03 0b01 	andle.w	fp, r3, r1
 8007674:	2200      	movs	r2, #0
 8007676:	2300      	movs	r3, #0
 8007678:	4650      	mov	r0, sl
 800767a:	4659      	mov	r1, fp
 800767c:	f7f9 fa44 	bl	8000b08 <__aeabi_dcmpeq>
 8007680:	2800      	cmp	r0, #0
 8007682:	d1a7      	bne.n	80075d4 <_strtod_l+0x55c>
 8007684:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800768a:	9805      	ldr	r0, [sp, #20]
 800768c:	462b      	mov	r3, r5
 800768e:	464a      	mov	r2, r9
 8007690:	f7ff f8d6 	bl	8006840 <__s2b>
 8007694:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007696:	2800      	cmp	r0, #0
 8007698:	f43f af09 	beq.w	80074ae <_strtod_l+0x436>
 800769c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800769e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076a0:	2a00      	cmp	r2, #0
 80076a2:	eba3 0308 	sub.w	r3, r3, r8
 80076a6:	bfa8      	it	ge
 80076a8:	2300      	movge	r3, #0
 80076aa:	9312      	str	r3, [sp, #72]	@ 0x48
 80076ac:	2400      	movs	r4, #0
 80076ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80076b2:	9316      	str	r3, [sp, #88]	@ 0x58
 80076b4:	46a0      	mov	r8, r4
 80076b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076b8:	9805      	ldr	r0, [sp, #20]
 80076ba:	6859      	ldr	r1, [r3, #4]
 80076bc:	f7ff f818 	bl	80066f0 <_Balloc>
 80076c0:	4681      	mov	r9, r0
 80076c2:	2800      	cmp	r0, #0
 80076c4:	f43f aef7 	beq.w	80074b6 <_strtod_l+0x43e>
 80076c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	3202      	adds	r2, #2
 80076ce:	f103 010c 	add.w	r1, r3, #12
 80076d2:	0092      	lsls	r2, r2, #2
 80076d4:	300c      	adds	r0, #12
 80076d6:	f000 fd69 	bl	80081ac <memcpy>
 80076da:	ab1c      	add	r3, sp, #112	@ 0x70
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	9805      	ldr	r0, [sp, #20]
 80076e4:	4652      	mov	r2, sl
 80076e6:	465b      	mov	r3, fp
 80076e8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80076ec:	f7ff fbd6 	bl	8006e9c <__d2b>
 80076f0:	901a      	str	r0, [sp, #104]	@ 0x68
 80076f2:	2800      	cmp	r0, #0
 80076f4:	f43f aedf 	beq.w	80074b6 <_strtod_l+0x43e>
 80076f8:	9805      	ldr	r0, [sp, #20]
 80076fa:	2101      	movs	r1, #1
 80076fc:	f7ff f936 	bl	800696c <__i2b>
 8007700:	4680      	mov	r8, r0
 8007702:	b948      	cbnz	r0, 8007718 <_strtod_l+0x6a0>
 8007704:	f04f 0800 	mov.w	r8, #0
 8007708:	e6d5      	b.n	80074b6 <_strtod_l+0x43e>
 800770a:	f04f 32ff 	mov.w	r2, #4294967295
 800770e:	fa02 f303 	lsl.w	r3, r2, r3
 8007712:	ea03 0a0a 	and.w	sl, r3, sl
 8007716:	e7ad      	b.n	8007674 <_strtod_l+0x5fc>
 8007718:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800771a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800771c:	2d00      	cmp	r5, #0
 800771e:	bfab      	itete	ge
 8007720:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007722:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007724:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007726:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007728:	bfac      	ite	ge
 800772a:	18ef      	addge	r7, r5, r3
 800772c:	1b5e      	sublt	r6, r3, r5
 800772e:	9b08      	ldr	r3, [sp, #32]
 8007730:	1aed      	subs	r5, r5, r3
 8007732:	4415      	add	r5, r2
 8007734:	4b33      	ldr	r3, [pc, #204]	@ (8007804 <_strtod_l+0x78c>)
 8007736:	3d01      	subs	r5, #1
 8007738:	429d      	cmp	r5, r3
 800773a:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800773e:	da50      	bge.n	80077e2 <_strtod_l+0x76a>
 8007740:	1b5b      	subs	r3, r3, r5
 8007742:	2b1f      	cmp	r3, #31
 8007744:	eba2 0203 	sub.w	r2, r2, r3
 8007748:	f04f 0101 	mov.w	r1, #1
 800774c:	dc3d      	bgt.n	80077ca <_strtod_l+0x752>
 800774e:	fa01 f303 	lsl.w	r3, r1, r3
 8007752:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007754:	2300      	movs	r3, #0
 8007756:	9310      	str	r3, [sp, #64]	@ 0x40
 8007758:	18bd      	adds	r5, r7, r2
 800775a:	9b08      	ldr	r3, [sp, #32]
 800775c:	42af      	cmp	r7, r5
 800775e:	4416      	add	r6, r2
 8007760:	441e      	add	r6, r3
 8007762:	463b      	mov	r3, r7
 8007764:	bfa8      	it	ge
 8007766:	462b      	movge	r3, r5
 8007768:	42b3      	cmp	r3, r6
 800776a:	bfa8      	it	ge
 800776c:	4633      	movge	r3, r6
 800776e:	2b00      	cmp	r3, #0
 8007770:	bfc2      	ittt	gt
 8007772:	1aed      	subgt	r5, r5, r3
 8007774:	1af6      	subgt	r6, r6, r3
 8007776:	1aff      	subgt	r7, r7, r3
 8007778:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800777a:	2b00      	cmp	r3, #0
 800777c:	dd16      	ble.n	80077ac <_strtod_l+0x734>
 800777e:	4641      	mov	r1, r8
 8007780:	9805      	ldr	r0, [sp, #20]
 8007782:	461a      	mov	r2, r3
 8007784:	f7ff f9aa 	bl	8006adc <__pow5mult>
 8007788:	4680      	mov	r8, r0
 800778a:	2800      	cmp	r0, #0
 800778c:	d0ba      	beq.n	8007704 <_strtod_l+0x68c>
 800778e:	4601      	mov	r1, r0
 8007790:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007792:	9805      	ldr	r0, [sp, #20]
 8007794:	f7ff f900 	bl	8006998 <__multiply>
 8007798:	900a      	str	r0, [sp, #40]	@ 0x28
 800779a:	2800      	cmp	r0, #0
 800779c:	f43f ae8b 	beq.w	80074b6 <_strtod_l+0x43e>
 80077a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077a2:	9805      	ldr	r0, [sp, #20]
 80077a4:	f7fe ffe4 	bl	8006770 <_Bfree>
 80077a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80077ac:	2d00      	cmp	r5, #0
 80077ae:	dc1d      	bgt.n	80077ec <_strtod_l+0x774>
 80077b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	dd28      	ble.n	8007808 <_strtod_l+0x790>
 80077b6:	4649      	mov	r1, r9
 80077b8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80077ba:	9805      	ldr	r0, [sp, #20]
 80077bc:	f7ff f98e 	bl	8006adc <__pow5mult>
 80077c0:	4681      	mov	r9, r0
 80077c2:	bb08      	cbnz	r0, 8007808 <_strtod_l+0x790>
 80077c4:	f04f 0900 	mov.w	r9, #0
 80077c8:	e675      	b.n	80074b6 <_strtod_l+0x43e>
 80077ca:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80077ce:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80077d2:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80077d6:	35e2      	adds	r5, #226	@ 0xe2
 80077d8:	fa01 f305 	lsl.w	r3, r1, r5
 80077dc:	9310      	str	r3, [sp, #64]	@ 0x40
 80077de:	9113      	str	r1, [sp, #76]	@ 0x4c
 80077e0:	e7ba      	b.n	8007758 <_strtod_l+0x6e0>
 80077e2:	2300      	movs	r3, #0
 80077e4:	9310      	str	r3, [sp, #64]	@ 0x40
 80077e6:	2301      	movs	r3, #1
 80077e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077ea:	e7b5      	b.n	8007758 <_strtod_l+0x6e0>
 80077ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077ee:	9805      	ldr	r0, [sp, #20]
 80077f0:	462a      	mov	r2, r5
 80077f2:	f7ff f9cd 	bl	8006b90 <__lshift>
 80077f6:	901a      	str	r0, [sp, #104]	@ 0x68
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d1d9      	bne.n	80077b0 <_strtod_l+0x738>
 80077fc:	e65b      	b.n	80074b6 <_strtod_l+0x43e>
 80077fe:	bf00      	nop
 8007800:	08009320 	.word	0x08009320
 8007804:	fffffc02 	.word	0xfffffc02
 8007808:	2e00      	cmp	r6, #0
 800780a:	dd07      	ble.n	800781c <_strtod_l+0x7a4>
 800780c:	4649      	mov	r1, r9
 800780e:	9805      	ldr	r0, [sp, #20]
 8007810:	4632      	mov	r2, r6
 8007812:	f7ff f9bd 	bl	8006b90 <__lshift>
 8007816:	4681      	mov	r9, r0
 8007818:	2800      	cmp	r0, #0
 800781a:	d0d3      	beq.n	80077c4 <_strtod_l+0x74c>
 800781c:	2f00      	cmp	r7, #0
 800781e:	dd08      	ble.n	8007832 <_strtod_l+0x7ba>
 8007820:	4641      	mov	r1, r8
 8007822:	9805      	ldr	r0, [sp, #20]
 8007824:	463a      	mov	r2, r7
 8007826:	f7ff f9b3 	bl	8006b90 <__lshift>
 800782a:	4680      	mov	r8, r0
 800782c:	2800      	cmp	r0, #0
 800782e:	f43f ae42 	beq.w	80074b6 <_strtod_l+0x43e>
 8007832:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007834:	9805      	ldr	r0, [sp, #20]
 8007836:	464a      	mov	r2, r9
 8007838:	f7ff fa32 	bl	8006ca0 <__mdiff>
 800783c:	4604      	mov	r4, r0
 800783e:	2800      	cmp	r0, #0
 8007840:	f43f ae39 	beq.w	80074b6 <_strtod_l+0x43e>
 8007844:	68c3      	ldr	r3, [r0, #12]
 8007846:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007848:	2300      	movs	r3, #0
 800784a:	60c3      	str	r3, [r0, #12]
 800784c:	4641      	mov	r1, r8
 800784e:	f7ff fa0b 	bl	8006c68 <__mcmp>
 8007852:	2800      	cmp	r0, #0
 8007854:	da3d      	bge.n	80078d2 <_strtod_l+0x85a>
 8007856:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007858:	ea53 030a 	orrs.w	r3, r3, sl
 800785c:	d163      	bne.n	8007926 <_strtod_l+0x8ae>
 800785e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007862:	2b00      	cmp	r3, #0
 8007864:	d15f      	bne.n	8007926 <_strtod_l+0x8ae>
 8007866:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800786a:	0d1b      	lsrs	r3, r3, #20
 800786c:	051b      	lsls	r3, r3, #20
 800786e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007872:	d958      	bls.n	8007926 <_strtod_l+0x8ae>
 8007874:	6963      	ldr	r3, [r4, #20]
 8007876:	b913      	cbnz	r3, 800787e <_strtod_l+0x806>
 8007878:	6923      	ldr	r3, [r4, #16]
 800787a:	2b01      	cmp	r3, #1
 800787c:	dd53      	ble.n	8007926 <_strtod_l+0x8ae>
 800787e:	4621      	mov	r1, r4
 8007880:	2201      	movs	r2, #1
 8007882:	9805      	ldr	r0, [sp, #20]
 8007884:	f7ff f984 	bl	8006b90 <__lshift>
 8007888:	4641      	mov	r1, r8
 800788a:	4604      	mov	r4, r0
 800788c:	f7ff f9ec 	bl	8006c68 <__mcmp>
 8007890:	2800      	cmp	r0, #0
 8007892:	dd48      	ble.n	8007926 <_strtod_l+0x8ae>
 8007894:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007898:	9a08      	ldr	r2, [sp, #32]
 800789a:	0d1b      	lsrs	r3, r3, #20
 800789c:	051b      	lsls	r3, r3, #20
 800789e:	2a00      	cmp	r2, #0
 80078a0:	d062      	beq.n	8007968 <_strtod_l+0x8f0>
 80078a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80078a6:	d85f      	bhi.n	8007968 <_strtod_l+0x8f0>
 80078a8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80078ac:	f67f ae96 	bls.w	80075dc <_strtod_l+0x564>
 80078b0:	4ba7      	ldr	r3, [pc, #668]	@ (8007b50 <_strtod_l+0xad8>)
 80078b2:	4650      	mov	r0, sl
 80078b4:	4659      	mov	r1, fp
 80078b6:	2200      	movs	r2, #0
 80078b8:	f7f8 febe 	bl	8000638 <__aeabi_dmul>
 80078bc:	4ba5      	ldr	r3, [pc, #660]	@ (8007b54 <_strtod_l+0xadc>)
 80078be:	400b      	ands	r3, r1
 80078c0:	4682      	mov	sl, r0
 80078c2:	468b      	mov	fp, r1
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f47f ae01 	bne.w	80074cc <_strtod_l+0x454>
 80078ca:	9a05      	ldr	r2, [sp, #20]
 80078cc:	2322      	movs	r3, #34	@ 0x22
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	e5fc      	b.n	80074cc <_strtod_l+0x454>
 80078d2:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80078d6:	d165      	bne.n	80079a4 <_strtod_l+0x92c>
 80078d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80078da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078de:	b35a      	cbz	r2, 8007938 <_strtod_l+0x8c0>
 80078e0:	4a9d      	ldr	r2, [pc, #628]	@ (8007b58 <_strtod_l+0xae0>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d12b      	bne.n	800793e <_strtod_l+0x8c6>
 80078e6:	9b08      	ldr	r3, [sp, #32]
 80078e8:	4651      	mov	r1, sl
 80078ea:	b303      	cbz	r3, 800792e <_strtod_l+0x8b6>
 80078ec:	4b99      	ldr	r3, [pc, #612]	@ (8007b54 <_strtod_l+0xadc>)
 80078ee:	465a      	mov	r2, fp
 80078f0:	4013      	ands	r3, r2
 80078f2:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80078f6:	f04f 32ff 	mov.w	r2, #4294967295
 80078fa:	d81b      	bhi.n	8007934 <_strtod_l+0x8bc>
 80078fc:	0d1b      	lsrs	r3, r3, #20
 80078fe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007902:	fa02 f303 	lsl.w	r3, r2, r3
 8007906:	4299      	cmp	r1, r3
 8007908:	d119      	bne.n	800793e <_strtod_l+0x8c6>
 800790a:	4b94      	ldr	r3, [pc, #592]	@ (8007b5c <_strtod_l+0xae4>)
 800790c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800790e:	429a      	cmp	r2, r3
 8007910:	d102      	bne.n	8007918 <_strtod_l+0x8a0>
 8007912:	3101      	adds	r1, #1
 8007914:	f43f adcf 	beq.w	80074b6 <_strtod_l+0x43e>
 8007918:	4b8e      	ldr	r3, [pc, #568]	@ (8007b54 <_strtod_l+0xadc>)
 800791a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800791c:	401a      	ands	r2, r3
 800791e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007922:	f04f 0a00 	mov.w	sl, #0
 8007926:	9b08      	ldr	r3, [sp, #32]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1c1      	bne.n	80078b0 <_strtod_l+0x838>
 800792c:	e5ce      	b.n	80074cc <_strtod_l+0x454>
 800792e:	f04f 33ff 	mov.w	r3, #4294967295
 8007932:	e7e8      	b.n	8007906 <_strtod_l+0x88e>
 8007934:	4613      	mov	r3, r2
 8007936:	e7e6      	b.n	8007906 <_strtod_l+0x88e>
 8007938:	ea53 030a 	orrs.w	r3, r3, sl
 800793c:	d0aa      	beq.n	8007894 <_strtod_l+0x81c>
 800793e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007940:	b1db      	cbz	r3, 800797a <_strtod_l+0x902>
 8007942:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007944:	4213      	tst	r3, r2
 8007946:	d0ee      	beq.n	8007926 <_strtod_l+0x8ae>
 8007948:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800794a:	9a08      	ldr	r2, [sp, #32]
 800794c:	4650      	mov	r0, sl
 800794e:	4659      	mov	r1, fp
 8007950:	b1bb      	cbz	r3, 8007982 <_strtod_l+0x90a>
 8007952:	f7ff fb6f 	bl	8007034 <sulp>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800795e:	f7f8 fcb5 	bl	80002cc <__adddf3>
 8007962:	4682      	mov	sl, r0
 8007964:	468b      	mov	fp, r1
 8007966:	e7de      	b.n	8007926 <_strtod_l+0x8ae>
 8007968:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800796c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007970:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007974:	f04f 3aff 	mov.w	sl, #4294967295
 8007978:	e7d5      	b.n	8007926 <_strtod_l+0x8ae>
 800797a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800797c:	ea13 0f0a 	tst.w	r3, sl
 8007980:	e7e1      	b.n	8007946 <_strtod_l+0x8ce>
 8007982:	f7ff fb57 	bl	8007034 <sulp>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800798e:	f7f8 fc9b 	bl	80002c8 <__aeabi_dsub>
 8007992:	2200      	movs	r2, #0
 8007994:	2300      	movs	r3, #0
 8007996:	4682      	mov	sl, r0
 8007998:	468b      	mov	fp, r1
 800799a:	f7f9 f8b5 	bl	8000b08 <__aeabi_dcmpeq>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d0c1      	beq.n	8007926 <_strtod_l+0x8ae>
 80079a2:	e61b      	b.n	80075dc <_strtod_l+0x564>
 80079a4:	4641      	mov	r1, r8
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7ff fad0 	bl	8006f4c <__ratio>
 80079ac:	2200      	movs	r2, #0
 80079ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079b2:	4606      	mov	r6, r0
 80079b4:	460f      	mov	r7, r1
 80079b6:	f7f9 f8bb 	bl	8000b30 <__aeabi_dcmple>
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d06d      	beq.n	8007a9a <_strtod_l+0xa22>
 80079be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d178      	bne.n	8007ab6 <_strtod_l+0xa3e>
 80079c4:	f1ba 0f00 	cmp.w	sl, #0
 80079c8:	d156      	bne.n	8007a78 <_strtod_l+0xa00>
 80079ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d158      	bne.n	8007a86 <_strtod_l+0xa0e>
 80079d4:	4b62      	ldr	r3, [pc, #392]	@ (8007b60 <_strtod_l+0xae8>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	4630      	mov	r0, r6
 80079da:	4639      	mov	r1, r7
 80079dc:	f7f9 f89e 	bl	8000b1c <__aeabi_dcmplt>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d157      	bne.n	8007a94 <_strtod_l+0xa1c>
 80079e4:	4630      	mov	r0, r6
 80079e6:	4639      	mov	r1, r7
 80079e8:	4b5e      	ldr	r3, [pc, #376]	@ (8007b64 <_strtod_l+0xaec>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	f7f8 fe24 	bl	8000638 <__aeabi_dmul>
 80079f0:	4606      	mov	r6, r0
 80079f2:	460f      	mov	r7, r1
 80079f4:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80079f8:	9606      	str	r6, [sp, #24]
 80079fa:	9307      	str	r3, [sp, #28]
 80079fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a00:	4d54      	ldr	r5, [pc, #336]	@ (8007b54 <_strtod_l+0xadc>)
 8007a02:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007a06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a08:	401d      	ands	r5, r3
 8007a0a:	4b57      	ldr	r3, [pc, #348]	@ (8007b68 <_strtod_l+0xaf0>)
 8007a0c:	429d      	cmp	r5, r3
 8007a0e:	f040 80af 	bne.w	8007b70 <_strtod_l+0xaf8>
 8007a12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a14:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007a18:	4650      	mov	r0, sl
 8007a1a:	4659      	mov	r1, fp
 8007a1c:	f7ff f9d4 	bl	8006dc8 <__ulp>
 8007a20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a24:	f7f8 fe08 	bl	8000638 <__aeabi_dmul>
 8007a28:	4652      	mov	r2, sl
 8007a2a:	465b      	mov	r3, fp
 8007a2c:	f7f8 fc4e 	bl	80002cc <__adddf3>
 8007a30:	460b      	mov	r3, r1
 8007a32:	4948      	ldr	r1, [pc, #288]	@ (8007b54 <_strtod_l+0xadc>)
 8007a34:	4a4d      	ldr	r2, [pc, #308]	@ (8007b6c <_strtod_l+0xaf4>)
 8007a36:	4019      	ands	r1, r3
 8007a38:	4291      	cmp	r1, r2
 8007a3a:	4682      	mov	sl, r0
 8007a3c:	d942      	bls.n	8007ac4 <_strtod_l+0xa4c>
 8007a3e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a40:	4b46      	ldr	r3, [pc, #280]	@ (8007b5c <_strtod_l+0xae4>)
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d103      	bne.n	8007a4e <_strtod_l+0x9d6>
 8007a46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a48:	3301      	adds	r3, #1
 8007a4a:	f43f ad34 	beq.w	80074b6 <_strtod_l+0x43e>
 8007a4e:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007b5c <_strtod_l+0xae4>
 8007a52:	f04f 3aff 	mov.w	sl, #4294967295
 8007a56:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a58:	9805      	ldr	r0, [sp, #20]
 8007a5a:	f7fe fe89 	bl	8006770 <_Bfree>
 8007a5e:	9805      	ldr	r0, [sp, #20]
 8007a60:	4649      	mov	r1, r9
 8007a62:	f7fe fe85 	bl	8006770 <_Bfree>
 8007a66:	9805      	ldr	r0, [sp, #20]
 8007a68:	4641      	mov	r1, r8
 8007a6a:	f7fe fe81 	bl	8006770 <_Bfree>
 8007a6e:	9805      	ldr	r0, [sp, #20]
 8007a70:	4621      	mov	r1, r4
 8007a72:	f7fe fe7d 	bl	8006770 <_Bfree>
 8007a76:	e61e      	b.n	80076b6 <_strtod_l+0x63e>
 8007a78:	f1ba 0f01 	cmp.w	sl, #1
 8007a7c:	d103      	bne.n	8007a86 <_strtod_l+0xa0e>
 8007a7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f43f adab 	beq.w	80075dc <_strtod_l+0x564>
 8007a86:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8007b30 <_strtod_l+0xab8>
 8007a8a:	4f35      	ldr	r7, [pc, #212]	@ (8007b60 <_strtod_l+0xae8>)
 8007a8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a90:	2600      	movs	r6, #0
 8007a92:	e7b3      	b.n	80079fc <_strtod_l+0x984>
 8007a94:	4f33      	ldr	r7, [pc, #204]	@ (8007b64 <_strtod_l+0xaec>)
 8007a96:	2600      	movs	r6, #0
 8007a98:	e7ac      	b.n	80079f4 <_strtod_l+0x97c>
 8007a9a:	4b32      	ldr	r3, [pc, #200]	@ (8007b64 <_strtod_l+0xaec>)
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	4639      	mov	r1, r7
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f7f8 fdc9 	bl	8000638 <__aeabi_dmul>
 8007aa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aa8:	4606      	mov	r6, r0
 8007aaa:	460f      	mov	r7, r1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0a1      	beq.n	80079f4 <_strtod_l+0x97c>
 8007ab0:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007ab4:	e7a2      	b.n	80079fc <_strtod_l+0x984>
 8007ab6:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8007b38 <_strtod_l+0xac0>
 8007aba:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007abe:	ec57 6b17 	vmov	r6, r7, d7
 8007ac2:	e79b      	b.n	80079fc <_strtod_l+0x984>
 8007ac4:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007ac8:	9b08      	ldr	r3, [sp, #32]
 8007aca:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1c1      	bne.n	8007a56 <_strtod_l+0x9de>
 8007ad2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ad6:	0d1b      	lsrs	r3, r3, #20
 8007ad8:	051b      	lsls	r3, r3, #20
 8007ada:	429d      	cmp	r5, r3
 8007adc:	d1bb      	bne.n	8007a56 <_strtod_l+0x9de>
 8007ade:	4630      	mov	r0, r6
 8007ae0:	4639      	mov	r1, r7
 8007ae2:	f7f9 f909 	bl	8000cf8 <__aeabi_d2lz>
 8007ae6:	f7f8 fd79 	bl	80005dc <__aeabi_l2d>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	4630      	mov	r0, r6
 8007af0:	4639      	mov	r1, r7
 8007af2:	f7f8 fbe9 	bl	80002c8 <__aeabi_dsub>
 8007af6:	460b      	mov	r3, r1
 8007af8:	4602      	mov	r2, r0
 8007afa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007afe:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007b02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b04:	ea46 060a 	orr.w	r6, r6, sl
 8007b08:	431e      	orrs	r6, r3
 8007b0a:	d06e      	beq.n	8007bea <_strtod_l+0xb72>
 8007b0c:	a30c      	add	r3, pc, #48	@ (adr r3, 8007b40 <_strtod_l+0xac8>)
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	f7f9 f803 	bl	8000b1c <__aeabi_dcmplt>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	f47f acd8 	bne.w	80074cc <_strtod_l+0x454>
 8007b1c:	a30a      	add	r3, pc, #40	@ (adr r3, 8007b48 <_strtod_l+0xad0>)
 8007b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b26:	f7f9 f817 	bl	8000b58 <__aeabi_dcmpgt>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d093      	beq.n	8007a56 <_strtod_l+0x9de>
 8007b2e:	e4cd      	b.n	80074cc <_strtod_l+0x454>
 8007b30:	00000000 	.word	0x00000000
 8007b34:	bff00000 	.word	0xbff00000
 8007b38:	00000000 	.word	0x00000000
 8007b3c:	3ff00000 	.word	0x3ff00000
 8007b40:	94a03595 	.word	0x94a03595
 8007b44:	3fdfffff 	.word	0x3fdfffff
 8007b48:	35afe535 	.word	0x35afe535
 8007b4c:	3fe00000 	.word	0x3fe00000
 8007b50:	39500000 	.word	0x39500000
 8007b54:	7ff00000 	.word	0x7ff00000
 8007b58:	000fffff 	.word	0x000fffff
 8007b5c:	7fefffff 	.word	0x7fefffff
 8007b60:	3ff00000 	.word	0x3ff00000
 8007b64:	3fe00000 	.word	0x3fe00000
 8007b68:	7fe00000 	.word	0x7fe00000
 8007b6c:	7c9fffff 	.word	0x7c9fffff
 8007b70:	9b08      	ldr	r3, [sp, #32]
 8007b72:	b323      	cbz	r3, 8007bbe <_strtod_l+0xb46>
 8007b74:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007b78:	d821      	bhi.n	8007bbe <_strtod_l+0xb46>
 8007b7a:	a327      	add	r3, pc, #156	@ (adr r3, 8007c18 <_strtod_l+0xba0>)
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	4630      	mov	r0, r6
 8007b82:	4639      	mov	r1, r7
 8007b84:	f7f8 ffd4 	bl	8000b30 <__aeabi_dcmple>
 8007b88:	b1a0      	cbz	r0, 8007bb4 <_strtod_l+0xb3c>
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f7f9 f82b 	bl	8000be8 <__aeabi_d2uiz>
 8007b92:	2801      	cmp	r0, #1
 8007b94:	bf38      	it	cc
 8007b96:	2001      	movcc	r0, #1
 8007b98:	f7f8 fcd4 	bl	8000544 <__aeabi_ui2d>
 8007b9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	460f      	mov	r7, r1
 8007ba2:	b9fb      	cbnz	r3, 8007be4 <_strtod_l+0xb6c>
 8007ba4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ba8:	9014      	str	r0, [sp, #80]	@ 0x50
 8007baa:	9315      	str	r3, [sp, #84]	@ 0x54
 8007bac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007bb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007bb4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007bb6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007bba:	1b5b      	subs	r3, r3, r5
 8007bbc:	9311      	str	r3, [sp, #68]	@ 0x44
 8007bbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bc2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007bc6:	f7ff f8ff 	bl	8006dc8 <__ulp>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4650      	mov	r0, sl
 8007bd0:	4659      	mov	r1, fp
 8007bd2:	f7f8 fd31 	bl	8000638 <__aeabi_dmul>
 8007bd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007bda:	f7f8 fb77 	bl	80002cc <__adddf3>
 8007bde:	4682      	mov	sl, r0
 8007be0:	468b      	mov	fp, r1
 8007be2:	e771      	b.n	8007ac8 <_strtod_l+0xa50>
 8007be4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007be8:	e7e0      	b.n	8007bac <_strtod_l+0xb34>
 8007bea:	a30d      	add	r3, pc, #52	@ (adr r3, 8007c20 <_strtod_l+0xba8>)
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f7f8 ff94 	bl	8000b1c <__aeabi_dcmplt>
 8007bf4:	e799      	b.n	8007b2a <_strtod_l+0xab2>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	930e      	str	r3, [sp, #56]	@ 0x38
 8007bfa:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007bfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	f7ff ba77 	b.w	80070f2 <_strtod_l+0x7a>
 8007c04:	2a65      	cmp	r2, #101	@ 0x65
 8007c06:	f43f ab70 	beq.w	80072ea <_strtod_l+0x272>
 8007c0a:	2a45      	cmp	r2, #69	@ 0x45
 8007c0c:	f43f ab6d 	beq.w	80072ea <_strtod_l+0x272>
 8007c10:	2301      	movs	r3, #1
 8007c12:	f7ff bba8 	b.w	8007366 <_strtod_l+0x2ee>
 8007c16:	bf00      	nop
 8007c18:	ffc00000 	.word	0xffc00000
 8007c1c:	41dfffff 	.word	0x41dfffff
 8007c20:	94a03595 	.word	0x94a03595
 8007c24:	3fcfffff 	.word	0x3fcfffff

08007c28 <_strtod_r>:
 8007c28:	4b01      	ldr	r3, [pc, #4]	@ (8007c30 <_strtod_r+0x8>)
 8007c2a:	f7ff ba25 	b.w	8007078 <_strtod_l>
 8007c2e:	bf00      	nop
 8007c30:	20000068 	.word	0x20000068

08007c34 <_strtol_l.isra.0>:
 8007c34:	2b24      	cmp	r3, #36	@ 0x24
 8007c36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c3a:	4686      	mov	lr, r0
 8007c3c:	4690      	mov	r8, r2
 8007c3e:	d801      	bhi.n	8007c44 <_strtol_l.isra.0+0x10>
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d106      	bne.n	8007c52 <_strtol_l.isra.0+0x1e>
 8007c44:	f7fd fdc8 	bl	80057d8 <__errno>
 8007c48:	2316      	movs	r3, #22
 8007c4a:	6003      	str	r3, [r0, #0]
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c52:	4834      	ldr	r0, [pc, #208]	@ (8007d24 <_strtol_l.isra.0+0xf0>)
 8007c54:	460d      	mov	r5, r1
 8007c56:	462a      	mov	r2, r5
 8007c58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c5c:	5d06      	ldrb	r6, [r0, r4]
 8007c5e:	f016 0608 	ands.w	r6, r6, #8
 8007c62:	d1f8      	bne.n	8007c56 <_strtol_l.isra.0+0x22>
 8007c64:	2c2d      	cmp	r4, #45	@ 0x2d
 8007c66:	d110      	bne.n	8007c8a <_strtol_l.isra.0+0x56>
 8007c68:	782c      	ldrb	r4, [r5, #0]
 8007c6a:	2601      	movs	r6, #1
 8007c6c:	1c95      	adds	r5, r2, #2
 8007c6e:	f033 0210 	bics.w	r2, r3, #16
 8007c72:	d115      	bne.n	8007ca0 <_strtol_l.isra.0+0x6c>
 8007c74:	2c30      	cmp	r4, #48	@ 0x30
 8007c76:	d10d      	bne.n	8007c94 <_strtol_l.isra.0+0x60>
 8007c78:	782a      	ldrb	r2, [r5, #0]
 8007c7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c7e:	2a58      	cmp	r2, #88	@ 0x58
 8007c80:	d108      	bne.n	8007c94 <_strtol_l.isra.0+0x60>
 8007c82:	786c      	ldrb	r4, [r5, #1]
 8007c84:	3502      	adds	r5, #2
 8007c86:	2310      	movs	r3, #16
 8007c88:	e00a      	b.n	8007ca0 <_strtol_l.isra.0+0x6c>
 8007c8a:	2c2b      	cmp	r4, #43	@ 0x2b
 8007c8c:	bf04      	itt	eq
 8007c8e:	782c      	ldrbeq	r4, [r5, #0]
 8007c90:	1c95      	addeq	r5, r2, #2
 8007c92:	e7ec      	b.n	8007c6e <_strtol_l.isra.0+0x3a>
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1f6      	bne.n	8007c86 <_strtol_l.isra.0+0x52>
 8007c98:	2c30      	cmp	r4, #48	@ 0x30
 8007c9a:	bf14      	ite	ne
 8007c9c:	230a      	movne	r3, #10
 8007c9e:	2308      	moveq	r3, #8
 8007ca0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007ca4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007ca8:	2200      	movs	r2, #0
 8007caa:	fbbc f9f3 	udiv	r9, ip, r3
 8007cae:	4610      	mov	r0, r2
 8007cb0:	fb03 ca19 	mls	sl, r3, r9, ip
 8007cb4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007cb8:	2f09      	cmp	r7, #9
 8007cba:	d80f      	bhi.n	8007cdc <_strtol_l.isra.0+0xa8>
 8007cbc:	463c      	mov	r4, r7
 8007cbe:	42a3      	cmp	r3, r4
 8007cc0:	dd1b      	ble.n	8007cfa <_strtol_l.isra.0+0xc6>
 8007cc2:	1c57      	adds	r7, r2, #1
 8007cc4:	d007      	beq.n	8007cd6 <_strtol_l.isra.0+0xa2>
 8007cc6:	4581      	cmp	r9, r0
 8007cc8:	d314      	bcc.n	8007cf4 <_strtol_l.isra.0+0xc0>
 8007cca:	d101      	bne.n	8007cd0 <_strtol_l.isra.0+0x9c>
 8007ccc:	45a2      	cmp	sl, r4
 8007cce:	db11      	blt.n	8007cf4 <_strtol_l.isra.0+0xc0>
 8007cd0:	fb00 4003 	mla	r0, r0, r3, r4
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cda:	e7eb      	b.n	8007cb4 <_strtol_l.isra.0+0x80>
 8007cdc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007ce0:	2f19      	cmp	r7, #25
 8007ce2:	d801      	bhi.n	8007ce8 <_strtol_l.isra.0+0xb4>
 8007ce4:	3c37      	subs	r4, #55	@ 0x37
 8007ce6:	e7ea      	b.n	8007cbe <_strtol_l.isra.0+0x8a>
 8007ce8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007cec:	2f19      	cmp	r7, #25
 8007cee:	d804      	bhi.n	8007cfa <_strtol_l.isra.0+0xc6>
 8007cf0:	3c57      	subs	r4, #87	@ 0x57
 8007cf2:	e7e4      	b.n	8007cbe <_strtol_l.isra.0+0x8a>
 8007cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf8:	e7ed      	b.n	8007cd6 <_strtol_l.isra.0+0xa2>
 8007cfa:	1c53      	adds	r3, r2, #1
 8007cfc:	d108      	bne.n	8007d10 <_strtol_l.isra.0+0xdc>
 8007cfe:	2322      	movs	r3, #34	@ 0x22
 8007d00:	f8ce 3000 	str.w	r3, [lr]
 8007d04:	4660      	mov	r0, ip
 8007d06:	f1b8 0f00 	cmp.w	r8, #0
 8007d0a:	d0a0      	beq.n	8007c4e <_strtol_l.isra.0+0x1a>
 8007d0c:	1e69      	subs	r1, r5, #1
 8007d0e:	e006      	b.n	8007d1e <_strtol_l.isra.0+0xea>
 8007d10:	b106      	cbz	r6, 8007d14 <_strtol_l.isra.0+0xe0>
 8007d12:	4240      	negs	r0, r0
 8007d14:	f1b8 0f00 	cmp.w	r8, #0
 8007d18:	d099      	beq.n	8007c4e <_strtol_l.isra.0+0x1a>
 8007d1a:	2a00      	cmp	r2, #0
 8007d1c:	d1f6      	bne.n	8007d0c <_strtol_l.isra.0+0xd8>
 8007d1e:	f8c8 1000 	str.w	r1, [r8]
 8007d22:	e794      	b.n	8007c4e <_strtol_l.isra.0+0x1a>
 8007d24:	08009349 	.word	0x08009349

08007d28 <_strtol_r>:
 8007d28:	f7ff bf84 	b.w	8007c34 <_strtol_l.isra.0>

08007d2c <__ssputs_r>:
 8007d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d30:	688e      	ldr	r6, [r1, #8]
 8007d32:	461f      	mov	r7, r3
 8007d34:	42be      	cmp	r6, r7
 8007d36:	680b      	ldr	r3, [r1, #0]
 8007d38:	4682      	mov	sl, r0
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	4690      	mov	r8, r2
 8007d3e:	d82d      	bhi.n	8007d9c <__ssputs_r+0x70>
 8007d40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d48:	d026      	beq.n	8007d98 <__ssputs_r+0x6c>
 8007d4a:	6965      	ldr	r5, [r4, #20]
 8007d4c:	6909      	ldr	r1, [r1, #16]
 8007d4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d52:	eba3 0901 	sub.w	r9, r3, r1
 8007d56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d5a:	1c7b      	adds	r3, r7, #1
 8007d5c:	444b      	add	r3, r9
 8007d5e:	106d      	asrs	r5, r5, #1
 8007d60:	429d      	cmp	r5, r3
 8007d62:	bf38      	it	cc
 8007d64:	461d      	movcc	r5, r3
 8007d66:	0553      	lsls	r3, r2, #21
 8007d68:	d527      	bpl.n	8007dba <__ssputs_r+0x8e>
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	f7fe fc34 	bl	80065d8 <_malloc_r>
 8007d70:	4606      	mov	r6, r0
 8007d72:	b360      	cbz	r0, 8007dce <__ssputs_r+0xa2>
 8007d74:	6921      	ldr	r1, [r4, #16]
 8007d76:	464a      	mov	r2, r9
 8007d78:	f000 fa18 	bl	80081ac <memcpy>
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d86:	81a3      	strh	r3, [r4, #12]
 8007d88:	6126      	str	r6, [r4, #16]
 8007d8a:	6165      	str	r5, [r4, #20]
 8007d8c:	444e      	add	r6, r9
 8007d8e:	eba5 0509 	sub.w	r5, r5, r9
 8007d92:	6026      	str	r6, [r4, #0]
 8007d94:	60a5      	str	r5, [r4, #8]
 8007d96:	463e      	mov	r6, r7
 8007d98:	42be      	cmp	r6, r7
 8007d9a:	d900      	bls.n	8007d9e <__ssputs_r+0x72>
 8007d9c:	463e      	mov	r6, r7
 8007d9e:	6820      	ldr	r0, [r4, #0]
 8007da0:	4632      	mov	r2, r6
 8007da2:	4641      	mov	r1, r8
 8007da4:	f000 f9c6 	bl	8008134 <memmove>
 8007da8:	68a3      	ldr	r3, [r4, #8]
 8007daa:	1b9b      	subs	r3, r3, r6
 8007dac:	60a3      	str	r3, [r4, #8]
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	4433      	add	r3, r6
 8007db2:	6023      	str	r3, [r4, #0]
 8007db4:	2000      	movs	r0, #0
 8007db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dba:	462a      	mov	r2, r5
 8007dbc:	f000 fd87 	bl	80088ce <_realloc_r>
 8007dc0:	4606      	mov	r6, r0
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d1e0      	bne.n	8007d88 <__ssputs_r+0x5c>
 8007dc6:	6921      	ldr	r1, [r4, #16]
 8007dc8:	4650      	mov	r0, sl
 8007dca:	f7fe fb91 	bl	80064f0 <_free_r>
 8007dce:	230c      	movs	r3, #12
 8007dd0:	f8ca 3000 	str.w	r3, [sl]
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dda:	81a3      	strh	r3, [r4, #12]
 8007ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8007de0:	e7e9      	b.n	8007db6 <__ssputs_r+0x8a>
	...

08007de4 <_svfiprintf_r>:
 8007de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de8:	4698      	mov	r8, r3
 8007dea:	898b      	ldrh	r3, [r1, #12]
 8007dec:	061b      	lsls	r3, r3, #24
 8007dee:	b09d      	sub	sp, #116	@ 0x74
 8007df0:	4607      	mov	r7, r0
 8007df2:	460d      	mov	r5, r1
 8007df4:	4614      	mov	r4, r2
 8007df6:	d510      	bpl.n	8007e1a <_svfiprintf_r+0x36>
 8007df8:	690b      	ldr	r3, [r1, #16]
 8007dfa:	b973      	cbnz	r3, 8007e1a <_svfiprintf_r+0x36>
 8007dfc:	2140      	movs	r1, #64	@ 0x40
 8007dfe:	f7fe fbeb 	bl	80065d8 <_malloc_r>
 8007e02:	6028      	str	r0, [r5, #0]
 8007e04:	6128      	str	r0, [r5, #16]
 8007e06:	b930      	cbnz	r0, 8007e16 <_svfiprintf_r+0x32>
 8007e08:	230c      	movs	r3, #12
 8007e0a:	603b      	str	r3, [r7, #0]
 8007e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e10:	b01d      	add	sp, #116	@ 0x74
 8007e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e16:	2340      	movs	r3, #64	@ 0x40
 8007e18:	616b      	str	r3, [r5, #20]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e1e:	2320      	movs	r3, #32
 8007e20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e24:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e28:	2330      	movs	r3, #48	@ 0x30
 8007e2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007fc8 <_svfiprintf_r+0x1e4>
 8007e2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e32:	f04f 0901 	mov.w	r9, #1
 8007e36:	4623      	mov	r3, r4
 8007e38:	469a      	mov	sl, r3
 8007e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e3e:	b10a      	cbz	r2, 8007e44 <_svfiprintf_r+0x60>
 8007e40:	2a25      	cmp	r2, #37	@ 0x25
 8007e42:	d1f9      	bne.n	8007e38 <_svfiprintf_r+0x54>
 8007e44:	ebba 0b04 	subs.w	fp, sl, r4
 8007e48:	d00b      	beq.n	8007e62 <_svfiprintf_r+0x7e>
 8007e4a:	465b      	mov	r3, fp
 8007e4c:	4622      	mov	r2, r4
 8007e4e:	4629      	mov	r1, r5
 8007e50:	4638      	mov	r0, r7
 8007e52:	f7ff ff6b 	bl	8007d2c <__ssputs_r>
 8007e56:	3001      	adds	r0, #1
 8007e58:	f000 80a7 	beq.w	8007faa <_svfiprintf_r+0x1c6>
 8007e5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e5e:	445a      	add	r2, fp
 8007e60:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e62:	f89a 3000 	ldrb.w	r3, [sl]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 809f 	beq.w	8007faa <_svfiprintf_r+0x1c6>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e76:	f10a 0a01 	add.w	sl, sl, #1
 8007e7a:	9304      	str	r3, [sp, #16]
 8007e7c:	9307      	str	r3, [sp, #28]
 8007e7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e82:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e84:	4654      	mov	r4, sl
 8007e86:	2205      	movs	r2, #5
 8007e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e8c:	484e      	ldr	r0, [pc, #312]	@ (8007fc8 <_svfiprintf_r+0x1e4>)
 8007e8e:	f7f8 f9bf 	bl	8000210 <memchr>
 8007e92:	9a04      	ldr	r2, [sp, #16]
 8007e94:	b9d8      	cbnz	r0, 8007ece <_svfiprintf_r+0xea>
 8007e96:	06d0      	lsls	r0, r2, #27
 8007e98:	bf44      	itt	mi
 8007e9a:	2320      	movmi	r3, #32
 8007e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ea0:	0711      	lsls	r1, r2, #28
 8007ea2:	bf44      	itt	mi
 8007ea4:	232b      	movmi	r3, #43	@ 0x2b
 8007ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8007eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eb0:	d015      	beq.n	8007ede <_svfiprintf_r+0xfa>
 8007eb2:	9a07      	ldr	r2, [sp, #28]
 8007eb4:	4654      	mov	r4, sl
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	f04f 0c0a 	mov.w	ip, #10
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ec2:	3b30      	subs	r3, #48	@ 0x30
 8007ec4:	2b09      	cmp	r3, #9
 8007ec6:	d94b      	bls.n	8007f60 <_svfiprintf_r+0x17c>
 8007ec8:	b1b0      	cbz	r0, 8007ef8 <_svfiprintf_r+0x114>
 8007eca:	9207      	str	r2, [sp, #28]
 8007ecc:	e014      	b.n	8007ef8 <_svfiprintf_r+0x114>
 8007ece:	eba0 0308 	sub.w	r3, r0, r8
 8007ed2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	9304      	str	r3, [sp, #16]
 8007eda:	46a2      	mov	sl, r4
 8007edc:	e7d2      	b.n	8007e84 <_svfiprintf_r+0xa0>
 8007ede:	9b03      	ldr	r3, [sp, #12]
 8007ee0:	1d19      	adds	r1, r3, #4
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	9103      	str	r1, [sp, #12]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bfbb      	ittet	lt
 8007eea:	425b      	neglt	r3, r3
 8007eec:	f042 0202 	orrlt.w	r2, r2, #2
 8007ef0:	9307      	strge	r3, [sp, #28]
 8007ef2:	9307      	strlt	r3, [sp, #28]
 8007ef4:	bfb8      	it	lt
 8007ef6:	9204      	strlt	r2, [sp, #16]
 8007ef8:	7823      	ldrb	r3, [r4, #0]
 8007efa:	2b2e      	cmp	r3, #46	@ 0x2e
 8007efc:	d10a      	bne.n	8007f14 <_svfiprintf_r+0x130>
 8007efe:	7863      	ldrb	r3, [r4, #1]
 8007f00:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f02:	d132      	bne.n	8007f6a <_svfiprintf_r+0x186>
 8007f04:	9b03      	ldr	r3, [sp, #12]
 8007f06:	1d1a      	adds	r2, r3, #4
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	9203      	str	r2, [sp, #12]
 8007f0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f10:	3402      	adds	r4, #2
 8007f12:	9305      	str	r3, [sp, #20]
 8007f14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007fd8 <_svfiprintf_r+0x1f4>
 8007f18:	7821      	ldrb	r1, [r4, #0]
 8007f1a:	2203      	movs	r2, #3
 8007f1c:	4650      	mov	r0, sl
 8007f1e:	f7f8 f977 	bl	8000210 <memchr>
 8007f22:	b138      	cbz	r0, 8007f34 <_svfiprintf_r+0x150>
 8007f24:	9b04      	ldr	r3, [sp, #16]
 8007f26:	eba0 000a 	sub.w	r0, r0, sl
 8007f2a:	2240      	movs	r2, #64	@ 0x40
 8007f2c:	4082      	lsls	r2, r0
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	3401      	adds	r4, #1
 8007f32:	9304      	str	r3, [sp, #16]
 8007f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f38:	4824      	ldr	r0, [pc, #144]	@ (8007fcc <_svfiprintf_r+0x1e8>)
 8007f3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f3e:	2206      	movs	r2, #6
 8007f40:	f7f8 f966 	bl	8000210 <memchr>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d036      	beq.n	8007fb6 <_svfiprintf_r+0x1d2>
 8007f48:	4b21      	ldr	r3, [pc, #132]	@ (8007fd0 <_svfiprintf_r+0x1ec>)
 8007f4a:	bb1b      	cbnz	r3, 8007f94 <_svfiprintf_r+0x1b0>
 8007f4c:	9b03      	ldr	r3, [sp, #12]
 8007f4e:	3307      	adds	r3, #7
 8007f50:	f023 0307 	bic.w	r3, r3, #7
 8007f54:	3308      	adds	r3, #8
 8007f56:	9303      	str	r3, [sp, #12]
 8007f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f5a:	4433      	add	r3, r6
 8007f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f5e:	e76a      	b.n	8007e36 <_svfiprintf_r+0x52>
 8007f60:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f64:	460c      	mov	r4, r1
 8007f66:	2001      	movs	r0, #1
 8007f68:	e7a8      	b.n	8007ebc <_svfiprintf_r+0xd8>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	3401      	adds	r4, #1
 8007f6e:	9305      	str	r3, [sp, #20]
 8007f70:	4619      	mov	r1, r3
 8007f72:	f04f 0c0a 	mov.w	ip, #10
 8007f76:	4620      	mov	r0, r4
 8007f78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f7c:	3a30      	subs	r2, #48	@ 0x30
 8007f7e:	2a09      	cmp	r2, #9
 8007f80:	d903      	bls.n	8007f8a <_svfiprintf_r+0x1a6>
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d0c6      	beq.n	8007f14 <_svfiprintf_r+0x130>
 8007f86:	9105      	str	r1, [sp, #20]
 8007f88:	e7c4      	b.n	8007f14 <_svfiprintf_r+0x130>
 8007f8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f8e:	4604      	mov	r4, r0
 8007f90:	2301      	movs	r3, #1
 8007f92:	e7f0      	b.n	8007f76 <_svfiprintf_r+0x192>
 8007f94:	ab03      	add	r3, sp, #12
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	462a      	mov	r2, r5
 8007f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd4 <_svfiprintf_r+0x1f0>)
 8007f9c:	a904      	add	r1, sp, #16
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	f7fc fcaa 	bl	80048f8 <_printf_float>
 8007fa4:	1c42      	adds	r2, r0, #1
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	d1d6      	bne.n	8007f58 <_svfiprintf_r+0x174>
 8007faa:	89ab      	ldrh	r3, [r5, #12]
 8007fac:	065b      	lsls	r3, r3, #25
 8007fae:	f53f af2d 	bmi.w	8007e0c <_svfiprintf_r+0x28>
 8007fb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fb4:	e72c      	b.n	8007e10 <_svfiprintf_r+0x2c>
 8007fb6:	ab03      	add	r3, sp, #12
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	462a      	mov	r2, r5
 8007fbc:	4b05      	ldr	r3, [pc, #20]	@ (8007fd4 <_svfiprintf_r+0x1f0>)
 8007fbe:	a904      	add	r1, sp, #16
 8007fc0:	4638      	mov	r0, r7
 8007fc2:	f7fc ff33 	bl	8004e2c <_printf_i>
 8007fc6:	e7ed      	b.n	8007fa4 <_svfiprintf_r+0x1c0>
 8007fc8:	08009141 	.word	0x08009141
 8007fcc:	0800914b 	.word	0x0800914b
 8007fd0:	080048f9 	.word	0x080048f9
 8007fd4:	08007d2d 	.word	0x08007d2d
 8007fd8:	08009147 	.word	0x08009147

08007fdc <__sflush_r>:
 8007fdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe4:	0716      	lsls	r6, r2, #28
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	460c      	mov	r4, r1
 8007fea:	d454      	bmi.n	8008096 <__sflush_r+0xba>
 8007fec:	684b      	ldr	r3, [r1, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	dc02      	bgt.n	8007ff8 <__sflush_r+0x1c>
 8007ff2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dd48      	ble.n	800808a <__sflush_r+0xae>
 8007ff8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ffa:	2e00      	cmp	r6, #0
 8007ffc:	d045      	beq.n	800808a <__sflush_r+0xae>
 8007ffe:	2300      	movs	r3, #0
 8008000:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008004:	682f      	ldr	r7, [r5, #0]
 8008006:	6a21      	ldr	r1, [r4, #32]
 8008008:	602b      	str	r3, [r5, #0]
 800800a:	d030      	beq.n	800806e <__sflush_r+0x92>
 800800c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	0759      	lsls	r1, r3, #29
 8008012:	d505      	bpl.n	8008020 <__sflush_r+0x44>
 8008014:	6863      	ldr	r3, [r4, #4]
 8008016:	1ad2      	subs	r2, r2, r3
 8008018:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800801a:	b10b      	cbz	r3, 8008020 <__sflush_r+0x44>
 800801c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800801e:	1ad2      	subs	r2, r2, r3
 8008020:	2300      	movs	r3, #0
 8008022:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008024:	6a21      	ldr	r1, [r4, #32]
 8008026:	4628      	mov	r0, r5
 8008028:	47b0      	blx	r6
 800802a:	1c43      	adds	r3, r0, #1
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	d106      	bne.n	800803e <__sflush_r+0x62>
 8008030:	6829      	ldr	r1, [r5, #0]
 8008032:	291d      	cmp	r1, #29
 8008034:	d82b      	bhi.n	800808e <__sflush_r+0xb2>
 8008036:	4a2a      	ldr	r2, [pc, #168]	@ (80080e0 <__sflush_r+0x104>)
 8008038:	40ca      	lsrs	r2, r1
 800803a:	07d6      	lsls	r6, r2, #31
 800803c:	d527      	bpl.n	800808e <__sflush_r+0xb2>
 800803e:	2200      	movs	r2, #0
 8008040:	6062      	str	r2, [r4, #4]
 8008042:	04d9      	lsls	r1, r3, #19
 8008044:	6922      	ldr	r2, [r4, #16]
 8008046:	6022      	str	r2, [r4, #0]
 8008048:	d504      	bpl.n	8008054 <__sflush_r+0x78>
 800804a:	1c42      	adds	r2, r0, #1
 800804c:	d101      	bne.n	8008052 <__sflush_r+0x76>
 800804e:	682b      	ldr	r3, [r5, #0]
 8008050:	b903      	cbnz	r3, 8008054 <__sflush_r+0x78>
 8008052:	6560      	str	r0, [r4, #84]	@ 0x54
 8008054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008056:	602f      	str	r7, [r5, #0]
 8008058:	b1b9      	cbz	r1, 800808a <__sflush_r+0xae>
 800805a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800805e:	4299      	cmp	r1, r3
 8008060:	d002      	beq.n	8008068 <__sflush_r+0x8c>
 8008062:	4628      	mov	r0, r5
 8008064:	f7fe fa44 	bl	80064f0 <_free_r>
 8008068:	2300      	movs	r3, #0
 800806a:	6363      	str	r3, [r4, #52]	@ 0x34
 800806c:	e00d      	b.n	800808a <__sflush_r+0xae>
 800806e:	2301      	movs	r3, #1
 8008070:	4628      	mov	r0, r5
 8008072:	47b0      	blx	r6
 8008074:	4602      	mov	r2, r0
 8008076:	1c50      	adds	r0, r2, #1
 8008078:	d1c9      	bne.n	800800e <__sflush_r+0x32>
 800807a:	682b      	ldr	r3, [r5, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d0c6      	beq.n	800800e <__sflush_r+0x32>
 8008080:	2b1d      	cmp	r3, #29
 8008082:	d001      	beq.n	8008088 <__sflush_r+0xac>
 8008084:	2b16      	cmp	r3, #22
 8008086:	d11e      	bne.n	80080c6 <__sflush_r+0xea>
 8008088:	602f      	str	r7, [r5, #0]
 800808a:	2000      	movs	r0, #0
 800808c:	e022      	b.n	80080d4 <__sflush_r+0xf8>
 800808e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008092:	b21b      	sxth	r3, r3
 8008094:	e01b      	b.n	80080ce <__sflush_r+0xf2>
 8008096:	690f      	ldr	r7, [r1, #16]
 8008098:	2f00      	cmp	r7, #0
 800809a:	d0f6      	beq.n	800808a <__sflush_r+0xae>
 800809c:	0793      	lsls	r3, r2, #30
 800809e:	680e      	ldr	r6, [r1, #0]
 80080a0:	bf08      	it	eq
 80080a2:	694b      	ldreq	r3, [r1, #20]
 80080a4:	600f      	str	r7, [r1, #0]
 80080a6:	bf18      	it	ne
 80080a8:	2300      	movne	r3, #0
 80080aa:	eba6 0807 	sub.w	r8, r6, r7
 80080ae:	608b      	str	r3, [r1, #8]
 80080b0:	f1b8 0f00 	cmp.w	r8, #0
 80080b4:	dde9      	ble.n	800808a <__sflush_r+0xae>
 80080b6:	6a21      	ldr	r1, [r4, #32]
 80080b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80080ba:	4643      	mov	r3, r8
 80080bc:	463a      	mov	r2, r7
 80080be:	4628      	mov	r0, r5
 80080c0:	47b0      	blx	r6
 80080c2:	2800      	cmp	r0, #0
 80080c4:	dc08      	bgt.n	80080d8 <__sflush_r+0xfc>
 80080c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ce:	81a3      	strh	r3, [r4, #12]
 80080d0:	f04f 30ff 	mov.w	r0, #4294967295
 80080d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d8:	4407      	add	r7, r0
 80080da:	eba8 0800 	sub.w	r8, r8, r0
 80080de:	e7e7      	b.n	80080b0 <__sflush_r+0xd4>
 80080e0:	20400001 	.word	0x20400001

080080e4 <_fflush_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	690b      	ldr	r3, [r1, #16]
 80080e8:	4605      	mov	r5, r0
 80080ea:	460c      	mov	r4, r1
 80080ec:	b913      	cbnz	r3, 80080f4 <_fflush_r+0x10>
 80080ee:	2500      	movs	r5, #0
 80080f0:	4628      	mov	r0, r5
 80080f2:	bd38      	pop	{r3, r4, r5, pc}
 80080f4:	b118      	cbz	r0, 80080fe <_fflush_r+0x1a>
 80080f6:	6a03      	ldr	r3, [r0, #32]
 80080f8:	b90b      	cbnz	r3, 80080fe <_fflush_r+0x1a>
 80080fa:	f7fd fa49 	bl	8005590 <__sinit>
 80080fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0f3      	beq.n	80080ee <_fflush_r+0xa>
 8008106:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008108:	07d0      	lsls	r0, r2, #31
 800810a:	d404      	bmi.n	8008116 <_fflush_r+0x32>
 800810c:	0599      	lsls	r1, r3, #22
 800810e:	d402      	bmi.n	8008116 <_fflush_r+0x32>
 8008110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008112:	f7fd fb8c 	bl	800582e <__retarget_lock_acquire_recursive>
 8008116:	4628      	mov	r0, r5
 8008118:	4621      	mov	r1, r4
 800811a:	f7ff ff5f 	bl	8007fdc <__sflush_r>
 800811e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008120:	07da      	lsls	r2, r3, #31
 8008122:	4605      	mov	r5, r0
 8008124:	d4e4      	bmi.n	80080f0 <_fflush_r+0xc>
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	059b      	lsls	r3, r3, #22
 800812a:	d4e1      	bmi.n	80080f0 <_fflush_r+0xc>
 800812c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800812e:	f7fd fb7f 	bl	8005830 <__retarget_lock_release_recursive>
 8008132:	e7dd      	b.n	80080f0 <_fflush_r+0xc>

08008134 <memmove>:
 8008134:	4288      	cmp	r0, r1
 8008136:	b510      	push	{r4, lr}
 8008138:	eb01 0402 	add.w	r4, r1, r2
 800813c:	d902      	bls.n	8008144 <memmove+0x10>
 800813e:	4284      	cmp	r4, r0
 8008140:	4623      	mov	r3, r4
 8008142:	d807      	bhi.n	8008154 <memmove+0x20>
 8008144:	1e43      	subs	r3, r0, #1
 8008146:	42a1      	cmp	r1, r4
 8008148:	d008      	beq.n	800815c <memmove+0x28>
 800814a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800814e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008152:	e7f8      	b.n	8008146 <memmove+0x12>
 8008154:	4402      	add	r2, r0
 8008156:	4601      	mov	r1, r0
 8008158:	428a      	cmp	r2, r1
 800815a:	d100      	bne.n	800815e <memmove+0x2a>
 800815c:	bd10      	pop	{r4, pc}
 800815e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008166:	e7f7      	b.n	8008158 <memmove+0x24>

08008168 <strncmp>:
 8008168:	b510      	push	{r4, lr}
 800816a:	b16a      	cbz	r2, 8008188 <strncmp+0x20>
 800816c:	3901      	subs	r1, #1
 800816e:	1884      	adds	r4, r0, r2
 8008170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008174:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008178:	429a      	cmp	r2, r3
 800817a:	d103      	bne.n	8008184 <strncmp+0x1c>
 800817c:	42a0      	cmp	r0, r4
 800817e:	d001      	beq.n	8008184 <strncmp+0x1c>
 8008180:	2a00      	cmp	r2, #0
 8008182:	d1f5      	bne.n	8008170 <strncmp+0x8>
 8008184:	1ad0      	subs	r0, r2, r3
 8008186:	bd10      	pop	{r4, pc}
 8008188:	4610      	mov	r0, r2
 800818a:	e7fc      	b.n	8008186 <strncmp+0x1e>

0800818c <_sbrk_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4d06      	ldr	r5, [pc, #24]	@ (80081a8 <_sbrk_r+0x1c>)
 8008190:	2300      	movs	r3, #0
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	602b      	str	r3, [r5, #0]
 8008198:	f7f9 ff2a 	bl	8001ff0 <_sbrk>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_sbrk_r+0x1a>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_sbrk_r+0x1a>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	20000460 	.word	0x20000460

080081ac <memcpy>:
 80081ac:	440a      	add	r2, r1
 80081ae:	4291      	cmp	r1, r2
 80081b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80081b4:	d100      	bne.n	80081b8 <memcpy+0xc>
 80081b6:	4770      	bx	lr
 80081b8:	b510      	push	{r4, lr}
 80081ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081c2:	4291      	cmp	r1, r2
 80081c4:	d1f9      	bne.n	80081ba <memcpy+0xe>
 80081c6:	bd10      	pop	{r4, pc}

080081c8 <nan>:
 80081c8:	4901      	ldr	r1, [pc, #4]	@ (80081d0 <nan+0x8>)
 80081ca:	2000      	movs	r0, #0
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	7ff80000 	.word	0x7ff80000

080081d4 <__assert_func>:
 80081d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081d6:	4614      	mov	r4, r2
 80081d8:	461a      	mov	r2, r3
 80081da:	4b09      	ldr	r3, [pc, #36]	@ (8008200 <__assert_func+0x2c>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4605      	mov	r5, r0
 80081e0:	68d8      	ldr	r0, [r3, #12]
 80081e2:	b14c      	cbz	r4, 80081f8 <__assert_func+0x24>
 80081e4:	4b07      	ldr	r3, [pc, #28]	@ (8008204 <__assert_func+0x30>)
 80081e6:	9100      	str	r1, [sp, #0]
 80081e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081ec:	4906      	ldr	r1, [pc, #24]	@ (8008208 <__assert_func+0x34>)
 80081ee:	462b      	mov	r3, r5
 80081f0:	f000 fba8 	bl	8008944 <fiprintf>
 80081f4:	f000 fbb8 	bl	8008968 <abort>
 80081f8:	4b04      	ldr	r3, [pc, #16]	@ (800820c <__assert_func+0x38>)
 80081fa:	461c      	mov	r4, r3
 80081fc:	e7f3      	b.n	80081e6 <__assert_func+0x12>
 80081fe:	bf00      	nop
 8008200:	20000018 	.word	0x20000018
 8008204:	0800915a 	.word	0x0800915a
 8008208:	08009167 	.word	0x08009167
 800820c:	08009195 	.word	0x08009195

08008210 <_calloc_r>:
 8008210:	b570      	push	{r4, r5, r6, lr}
 8008212:	fba1 5402 	umull	r5, r4, r1, r2
 8008216:	b934      	cbnz	r4, 8008226 <_calloc_r+0x16>
 8008218:	4629      	mov	r1, r5
 800821a:	f7fe f9dd 	bl	80065d8 <_malloc_r>
 800821e:	4606      	mov	r6, r0
 8008220:	b928      	cbnz	r0, 800822e <_calloc_r+0x1e>
 8008222:	4630      	mov	r0, r6
 8008224:	bd70      	pop	{r4, r5, r6, pc}
 8008226:	220c      	movs	r2, #12
 8008228:	6002      	str	r2, [r0, #0]
 800822a:	2600      	movs	r6, #0
 800822c:	e7f9      	b.n	8008222 <_calloc_r+0x12>
 800822e:	462a      	mov	r2, r5
 8008230:	4621      	mov	r1, r4
 8008232:	f7fd fa7e 	bl	8005732 <memset>
 8008236:	e7f4      	b.n	8008222 <_calloc_r+0x12>

08008238 <rshift>:
 8008238:	6903      	ldr	r3, [r0, #16]
 800823a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800823e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008242:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008246:	f100 0414 	add.w	r4, r0, #20
 800824a:	dd45      	ble.n	80082d8 <rshift+0xa0>
 800824c:	f011 011f 	ands.w	r1, r1, #31
 8008250:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008254:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008258:	d10c      	bne.n	8008274 <rshift+0x3c>
 800825a:	f100 0710 	add.w	r7, r0, #16
 800825e:	4629      	mov	r1, r5
 8008260:	42b1      	cmp	r1, r6
 8008262:	d334      	bcc.n	80082ce <rshift+0x96>
 8008264:	1a9b      	subs	r3, r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	1eea      	subs	r2, r5, #3
 800826a:	4296      	cmp	r6, r2
 800826c:	bf38      	it	cc
 800826e:	2300      	movcc	r3, #0
 8008270:	4423      	add	r3, r4
 8008272:	e015      	b.n	80082a0 <rshift+0x68>
 8008274:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008278:	f1c1 0820 	rsb	r8, r1, #32
 800827c:	40cf      	lsrs	r7, r1
 800827e:	f105 0e04 	add.w	lr, r5, #4
 8008282:	46a1      	mov	r9, r4
 8008284:	4576      	cmp	r6, lr
 8008286:	46f4      	mov	ip, lr
 8008288:	d815      	bhi.n	80082b6 <rshift+0x7e>
 800828a:	1a9a      	subs	r2, r3, r2
 800828c:	0092      	lsls	r2, r2, #2
 800828e:	3a04      	subs	r2, #4
 8008290:	3501      	adds	r5, #1
 8008292:	42ae      	cmp	r6, r5
 8008294:	bf38      	it	cc
 8008296:	2200      	movcc	r2, #0
 8008298:	18a3      	adds	r3, r4, r2
 800829a:	50a7      	str	r7, [r4, r2]
 800829c:	b107      	cbz	r7, 80082a0 <rshift+0x68>
 800829e:	3304      	adds	r3, #4
 80082a0:	1b1a      	subs	r2, r3, r4
 80082a2:	42a3      	cmp	r3, r4
 80082a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80082a8:	bf08      	it	eq
 80082aa:	2300      	moveq	r3, #0
 80082ac:	6102      	str	r2, [r0, #16]
 80082ae:	bf08      	it	eq
 80082b0:	6143      	streq	r3, [r0, #20]
 80082b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082b6:	f8dc c000 	ldr.w	ip, [ip]
 80082ba:	fa0c fc08 	lsl.w	ip, ip, r8
 80082be:	ea4c 0707 	orr.w	r7, ip, r7
 80082c2:	f849 7b04 	str.w	r7, [r9], #4
 80082c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082ca:	40cf      	lsrs	r7, r1
 80082cc:	e7da      	b.n	8008284 <rshift+0x4c>
 80082ce:	f851 cb04 	ldr.w	ip, [r1], #4
 80082d2:	f847 cf04 	str.w	ip, [r7, #4]!
 80082d6:	e7c3      	b.n	8008260 <rshift+0x28>
 80082d8:	4623      	mov	r3, r4
 80082da:	e7e1      	b.n	80082a0 <rshift+0x68>

080082dc <__hexdig_fun>:
 80082dc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80082e0:	2b09      	cmp	r3, #9
 80082e2:	d802      	bhi.n	80082ea <__hexdig_fun+0xe>
 80082e4:	3820      	subs	r0, #32
 80082e6:	b2c0      	uxtb	r0, r0
 80082e8:	4770      	bx	lr
 80082ea:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80082ee:	2b05      	cmp	r3, #5
 80082f0:	d801      	bhi.n	80082f6 <__hexdig_fun+0x1a>
 80082f2:	3847      	subs	r0, #71	@ 0x47
 80082f4:	e7f7      	b.n	80082e6 <__hexdig_fun+0xa>
 80082f6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80082fa:	2b05      	cmp	r3, #5
 80082fc:	d801      	bhi.n	8008302 <__hexdig_fun+0x26>
 80082fe:	3827      	subs	r0, #39	@ 0x27
 8008300:	e7f1      	b.n	80082e6 <__hexdig_fun+0xa>
 8008302:	2000      	movs	r0, #0
 8008304:	4770      	bx	lr
	...

08008308 <__gethex>:
 8008308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830c:	b085      	sub	sp, #20
 800830e:	468a      	mov	sl, r1
 8008310:	9302      	str	r3, [sp, #8]
 8008312:	680b      	ldr	r3, [r1, #0]
 8008314:	9001      	str	r0, [sp, #4]
 8008316:	4690      	mov	r8, r2
 8008318:	1c9c      	adds	r4, r3, #2
 800831a:	46a1      	mov	r9, r4
 800831c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008320:	2830      	cmp	r0, #48	@ 0x30
 8008322:	d0fa      	beq.n	800831a <__gethex+0x12>
 8008324:	eba9 0303 	sub.w	r3, r9, r3
 8008328:	f1a3 0b02 	sub.w	fp, r3, #2
 800832c:	f7ff ffd6 	bl	80082dc <__hexdig_fun>
 8008330:	4605      	mov	r5, r0
 8008332:	2800      	cmp	r0, #0
 8008334:	d168      	bne.n	8008408 <__gethex+0x100>
 8008336:	49a0      	ldr	r1, [pc, #640]	@ (80085b8 <__gethex+0x2b0>)
 8008338:	2201      	movs	r2, #1
 800833a:	4648      	mov	r0, r9
 800833c:	f7ff ff14 	bl	8008168 <strncmp>
 8008340:	4607      	mov	r7, r0
 8008342:	2800      	cmp	r0, #0
 8008344:	d167      	bne.n	8008416 <__gethex+0x10e>
 8008346:	f899 0001 	ldrb.w	r0, [r9, #1]
 800834a:	4626      	mov	r6, r4
 800834c:	f7ff ffc6 	bl	80082dc <__hexdig_fun>
 8008350:	2800      	cmp	r0, #0
 8008352:	d062      	beq.n	800841a <__gethex+0x112>
 8008354:	4623      	mov	r3, r4
 8008356:	7818      	ldrb	r0, [r3, #0]
 8008358:	2830      	cmp	r0, #48	@ 0x30
 800835a:	4699      	mov	r9, r3
 800835c:	f103 0301 	add.w	r3, r3, #1
 8008360:	d0f9      	beq.n	8008356 <__gethex+0x4e>
 8008362:	f7ff ffbb 	bl	80082dc <__hexdig_fun>
 8008366:	fab0 f580 	clz	r5, r0
 800836a:	096d      	lsrs	r5, r5, #5
 800836c:	f04f 0b01 	mov.w	fp, #1
 8008370:	464a      	mov	r2, r9
 8008372:	4616      	mov	r6, r2
 8008374:	3201      	adds	r2, #1
 8008376:	7830      	ldrb	r0, [r6, #0]
 8008378:	f7ff ffb0 	bl	80082dc <__hexdig_fun>
 800837c:	2800      	cmp	r0, #0
 800837e:	d1f8      	bne.n	8008372 <__gethex+0x6a>
 8008380:	498d      	ldr	r1, [pc, #564]	@ (80085b8 <__gethex+0x2b0>)
 8008382:	2201      	movs	r2, #1
 8008384:	4630      	mov	r0, r6
 8008386:	f7ff feef 	bl	8008168 <strncmp>
 800838a:	2800      	cmp	r0, #0
 800838c:	d13f      	bne.n	800840e <__gethex+0x106>
 800838e:	b944      	cbnz	r4, 80083a2 <__gethex+0x9a>
 8008390:	1c74      	adds	r4, r6, #1
 8008392:	4622      	mov	r2, r4
 8008394:	4616      	mov	r6, r2
 8008396:	3201      	adds	r2, #1
 8008398:	7830      	ldrb	r0, [r6, #0]
 800839a:	f7ff ff9f 	bl	80082dc <__hexdig_fun>
 800839e:	2800      	cmp	r0, #0
 80083a0:	d1f8      	bne.n	8008394 <__gethex+0x8c>
 80083a2:	1ba4      	subs	r4, r4, r6
 80083a4:	00a7      	lsls	r7, r4, #2
 80083a6:	7833      	ldrb	r3, [r6, #0]
 80083a8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80083ac:	2b50      	cmp	r3, #80	@ 0x50
 80083ae:	d13e      	bne.n	800842e <__gethex+0x126>
 80083b0:	7873      	ldrb	r3, [r6, #1]
 80083b2:	2b2b      	cmp	r3, #43	@ 0x2b
 80083b4:	d033      	beq.n	800841e <__gethex+0x116>
 80083b6:	2b2d      	cmp	r3, #45	@ 0x2d
 80083b8:	d034      	beq.n	8008424 <__gethex+0x11c>
 80083ba:	1c71      	adds	r1, r6, #1
 80083bc:	2400      	movs	r4, #0
 80083be:	7808      	ldrb	r0, [r1, #0]
 80083c0:	f7ff ff8c 	bl	80082dc <__hexdig_fun>
 80083c4:	1e43      	subs	r3, r0, #1
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b18      	cmp	r3, #24
 80083ca:	d830      	bhi.n	800842e <__gethex+0x126>
 80083cc:	f1a0 0210 	sub.w	r2, r0, #16
 80083d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80083d4:	f7ff ff82 	bl	80082dc <__hexdig_fun>
 80083d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80083dc:	fa5f fc8c 	uxtb.w	ip, ip
 80083e0:	f1bc 0f18 	cmp.w	ip, #24
 80083e4:	f04f 030a 	mov.w	r3, #10
 80083e8:	d91e      	bls.n	8008428 <__gethex+0x120>
 80083ea:	b104      	cbz	r4, 80083ee <__gethex+0xe6>
 80083ec:	4252      	negs	r2, r2
 80083ee:	4417      	add	r7, r2
 80083f0:	f8ca 1000 	str.w	r1, [sl]
 80083f4:	b1ed      	cbz	r5, 8008432 <__gethex+0x12a>
 80083f6:	f1bb 0f00 	cmp.w	fp, #0
 80083fa:	bf0c      	ite	eq
 80083fc:	2506      	moveq	r5, #6
 80083fe:	2500      	movne	r5, #0
 8008400:	4628      	mov	r0, r5
 8008402:	b005      	add	sp, #20
 8008404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008408:	2500      	movs	r5, #0
 800840a:	462c      	mov	r4, r5
 800840c:	e7b0      	b.n	8008370 <__gethex+0x68>
 800840e:	2c00      	cmp	r4, #0
 8008410:	d1c7      	bne.n	80083a2 <__gethex+0x9a>
 8008412:	4627      	mov	r7, r4
 8008414:	e7c7      	b.n	80083a6 <__gethex+0x9e>
 8008416:	464e      	mov	r6, r9
 8008418:	462f      	mov	r7, r5
 800841a:	2501      	movs	r5, #1
 800841c:	e7c3      	b.n	80083a6 <__gethex+0x9e>
 800841e:	2400      	movs	r4, #0
 8008420:	1cb1      	adds	r1, r6, #2
 8008422:	e7cc      	b.n	80083be <__gethex+0xb6>
 8008424:	2401      	movs	r4, #1
 8008426:	e7fb      	b.n	8008420 <__gethex+0x118>
 8008428:	fb03 0002 	mla	r0, r3, r2, r0
 800842c:	e7ce      	b.n	80083cc <__gethex+0xc4>
 800842e:	4631      	mov	r1, r6
 8008430:	e7de      	b.n	80083f0 <__gethex+0xe8>
 8008432:	eba6 0309 	sub.w	r3, r6, r9
 8008436:	3b01      	subs	r3, #1
 8008438:	4629      	mov	r1, r5
 800843a:	2b07      	cmp	r3, #7
 800843c:	dc0a      	bgt.n	8008454 <__gethex+0x14c>
 800843e:	9801      	ldr	r0, [sp, #4]
 8008440:	f7fe f956 	bl	80066f0 <_Balloc>
 8008444:	4604      	mov	r4, r0
 8008446:	b940      	cbnz	r0, 800845a <__gethex+0x152>
 8008448:	4b5c      	ldr	r3, [pc, #368]	@ (80085bc <__gethex+0x2b4>)
 800844a:	4602      	mov	r2, r0
 800844c:	21e4      	movs	r1, #228	@ 0xe4
 800844e:	485c      	ldr	r0, [pc, #368]	@ (80085c0 <__gethex+0x2b8>)
 8008450:	f7ff fec0 	bl	80081d4 <__assert_func>
 8008454:	3101      	adds	r1, #1
 8008456:	105b      	asrs	r3, r3, #1
 8008458:	e7ef      	b.n	800843a <__gethex+0x132>
 800845a:	f100 0a14 	add.w	sl, r0, #20
 800845e:	2300      	movs	r3, #0
 8008460:	4655      	mov	r5, sl
 8008462:	469b      	mov	fp, r3
 8008464:	45b1      	cmp	r9, r6
 8008466:	d337      	bcc.n	80084d8 <__gethex+0x1d0>
 8008468:	f845 bb04 	str.w	fp, [r5], #4
 800846c:	eba5 050a 	sub.w	r5, r5, sl
 8008470:	10ad      	asrs	r5, r5, #2
 8008472:	6125      	str	r5, [r4, #16]
 8008474:	4658      	mov	r0, fp
 8008476:	f7fe fa2d 	bl	80068d4 <__hi0bits>
 800847a:	016d      	lsls	r5, r5, #5
 800847c:	f8d8 6000 	ldr.w	r6, [r8]
 8008480:	1a2d      	subs	r5, r5, r0
 8008482:	42b5      	cmp	r5, r6
 8008484:	dd54      	ble.n	8008530 <__gethex+0x228>
 8008486:	1bad      	subs	r5, r5, r6
 8008488:	4629      	mov	r1, r5
 800848a:	4620      	mov	r0, r4
 800848c:	f7fe fdb1 	bl	8006ff2 <__any_on>
 8008490:	4681      	mov	r9, r0
 8008492:	b178      	cbz	r0, 80084b4 <__gethex+0x1ac>
 8008494:	1e6b      	subs	r3, r5, #1
 8008496:	1159      	asrs	r1, r3, #5
 8008498:	f003 021f 	and.w	r2, r3, #31
 800849c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80084a0:	f04f 0901 	mov.w	r9, #1
 80084a4:	fa09 f202 	lsl.w	r2, r9, r2
 80084a8:	420a      	tst	r2, r1
 80084aa:	d003      	beq.n	80084b4 <__gethex+0x1ac>
 80084ac:	454b      	cmp	r3, r9
 80084ae:	dc36      	bgt.n	800851e <__gethex+0x216>
 80084b0:	f04f 0902 	mov.w	r9, #2
 80084b4:	4629      	mov	r1, r5
 80084b6:	4620      	mov	r0, r4
 80084b8:	f7ff febe 	bl	8008238 <rshift>
 80084bc:	442f      	add	r7, r5
 80084be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084c2:	42bb      	cmp	r3, r7
 80084c4:	da42      	bge.n	800854c <__gethex+0x244>
 80084c6:	9801      	ldr	r0, [sp, #4]
 80084c8:	4621      	mov	r1, r4
 80084ca:	f7fe f951 	bl	8006770 <_Bfree>
 80084ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084d0:	2300      	movs	r3, #0
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	25a3      	movs	r5, #163	@ 0xa3
 80084d6:	e793      	b.n	8008400 <__gethex+0xf8>
 80084d8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80084dc:	2a2e      	cmp	r2, #46	@ 0x2e
 80084de:	d012      	beq.n	8008506 <__gethex+0x1fe>
 80084e0:	2b20      	cmp	r3, #32
 80084e2:	d104      	bne.n	80084ee <__gethex+0x1e6>
 80084e4:	f845 bb04 	str.w	fp, [r5], #4
 80084e8:	f04f 0b00 	mov.w	fp, #0
 80084ec:	465b      	mov	r3, fp
 80084ee:	7830      	ldrb	r0, [r6, #0]
 80084f0:	9303      	str	r3, [sp, #12]
 80084f2:	f7ff fef3 	bl	80082dc <__hexdig_fun>
 80084f6:	9b03      	ldr	r3, [sp, #12]
 80084f8:	f000 000f 	and.w	r0, r0, #15
 80084fc:	4098      	lsls	r0, r3
 80084fe:	ea4b 0b00 	orr.w	fp, fp, r0
 8008502:	3304      	adds	r3, #4
 8008504:	e7ae      	b.n	8008464 <__gethex+0x15c>
 8008506:	45b1      	cmp	r9, r6
 8008508:	d8ea      	bhi.n	80084e0 <__gethex+0x1d8>
 800850a:	492b      	ldr	r1, [pc, #172]	@ (80085b8 <__gethex+0x2b0>)
 800850c:	9303      	str	r3, [sp, #12]
 800850e:	2201      	movs	r2, #1
 8008510:	4630      	mov	r0, r6
 8008512:	f7ff fe29 	bl	8008168 <strncmp>
 8008516:	9b03      	ldr	r3, [sp, #12]
 8008518:	2800      	cmp	r0, #0
 800851a:	d1e1      	bne.n	80084e0 <__gethex+0x1d8>
 800851c:	e7a2      	b.n	8008464 <__gethex+0x15c>
 800851e:	1ea9      	subs	r1, r5, #2
 8008520:	4620      	mov	r0, r4
 8008522:	f7fe fd66 	bl	8006ff2 <__any_on>
 8008526:	2800      	cmp	r0, #0
 8008528:	d0c2      	beq.n	80084b0 <__gethex+0x1a8>
 800852a:	f04f 0903 	mov.w	r9, #3
 800852e:	e7c1      	b.n	80084b4 <__gethex+0x1ac>
 8008530:	da09      	bge.n	8008546 <__gethex+0x23e>
 8008532:	1b75      	subs	r5, r6, r5
 8008534:	4621      	mov	r1, r4
 8008536:	9801      	ldr	r0, [sp, #4]
 8008538:	462a      	mov	r2, r5
 800853a:	f7fe fb29 	bl	8006b90 <__lshift>
 800853e:	1b7f      	subs	r7, r7, r5
 8008540:	4604      	mov	r4, r0
 8008542:	f100 0a14 	add.w	sl, r0, #20
 8008546:	f04f 0900 	mov.w	r9, #0
 800854a:	e7b8      	b.n	80084be <__gethex+0x1b6>
 800854c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008550:	42bd      	cmp	r5, r7
 8008552:	dd6f      	ble.n	8008634 <__gethex+0x32c>
 8008554:	1bed      	subs	r5, r5, r7
 8008556:	42ae      	cmp	r6, r5
 8008558:	dc34      	bgt.n	80085c4 <__gethex+0x2bc>
 800855a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800855e:	2b02      	cmp	r3, #2
 8008560:	d022      	beq.n	80085a8 <__gethex+0x2a0>
 8008562:	2b03      	cmp	r3, #3
 8008564:	d024      	beq.n	80085b0 <__gethex+0x2a8>
 8008566:	2b01      	cmp	r3, #1
 8008568:	d115      	bne.n	8008596 <__gethex+0x28e>
 800856a:	42ae      	cmp	r6, r5
 800856c:	d113      	bne.n	8008596 <__gethex+0x28e>
 800856e:	2e01      	cmp	r6, #1
 8008570:	d10b      	bne.n	800858a <__gethex+0x282>
 8008572:	9a02      	ldr	r2, [sp, #8]
 8008574:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008578:	6013      	str	r3, [r2, #0]
 800857a:	2301      	movs	r3, #1
 800857c:	6123      	str	r3, [r4, #16]
 800857e:	f8ca 3000 	str.w	r3, [sl]
 8008582:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008584:	2562      	movs	r5, #98	@ 0x62
 8008586:	601c      	str	r4, [r3, #0]
 8008588:	e73a      	b.n	8008400 <__gethex+0xf8>
 800858a:	1e71      	subs	r1, r6, #1
 800858c:	4620      	mov	r0, r4
 800858e:	f7fe fd30 	bl	8006ff2 <__any_on>
 8008592:	2800      	cmp	r0, #0
 8008594:	d1ed      	bne.n	8008572 <__gethex+0x26a>
 8008596:	9801      	ldr	r0, [sp, #4]
 8008598:	4621      	mov	r1, r4
 800859a:	f7fe f8e9 	bl	8006770 <_Bfree>
 800859e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085a0:	2300      	movs	r3, #0
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	2550      	movs	r5, #80	@ 0x50
 80085a6:	e72b      	b.n	8008400 <__gethex+0xf8>
 80085a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1f3      	bne.n	8008596 <__gethex+0x28e>
 80085ae:	e7e0      	b.n	8008572 <__gethex+0x26a>
 80085b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1dd      	bne.n	8008572 <__gethex+0x26a>
 80085b6:	e7ee      	b.n	8008596 <__gethex+0x28e>
 80085b8:	0800913f 	.word	0x0800913f
 80085bc:	080090d5 	.word	0x080090d5
 80085c0:	08009196 	.word	0x08009196
 80085c4:	1e6f      	subs	r7, r5, #1
 80085c6:	f1b9 0f00 	cmp.w	r9, #0
 80085ca:	d130      	bne.n	800862e <__gethex+0x326>
 80085cc:	b127      	cbz	r7, 80085d8 <__gethex+0x2d0>
 80085ce:	4639      	mov	r1, r7
 80085d0:	4620      	mov	r0, r4
 80085d2:	f7fe fd0e 	bl	8006ff2 <__any_on>
 80085d6:	4681      	mov	r9, r0
 80085d8:	117a      	asrs	r2, r7, #5
 80085da:	2301      	movs	r3, #1
 80085dc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80085e0:	f007 071f 	and.w	r7, r7, #31
 80085e4:	40bb      	lsls	r3, r7
 80085e6:	4213      	tst	r3, r2
 80085e8:	4629      	mov	r1, r5
 80085ea:	4620      	mov	r0, r4
 80085ec:	bf18      	it	ne
 80085ee:	f049 0902 	orrne.w	r9, r9, #2
 80085f2:	f7ff fe21 	bl	8008238 <rshift>
 80085f6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80085fa:	1b76      	subs	r6, r6, r5
 80085fc:	2502      	movs	r5, #2
 80085fe:	f1b9 0f00 	cmp.w	r9, #0
 8008602:	d047      	beq.n	8008694 <__gethex+0x38c>
 8008604:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008608:	2b02      	cmp	r3, #2
 800860a:	d015      	beq.n	8008638 <__gethex+0x330>
 800860c:	2b03      	cmp	r3, #3
 800860e:	d017      	beq.n	8008640 <__gethex+0x338>
 8008610:	2b01      	cmp	r3, #1
 8008612:	d109      	bne.n	8008628 <__gethex+0x320>
 8008614:	f019 0f02 	tst.w	r9, #2
 8008618:	d006      	beq.n	8008628 <__gethex+0x320>
 800861a:	f8da 3000 	ldr.w	r3, [sl]
 800861e:	ea49 0903 	orr.w	r9, r9, r3
 8008622:	f019 0f01 	tst.w	r9, #1
 8008626:	d10e      	bne.n	8008646 <__gethex+0x33e>
 8008628:	f045 0510 	orr.w	r5, r5, #16
 800862c:	e032      	b.n	8008694 <__gethex+0x38c>
 800862e:	f04f 0901 	mov.w	r9, #1
 8008632:	e7d1      	b.n	80085d8 <__gethex+0x2d0>
 8008634:	2501      	movs	r5, #1
 8008636:	e7e2      	b.n	80085fe <__gethex+0x2f6>
 8008638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800863a:	f1c3 0301 	rsb	r3, r3, #1
 800863e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008642:	2b00      	cmp	r3, #0
 8008644:	d0f0      	beq.n	8008628 <__gethex+0x320>
 8008646:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800864a:	f104 0314 	add.w	r3, r4, #20
 800864e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008652:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008656:	f04f 0c00 	mov.w	ip, #0
 800865a:	4618      	mov	r0, r3
 800865c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008660:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008664:	d01b      	beq.n	800869e <__gethex+0x396>
 8008666:	3201      	adds	r2, #1
 8008668:	6002      	str	r2, [r0, #0]
 800866a:	2d02      	cmp	r5, #2
 800866c:	f104 0314 	add.w	r3, r4, #20
 8008670:	d13c      	bne.n	80086ec <__gethex+0x3e4>
 8008672:	f8d8 2000 	ldr.w	r2, [r8]
 8008676:	3a01      	subs	r2, #1
 8008678:	42b2      	cmp	r2, r6
 800867a:	d109      	bne.n	8008690 <__gethex+0x388>
 800867c:	1171      	asrs	r1, r6, #5
 800867e:	2201      	movs	r2, #1
 8008680:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008684:	f006 061f 	and.w	r6, r6, #31
 8008688:	fa02 f606 	lsl.w	r6, r2, r6
 800868c:	421e      	tst	r6, r3
 800868e:	d13a      	bne.n	8008706 <__gethex+0x3fe>
 8008690:	f045 0520 	orr.w	r5, r5, #32
 8008694:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008696:	601c      	str	r4, [r3, #0]
 8008698:	9b02      	ldr	r3, [sp, #8]
 800869a:	601f      	str	r7, [r3, #0]
 800869c:	e6b0      	b.n	8008400 <__gethex+0xf8>
 800869e:	4299      	cmp	r1, r3
 80086a0:	f843 cc04 	str.w	ip, [r3, #-4]
 80086a4:	d8d9      	bhi.n	800865a <__gethex+0x352>
 80086a6:	68a3      	ldr	r3, [r4, #8]
 80086a8:	459b      	cmp	fp, r3
 80086aa:	db17      	blt.n	80086dc <__gethex+0x3d4>
 80086ac:	6861      	ldr	r1, [r4, #4]
 80086ae:	9801      	ldr	r0, [sp, #4]
 80086b0:	3101      	adds	r1, #1
 80086b2:	f7fe f81d 	bl	80066f0 <_Balloc>
 80086b6:	4681      	mov	r9, r0
 80086b8:	b918      	cbnz	r0, 80086c2 <__gethex+0x3ba>
 80086ba:	4b1a      	ldr	r3, [pc, #104]	@ (8008724 <__gethex+0x41c>)
 80086bc:	4602      	mov	r2, r0
 80086be:	2184      	movs	r1, #132	@ 0x84
 80086c0:	e6c5      	b.n	800844e <__gethex+0x146>
 80086c2:	6922      	ldr	r2, [r4, #16]
 80086c4:	3202      	adds	r2, #2
 80086c6:	f104 010c 	add.w	r1, r4, #12
 80086ca:	0092      	lsls	r2, r2, #2
 80086cc:	300c      	adds	r0, #12
 80086ce:	f7ff fd6d 	bl	80081ac <memcpy>
 80086d2:	4621      	mov	r1, r4
 80086d4:	9801      	ldr	r0, [sp, #4]
 80086d6:	f7fe f84b 	bl	8006770 <_Bfree>
 80086da:	464c      	mov	r4, r9
 80086dc:	6923      	ldr	r3, [r4, #16]
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80086e4:	6122      	str	r2, [r4, #16]
 80086e6:	2201      	movs	r2, #1
 80086e8:	615a      	str	r2, [r3, #20]
 80086ea:	e7be      	b.n	800866a <__gethex+0x362>
 80086ec:	6922      	ldr	r2, [r4, #16]
 80086ee:	455a      	cmp	r2, fp
 80086f0:	dd0b      	ble.n	800870a <__gethex+0x402>
 80086f2:	2101      	movs	r1, #1
 80086f4:	4620      	mov	r0, r4
 80086f6:	f7ff fd9f 	bl	8008238 <rshift>
 80086fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80086fe:	3701      	adds	r7, #1
 8008700:	42bb      	cmp	r3, r7
 8008702:	f6ff aee0 	blt.w	80084c6 <__gethex+0x1be>
 8008706:	2501      	movs	r5, #1
 8008708:	e7c2      	b.n	8008690 <__gethex+0x388>
 800870a:	f016 061f 	ands.w	r6, r6, #31
 800870e:	d0fa      	beq.n	8008706 <__gethex+0x3fe>
 8008710:	4453      	add	r3, sl
 8008712:	f1c6 0620 	rsb	r6, r6, #32
 8008716:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800871a:	f7fe f8db 	bl	80068d4 <__hi0bits>
 800871e:	42b0      	cmp	r0, r6
 8008720:	dbe7      	blt.n	80086f2 <__gethex+0x3ea>
 8008722:	e7f0      	b.n	8008706 <__gethex+0x3fe>
 8008724:	080090d5 	.word	0x080090d5

08008728 <L_shift>:
 8008728:	f1c2 0208 	rsb	r2, r2, #8
 800872c:	0092      	lsls	r2, r2, #2
 800872e:	b570      	push	{r4, r5, r6, lr}
 8008730:	f1c2 0620 	rsb	r6, r2, #32
 8008734:	6843      	ldr	r3, [r0, #4]
 8008736:	6804      	ldr	r4, [r0, #0]
 8008738:	fa03 f506 	lsl.w	r5, r3, r6
 800873c:	432c      	orrs	r4, r5
 800873e:	40d3      	lsrs	r3, r2
 8008740:	6004      	str	r4, [r0, #0]
 8008742:	f840 3f04 	str.w	r3, [r0, #4]!
 8008746:	4288      	cmp	r0, r1
 8008748:	d3f4      	bcc.n	8008734 <L_shift+0xc>
 800874a:	bd70      	pop	{r4, r5, r6, pc}

0800874c <__match>:
 800874c:	b530      	push	{r4, r5, lr}
 800874e:	6803      	ldr	r3, [r0, #0]
 8008750:	3301      	adds	r3, #1
 8008752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008756:	b914      	cbnz	r4, 800875e <__match+0x12>
 8008758:	6003      	str	r3, [r0, #0]
 800875a:	2001      	movs	r0, #1
 800875c:	bd30      	pop	{r4, r5, pc}
 800875e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008762:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008766:	2d19      	cmp	r5, #25
 8008768:	bf98      	it	ls
 800876a:	3220      	addls	r2, #32
 800876c:	42a2      	cmp	r2, r4
 800876e:	d0f0      	beq.n	8008752 <__match+0x6>
 8008770:	2000      	movs	r0, #0
 8008772:	e7f3      	b.n	800875c <__match+0x10>

08008774 <__hexnan>:
 8008774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008778:	680b      	ldr	r3, [r1, #0]
 800877a:	6801      	ldr	r1, [r0, #0]
 800877c:	115e      	asrs	r6, r3, #5
 800877e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008782:	f013 031f 	ands.w	r3, r3, #31
 8008786:	b087      	sub	sp, #28
 8008788:	bf18      	it	ne
 800878a:	3604      	addne	r6, #4
 800878c:	2500      	movs	r5, #0
 800878e:	1f37      	subs	r7, r6, #4
 8008790:	4682      	mov	sl, r0
 8008792:	4690      	mov	r8, r2
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	f846 5c04 	str.w	r5, [r6, #-4]
 800879a:	46b9      	mov	r9, r7
 800879c:	463c      	mov	r4, r7
 800879e:	9502      	str	r5, [sp, #8]
 80087a0:	46ab      	mov	fp, r5
 80087a2:	784a      	ldrb	r2, [r1, #1]
 80087a4:	1c4b      	adds	r3, r1, #1
 80087a6:	9303      	str	r3, [sp, #12]
 80087a8:	b342      	cbz	r2, 80087fc <__hexnan+0x88>
 80087aa:	4610      	mov	r0, r2
 80087ac:	9105      	str	r1, [sp, #20]
 80087ae:	9204      	str	r2, [sp, #16]
 80087b0:	f7ff fd94 	bl	80082dc <__hexdig_fun>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d151      	bne.n	800885c <__hexnan+0xe8>
 80087b8:	9a04      	ldr	r2, [sp, #16]
 80087ba:	9905      	ldr	r1, [sp, #20]
 80087bc:	2a20      	cmp	r2, #32
 80087be:	d818      	bhi.n	80087f2 <__hexnan+0x7e>
 80087c0:	9b02      	ldr	r3, [sp, #8]
 80087c2:	459b      	cmp	fp, r3
 80087c4:	dd13      	ble.n	80087ee <__hexnan+0x7a>
 80087c6:	454c      	cmp	r4, r9
 80087c8:	d206      	bcs.n	80087d8 <__hexnan+0x64>
 80087ca:	2d07      	cmp	r5, #7
 80087cc:	dc04      	bgt.n	80087d8 <__hexnan+0x64>
 80087ce:	462a      	mov	r2, r5
 80087d0:	4649      	mov	r1, r9
 80087d2:	4620      	mov	r0, r4
 80087d4:	f7ff ffa8 	bl	8008728 <L_shift>
 80087d8:	4544      	cmp	r4, r8
 80087da:	d952      	bls.n	8008882 <__hexnan+0x10e>
 80087dc:	2300      	movs	r3, #0
 80087de:	f1a4 0904 	sub.w	r9, r4, #4
 80087e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80087e6:	f8cd b008 	str.w	fp, [sp, #8]
 80087ea:	464c      	mov	r4, r9
 80087ec:	461d      	mov	r5, r3
 80087ee:	9903      	ldr	r1, [sp, #12]
 80087f0:	e7d7      	b.n	80087a2 <__hexnan+0x2e>
 80087f2:	2a29      	cmp	r2, #41	@ 0x29
 80087f4:	d157      	bne.n	80088a6 <__hexnan+0x132>
 80087f6:	3102      	adds	r1, #2
 80087f8:	f8ca 1000 	str.w	r1, [sl]
 80087fc:	f1bb 0f00 	cmp.w	fp, #0
 8008800:	d051      	beq.n	80088a6 <__hexnan+0x132>
 8008802:	454c      	cmp	r4, r9
 8008804:	d206      	bcs.n	8008814 <__hexnan+0xa0>
 8008806:	2d07      	cmp	r5, #7
 8008808:	dc04      	bgt.n	8008814 <__hexnan+0xa0>
 800880a:	462a      	mov	r2, r5
 800880c:	4649      	mov	r1, r9
 800880e:	4620      	mov	r0, r4
 8008810:	f7ff ff8a 	bl	8008728 <L_shift>
 8008814:	4544      	cmp	r4, r8
 8008816:	d936      	bls.n	8008886 <__hexnan+0x112>
 8008818:	f1a8 0204 	sub.w	r2, r8, #4
 800881c:	4623      	mov	r3, r4
 800881e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008822:	f842 1f04 	str.w	r1, [r2, #4]!
 8008826:	429f      	cmp	r7, r3
 8008828:	d2f9      	bcs.n	800881e <__hexnan+0xaa>
 800882a:	1b3b      	subs	r3, r7, r4
 800882c:	f023 0303 	bic.w	r3, r3, #3
 8008830:	3304      	adds	r3, #4
 8008832:	3401      	adds	r4, #1
 8008834:	3e03      	subs	r6, #3
 8008836:	42b4      	cmp	r4, r6
 8008838:	bf88      	it	hi
 800883a:	2304      	movhi	r3, #4
 800883c:	4443      	add	r3, r8
 800883e:	2200      	movs	r2, #0
 8008840:	f843 2b04 	str.w	r2, [r3], #4
 8008844:	429f      	cmp	r7, r3
 8008846:	d2fb      	bcs.n	8008840 <__hexnan+0xcc>
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	b91b      	cbnz	r3, 8008854 <__hexnan+0xe0>
 800884c:	4547      	cmp	r7, r8
 800884e:	d128      	bne.n	80088a2 <__hexnan+0x12e>
 8008850:	2301      	movs	r3, #1
 8008852:	603b      	str	r3, [r7, #0]
 8008854:	2005      	movs	r0, #5
 8008856:	b007      	add	sp, #28
 8008858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800885c:	3501      	adds	r5, #1
 800885e:	2d08      	cmp	r5, #8
 8008860:	f10b 0b01 	add.w	fp, fp, #1
 8008864:	dd06      	ble.n	8008874 <__hexnan+0x100>
 8008866:	4544      	cmp	r4, r8
 8008868:	d9c1      	bls.n	80087ee <__hexnan+0x7a>
 800886a:	2300      	movs	r3, #0
 800886c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008870:	2501      	movs	r5, #1
 8008872:	3c04      	subs	r4, #4
 8008874:	6822      	ldr	r2, [r4, #0]
 8008876:	f000 000f 	and.w	r0, r0, #15
 800887a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800887e:	6020      	str	r0, [r4, #0]
 8008880:	e7b5      	b.n	80087ee <__hexnan+0x7a>
 8008882:	2508      	movs	r5, #8
 8008884:	e7b3      	b.n	80087ee <__hexnan+0x7a>
 8008886:	9b01      	ldr	r3, [sp, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d0dd      	beq.n	8008848 <__hexnan+0xd4>
 800888c:	f1c3 0320 	rsb	r3, r3, #32
 8008890:	f04f 32ff 	mov.w	r2, #4294967295
 8008894:	40da      	lsrs	r2, r3
 8008896:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800889a:	4013      	ands	r3, r2
 800889c:	f846 3c04 	str.w	r3, [r6, #-4]
 80088a0:	e7d2      	b.n	8008848 <__hexnan+0xd4>
 80088a2:	3f04      	subs	r7, #4
 80088a4:	e7d0      	b.n	8008848 <__hexnan+0xd4>
 80088a6:	2004      	movs	r0, #4
 80088a8:	e7d5      	b.n	8008856 <__hexnan+0xe2>

080088aa <__ascii_mbtowc>:
 80088aa:	b082      	sub	sp, #8
 80088ac:	b901      	cbnz	r1, 80088b0 <__ascii_mbtowc+0x6>
 80088ae:	a901      	add	r1, sp, #4
 80088b0:	b142      	cbz	r2, 80088c4 <__ascii_mbtowc+0x1a>
 80088b2:	b14b      	cbz	r3, 80088c8 <__ascii_mbtowc+0x1e>
 80088b4:	7813      	ldrb	r3, [r2, #0]
 80088b6:	600b      	str	r3, [r1, #0]
 80088b8:	7812      	ldrb	r2, [r2, #0]
 80088ba:	1e10      	subs	r0, r2, #0
 80088bc:	bf18      	it	ne
 80088be:	2001      	movne	r0, #1
 80088c0:	b002      	add	sp, #8
 80088c2:	4770      	bx	lr
 80088c4:	4610      	mov	r0, r2
 80088c6:	e7fb      	b.n	80088c0 <__ascii_mbtowc+0x16>
 80088c8:	f06f 0001 	mvn.w	r0, #1
 80088cc:	e7f8      	b.n	80088c0 <__ascii_mbtowc+0x16>

080088ce <_realloc_r>:
 80088ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d2:	4607      	mov	r7, r0
 80088d4:	4614      	mov	r4, r2
 80088d6:	460d      	mov	r5, r1
 80088d8:	b921      	cbnz	r1, 80088e4 <_realloc_r+0x16>
 80088da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088de:	4611      	mov	r1, r2
 80088e0:	f7fd be7a 	b.w	80065d8 <_malloc_r>
 80088e4:	b92a      	cbnz	r2, 80088f2 <_realloc_r+0x24>
 80088e6:	f7fd fe03 	bl	80064f0 <_free_r>
 80088ea:	4625      	mov	r5, r4
 80088ec:	4628      	mov	r0, r5
 80088ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f2:	f000 f840 	bl	8008976 <_malloc_usable_size_r>
 80088f6:	4284      	cmp	r4, r0
 80088f8:	4606      	mov	r6, r0
 80088fa:	d802      	bhi.n	8008902 <_realloc_r+0x34>
 80088fc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008900:	d8f4      	bhi.n	80088ec <_realloc_r+0x1e>
 8008902:	4621      	mov	r1, r4
 8008904:	4638      	mov	r0, r7
 8008906:	f7fd fe67 	bl	80065d8 <_malloc_r>
 800890a:	4680      	mov	r8, r0
 800890c:	b908      	cbnz	r0, 8008912 <_realloc_r+0x44>
 800890e:	4645      	mov	r5, r8
 8008910:	e7ec      	b.n	80088ec <_realloc_r+0x1e>
 8008912:	42b4      	cmp	r4, r6
 8008914:	4622      	mov	r2, r4
 8008916:	4629      	mov	r1, r5
 8008918:	bf28      	it	cs
 800891a:	4632      	movcs	r2, r6
 800891c:	f7ff fc46 	bl	80081ac <memcpy>
 8008920:	4629      	mov	r1, r5
 8008922:	4638      	mov	r0, r7
 8008924:	f7fd fde4 	bl	80064f0 <_free_r>
 8008928:	e7f1      	b.n	800890e <_realloc_r+0x40>

0800892a <__ascii_wctomb>:
 800892a:	4603      	mov	r3, r0
 800892c:	4608      	mov	r0, r1
 800892e:	b141      	cbz	r1, 8008942 <__ascii_wctomb+0x18>
 8008930:	2aff      	cmp	r2, #255	@ 0xff
 8008932:	d904      	bls.n	800893e <__ascii_wctomb+0x14>
 8008934:	228a      	movs	r2, #138	@ 0x8a
 8008936:	601a      	str	r2, [r3, #0]
 8008938:	f04f 30ff 	mov.w	r0, #4294967295
 800893c:	4770      	bx	lr
 800893e:	700a      	strb	r2, [r1, #0]
 8008940:	2001      	movs	r0, #1
 8008942:	4770      	bx	lr

08008944 <fiprintf>:
 8008944:	b40e      	push	{r1, r2, r3}
 8008946:	b503      	push	{r0, r1, lr}
 8008948:	4601      	mov	r1, r0
 800894a:	ab03      	add	r3, sp, #12
 800894c:	4805      	ldr	r0, [pc, #20]	@ (8008964 <fiprintf+0x20>)
 800894e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008952:	6800      	ldr	r0, [r0, #0]
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	f000 f83f 	bl	80089d8 <_vfiprintf_r>
 800895a:	b002      	add	sp, #8
 800895c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008960:	b003      	add	sp, #12
 8008962:	4770      	bx	lr
 8008964:	20000018 	.word	0x20000018

08008968 <abort>:
 8008968:	b508      	push	{r3, lr}
 800896a:	2006      	movs	r0, #6
 800896c:	f000 fa08 	bl	8008d80 <raise>
 8008970:	2001      	movs	r0, #1
 8008972:	f7f9 fae0 	bl	8001f36 <_exit>

08008976 <_malloc_usable_size_r>:
 8008976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800897a:	1f18      	subs	r0, r3, #4
 800897c:	2b00      	cmp	r3, #0
 800897e:	bfbc      	itt	lt
 8008980:	580b      	ldrlt	r3, [r1, r0]
 8008982:	18c0      	addlt	r0, r0, r3
 8008984:	4770      	bx	lr

08008986 <__sfputc_r>:
 8008986:	6893      	ldr	r3, [r2, #8]
 8008988:	3b01      	subs	r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	b410      	push	{r4}
 800898e:	6093      	str	r3, [r2, #8]
 8008990:	da08      	bge.n	80089a4 <__sfputc_r+0x1e>
 8008992:	6994      	ldr	r4, [r2, #24]
 8008994:	42a3      	cmp	r3, r4
 8008996:	db01      	blt.n	800899c <__sfputc_r+0x16>
 8008998:	290a      	cmp	r1, #10
 800899a:	d103      	bne.n	80089a4 <__sfputc_r+0x1e>
 800899c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089a0:	f000 b932 	b.w	8008c08 <__swbuf_r>
 80089a4:	6813      	ldr	r3, [r2, #0]
 80089a6:	1c58      	adds	r0, r3, #1
 80089a8:	6010      	str	r0, [r2, #0]
 80089aa:	7019      	strb	r1, [r3, #0]
 80089ac:	4608      	mov	r0, r1
 80089ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <__sfputs_r>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	4606      	mov	r6, r0
 80089b8:	460f      	mov	r7, r1
 80089ba:	4614      	mov	r4, r2
 80089bc:	18d5      	adds	r5, r2, r3
 80089be:	42ac      	cmp	r4, r5
 80089c0:	d101      	bne.n	80089c6 <__sfputs_r+0x12>
 80089c2:	2000      	movs	r0, #0
 80089c4:	e007      	b.n	80089d6 <__sfputs_r+0x22>
 80089c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ca:	463a      	mov	r2, r7
 80089cc:	4630      	mov	r0, r6
 80089ce:	f7ff ffda 	bl	8008986 <__sfputc_r>
 80089d2:	1c43      	adds	r3, r0, #1
 80089d4:	d1f3      	bne.n	80089be <__sfputs_r+0xa>
 80089d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080089d8 <_vfiprintf_r>:
 80089d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089dc:	460d      	mov	r5, r1
 80089de:	b09d      	sub	sp, #116	@ 0x74
 80089e0:	4614      	mov	r4, r2
 80089e2:	4698      	mov	r8, r3
 80089e4:	4606      	mov	r6, r0
 80089e6:	b118      	cbz	r0, 80089f0 <_vfiprintf_r+0x18>
 80089e8:	6a03      	ldr	r3, [r0, #32]
 80089ea:	b90b      	cbnz	r3, 80089f0 <_vfiprintf_r+0x18>
 80089ec:	f7fc fdd0 	bl	8005590 <__sinit>
 80089f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089f2:	07d9      	lsls	r1, r3, #31
 80089f4:	d405      	bmi.n	8008a02 <_vfiprintf_r+0x2a>
 80089f6:	89ab      	ldrh	r3, [r5, #12]
 80089f8:	059a      	lsls	r2, r3, #22
 80089fa:	d402      	bmi.n	8008a02 <_vfiprintf_r+0x2a>
 80089fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089fe:	f7fc ff16 	bl	800582e <__retarget_lock_acquire_recursive>
 8008a02:	89ab      	ldrh	r3, [r5, #12]
 8008a04:	071b      	lsls	r3, r3, #28
 8008a06:	d501      	bpl.n	8008a0c <_vfiprintf_r+0x34>
 8008a08:	692b      	ldr	r3, [r5, #16]
 8008a0a:	b99b      	cbnz	r3, 8008a34 <_vfiprintf_r+0x5c>
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f000 f938 	bl	8008c84 <__swsetup_r>
 8008a14:	b170      	cbz	r0, 8008a34 <_vfiprintf_r+0x5c>
 8008a16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a18:	07dc      	lsls	r4, r3, #31
 8008a1a:	d504      	bpl.n	8008a26 <_vfiprintf_r+0x4e>
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a20:	b01d      	add	sp, #116	@ 0x74
 8008a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a26:	89ab      	ldrh	r3, [r5, #12]
 8008a28:	0598      	lsls	r0, r3, #22
 8008a2a:	d4f7      	bmi.n	8008a1c <_vfiprintf_r+0x44>
 8008a2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a2e:	f7fc feff 	bl	8005830 <__retarget_lock_release_recursive>
 8008a32:	e7f3      	b.n	8008a1c <_vfiprintf_r+0x44>
 8008a34:	2300      	movs	r3, #0
 8008a36:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a38:	2320      	movs	r3, #32
 8008a3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a42:	2330      	movs	r3, #48	@ 0x30
 8008a44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008bf4 <_vfiprintf_r+0x21c>
 8008a48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a4c:	f04f 0901 	mov.w	r9, #1
 8008a50:	4623      	mov	r3, r4
 8008a52:	469a      	mov	sl, r3
 8008a54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a58:	b10a      	cbz	r2, 8008a5e <_vfiprintf_r+0x86>
 8008a5a:	2a25      	cmp	r2, #37	@ 0x25
 8008a5c:	d1f9      	bne.n	8008a52 <_vfiprintf_r+0x7a>
 8008a5e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a62:	d00b      	beq.n	8008a7c <_vfiprintf_r+0xa4>
 8008a64:	465b      	mov	r3, fp
 8008a66:	4622      	mov	r2, r4
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7ff ffa2 	bl	80089b4 <__sfputs_r>
 8008a70:	3001      	adds	r0, #1
 8008a72:	f000 80a7 	beq.w	8008bc4 <_vfiprintf_r+0x1ec>
 8008a76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a78:	445a      	add	r2, fp
 8008a7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 809f 	beq.w	8008bc4 <_vfiprintf_r+0x1ec>
 8008a86:	2300      	movs	r3, #0
 8008a88:	f04f 32ff 	mov.w	r2, #4294967295
 8008a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a90:	f10a 0a01 	add.w	sl, sl, #1
 8008a94:	9304      	str	r3, [sp, #16]
 8008a96:	9307      	str	r3, [sp, #28]
 8008a98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a9e:	4654      	mov	r4, sl
 8008aa0:	2205      	movs	r2, #5
 8008aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aa6:	4853      	ldr	r0, [pc, #332]	@ (8008bf4 <_vfiprintf_r+0x21c>)
 8008aa8:	f7f7 fbb2 	bl	8000210 <memchr>
 8008aac:	9a04      	ldr	r2, [sp, #16]
 8008aae:	b9d8      	cbnz	r0, 8008ae8 <_vfiprintf_r+0x110>
 8008ab0:	06d1      	lsls	r1, r2, #27
 8008ab2:	bf44      	itt	mi
 8008ab4:	2320      	movmi	r3, #32
 8008ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008aba:	0713      	lsls	r3, r2, #28
 8008abc:	bf44      	itt	mi
 8008abe:	232b      	movmi	r3, #43	@ 0x2b
 8008ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ac8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aca:	d015      	beq.n	8008af8 <_vfiprintf_r+0x120>
 8008acc:	9a07      	ldr	r2, [sp, #28]
 8008ace:	4654      	mov	r4, sl
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	f04f 0c0a 	mov.w	ip, #10
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008adc:	3b30      	subs	r3, #48	@ 0x30
 8008ade:	2b09      	cmp	r3, #9
 8008ae0:	d94b      	bls.n	8008b7a <_vfiprintf_r+0x1a2>
 8008ae2:	b1b0      	cbz	r0, 8008b12 <_vfiprintf_r+0x13a>
 8008ae4:	9207      	str	r2, [sp, #28]
 8008ae6:	e014      	b.n	8008b12 <_vfiprintf_r+0x13a>
 8008ae8:	eba0 0308 	sub.w	r3, r0, r8
 8008aec:	fa09 f303 	lsl.w	r3, r9, r3
 8008af0:	4313      	orrs	r3, r2
 8008af2:	9304      	str	r3, [sp, #16]
 8008af4:	46a2      	mov	sl, r4
 8008af6:	e7d2      	b.n	8008a9e <_vfiprintf_r+0xc6>
 8008af8:	9b03      	ldr	r3, [sp, #12]
 8008afa:	1d19      	adds	r1, r3, #4
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	9103      	str	r1, [sp, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	bfbb      	ittet	lt
 8008b04:	425b      	neglt	r3, r3
 8008b06:	f042 0202 	orrlt.w	r2, r2, #2
 8008b0a:	9307      	strge	r3, [sp, #28]
 8008b0c:	9307      	strlt	r3, [sp, #28]
 8008b0e:	bfb8      	it	lt
 8008b10:	9204      	strlt	r2, [sp, #16]
 8008b12:	7823      	ldrb	r3, [r4, #0]
 8008b14:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b16:	d10a      	bne.n	8008b2e <_vfiprintf_r+0x156>
 8008b18:	7863      	ldrb	r3, [r4, #1]
 8008b1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b1c:	d132      	bne.n	8008b84 <_vfiprintf_r+0x1ac>
 8008b1e:	9b03      	ldr	r3, [sp, #12]
 8008b20:	1d1a      	adds	r2, r3, #4
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	9203      	str	r2, [sp, #12]
 8008b26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b2a:	3402      	adds	r4, #2
 8008b2c:	9305      	str	r3, [sp, #20]
 8008b2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c04 <_vfiprintf_r+0x22c>
 8008b32:	7821      	ldrb	r1, [r4, #0]
 8008b34:	2203      	movs	r2, #3
 8008b36:	4650      	mov	r0, sl
 8008b38:	f7f7 fb6a 	bl	8000210 <memchr>
 8008b3c:	b138      	cbz	r0, 8008b4e <_vfiprintf_r+0x176>
 8008b3e:	9b04      	ldr	r3, [sp, #16]
 8008b40:	eba0 000a 	sub.w	r0, r0, sl
 8008b44:	2240      	movs	r2, #64	@ 0x40
 8008b46:	4082      	lsls	r2, r0
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	3401      	adds	r4, #1
 8008b4c:	9304      	str	r3, [sp, #16]
 8008b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b52:	4829      	ldr	r0, [pc, #164]	@ (8008bf8 <_vfiprintf_r+0x220>)
 8008b54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b58:	2206      	movs	r2, #6
 8008b5a:	f7f7 fb59 	bl	8000210 <memchr>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	d03f      	beq.n	8008be2 <_vfiprintf_r+0x20a>
 8008b62:	4b26      	ldr	r3, [pc, #152]	@ (8008bfc <_vfiprintf_r+0x224>)
 8008b64:	bb1b      	cbnz	r3, 8008bae <_vfiprintf_r+0x1d6>
 8008b66:	9b03      	ldr	r3, [sp, #12]
 8008b68:	3307      	adds	r3, #7
 8008b6a:	f023 0307 	bic.w	r3, r3, #7
 8008b6e:	3308      	adds	r3, #8
 8008b70:	9303      	str	r3, [sp, #12]
 8008b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b74:	443b      	add	r3, r7
 8008b76:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b78:	e76a      	b.n	8008a50 <_vfiprintf_r+0x78>
 8008b7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b7e:	460c      	mov	r4, r1
 8008b80:	2001      	movs	r0, #1
 8008b82:	e7a8      	b.n	8008ad6 <_vfiprintf_r+0xfe>
 8008b84:	2300      	movs	r3, #0
 8008b86:	3401      	adds	r4, #1
 8008b88:	9305      	str	r3, [sp, #20]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	f04f 0c0a 	mov.w	ip, #10
 8008b90:	4620      	mov	r0, r4
 8008b92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b96:	3a30      	subs	r2, #48	@ 0x30
 8008b98:	2a09      	cmp	r2, #9
 8008b9a:	d903      	bls.n	8008ba4 <_vfiprintf_r+0x1cc>
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0c6      	beq.n	8008b2e <_vfiprintf_r+0x156>
 8008ba0:	9105      	str	r1, [sp, #20]
 8008ba2:	e7c4      	b.n	8008b2e <_vfiprintf_r+0x156>
 8008ba4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ba8:	4604      	mov	r4, r0
 8008baa:	2301      	movs	r3, #1
 8008bac:	e7f0      	b.n	8008b90 <_vfiprintf_r+0x1b8>
 8008bae:	ab03      	add	r3, sp, #12
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	462a      	mov	r2, r5
 8008bb4:	4b12      	ldr	r3, [pc, #72]	@ (8008c00 <_vfiprintf_r+0x228>)
 8008bb6:	a904      	add	r1, sp, #16
 8008bb8:	4630      	mov	r0, r6
 8008bba:	f7fb fe9d 	bl	80048f8 <_printf_float>
 8008bbe:	4607      	mov	r7, r0
 8008bc0:	1c78      	adds	r0, r7, #1
 8008bc2:	d1d6      	bne.n	8008b72 <_vfiprintf_r+0x19a>
 8008bc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bc6:	07d9      	lsls	r1, r3, #31
 8008bc8:	d405      	bmi.n	8008bd6 <_vfiprintf_r+0x1fe>
 8008bca:	89ab      	ldrh	r3, [r5, #12]
 8008bcc:	059a      	lsls	r2, r3, #22
 8008bce:	d402      	bmi.n	8008bd6 <_vfiprintf_r+0x1fe>
 8008bd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bd2:	f7fc fe2d 	bl	8005830 <__retarget_lock_release_recursive>
 8008bd6:	89ab      	ldrh	r3, [r5, #12]
 8008bd8:	065b      	lsls	r3, r3, #25
 8008bda:	f53f af1f 	bmi.w	8008a1c <_vfiprintf_r+0x44>
 8008bde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008be0:	e71e      	b.n	8008a20 <_vfiprintf_r+0x48>
 8008be2:	ab03      	add	r3, sp, #12
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	462a      	mov	r2, r5
 8008be8:	4b05      	ldr	r3, [pc, #20]	@ (8008c00 <_vfiprintf_r+0x228>)
 8008bea:	a904      	add	r1, sp, #16
 8008bec:	4630      	mov	r0, r6
 8008bee:	f7fc f91d 	bl	8004e2c <_printf_i>
 8008bf2:	e7e4      	b.n	8008bbe <_vfiprintf_r+0x1e6>
 8008bf4:	08009141 	.word	0x08009141
 8008bf8:	0800914b 	.word	0x0800914b
 8008bfc:	080048f9 	.word	0x080048f9
 8008c00:	080089b5 	.word	0x080089b5
 8008c04:	08009147 	.word	0x08009147

08008c08 <__swbuf_r>:
 8008c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0a:	460e      	mov	r6, r1
 8008c0c:	4614      	mov	r4, r2
 8008c0e:	4605      	mov	r5, r0
 8008c10:	b118      	cbz	r0, 8008c1a <__swbuf_r+0x12>
 8008c12:	6a03      	ldr	r3, [r0, #32]
 8008c14:	b90b      	cbnz	r3, 8008c1a <__swbuf_r+0x12>
 8008c16:	f7fc fcbb 	bl	8005590 <__sinit>
 8008c1a:	69a3      	ldr	r3, [r4, #24]
 8008c1c:	60a3      	str	r3, [r4, #8]
 8008c1e:	89a3      	ldrh	r3, [r4, #12]
 8008c20:	071a      	lsls	r2, r3, #28
 8008c22:	d501      	bpl.n	8008c28 <__swbuf_r+0x20>
 8008c24:	6923      	ldr	r3, [r4, #16]
 8008c26:	b943      	cbnz	r3, 8008c3a <__swbuf_r+0x32>
 8008c28:	4621      	mov	r1, r4
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f000 f82a 	bl	8008c84 <__swsetup_r>
 8008c30:	b118      	cbz	r0, 8008c3a <__swbuf_r+0x32>
 8008c32:	f04f 37ff 	mov.w	r7, #4294967295
 8008c36:	4638      	mov	r0, r7
 8008c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	6922      	ldr	r2, [r4, #16]
 8008c3e:	1a98      	subs	r0, r3, r2
 8008c40:	6963      	ldr	r3, [r4, #20]
 8008c42:	b2f6      	uxtb	r6, r6
 8008c44:	4283      	cmp	r3, r0
 8008c46:	4637      	mov	r7, r6
 8008c48:	dc05      	bgt.n	8008c56 <__swbuf_r+0x4e>
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	f7ff fa49 	bl	80080e4 <_fflush_r>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d1ed      	bne.n	8008c32 <__swbuf_r+0x2a>
 8008c56:	68a3      	ldr	r3, [r4, #8]
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	60a3      	str	r3, [r4, #8]
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	1c5a      	adds	r2, r3, #1
 8008c60:	6022      	str	r2, [r4, #0]
 8008c62:	701e      	strb	r6, [r3, #0]
 8008c64:	6962      	ldr	r2, [r4, #20]
 8008c66:	1c43      	adds	r3, r0, #1
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d004      	beq.n	8008c76 <__swbuf_r+0x6e>
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	07db      	lsls	r3, r3, #31
 8008c70:	d5e1      	bpl.n	8008c36 <__swbuf_r+0x2e>
 8008c72:	2e0a      	cmp	r6, #10
 8008c74:	d1df      	bne.n	8008c36 <__swbuf_r+0x2e>
 8008c76:	4621      	mov	r1, r4
 8008c78:	4628      	mov	r0, r5
 8008c7a:	f7ff fa33 	bl	80080e4 <_fflush_r>
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d0d9      	beq.n	8008c36 <__swbuf_r+0x2e>
 8008c82:	e7d6      	b.n	8008c32 <__swbuf_r+0x2a>

08008c84 <__swsetup_r>:
 8008c84:	b538      	push	{r3, r4, r5, lr}
 8008c86:	4b29      	ldr	r3, [pc, #164]	@ (8008d2c <__swsetup_r+0xa8>)
 8008c88:	4605      	mov	r5, r0
 8008c8a:	6818      	ldr	r0, [r3, #0]
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	b118      	cbz	r0, 8008c98 <__swsetup_r+0x14>
 8008c90:	6a03      	ldr	r3, [r0, #32]
 8008c92:	b90b      	cbnz	r3, 8008c98 <__swsetup_r+0x14>
 8008c94:	f7fc fc7c 	bl	8005590 <__sinit>
 8008c98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c9c:	0719      	lsls	r1, r3, #28
 8008c9e:	d422      	bmi.n	8008ce6 <__swsetup_r+0x62>
 8008ca0:	06da      	lsls	r2, r3, #27
 8008ca2:	d407      	bmi.n	8008cb4 <__swsetup_r+0x30>
 8008ca4:	2209      	movs	r2, #9
 8008ca6:	602a      	str	r2, [r5, #0]
 8008ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cac:	81a3      	strh	r3, [r4, #12]
 8008cae:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb2:	e033      	b.n	8008d1c <__swsetup_r+0x98>
 8008cb4:	0758      	lsls	r0, r3, #29
 8008cb6:	d512      	bpl.n	8008cde <__swsetup_r+0x5a>
 8008cb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cba:	b141      	cbz	r1, 8008cce <__swsetup_r+0x4a>
 8008cbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cc0:	4299      	cmp	r1, r3
 8008cc2:	d002      	beq.n	8008cca <__swsetup_r+0x46>
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	f7fd fc13 	bl	80064f0 <_free_r>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008cd4:	81a3      	strh	r3, [r4, #12]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6063      	str	r3, [r4, #4]
 8008cda:	6923      	ldr	r3, [r4, #16]
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	89a3      	ldrh	r3, [r4, #12]
 8008ce0:	f043 0308 	orr.w	r3, r3, #8
 8008ce4:	81a3      	strh	r3, [r4, #12]
 8008ce6:	6923      	ldr	r3, [r4, #16]
 8008ce8:	b94b      	cbnz	r3, 8008cfe <__swsetup_r+0x7a>
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008cf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cf4:	d003      	beq.n	8008cfe <__swsetup_r+0x7a>
 8008cf6:	4621      	mov	r1, r4
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	f000 f883 	bl	8008e04 <__smakebuf_r>
 8008cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d02:	f013 0201 	ands.w	r2, r3, #1
 8008d06:	d00a      	beq.n	8008d1e <__swsetup_r+0x9a>
 8008d08:	2200      	movs	r2, #0
 8008d0a:	60a2      	str	r2, [r4, #8]
 8008d0c:	6962      	ldr	r2, [r4, #20]
 8008d0e:	4252      	negs	r2, r2
 8008d10:	61a2      	str	r2, [r4, #24]
 8008d12:	6922      	ldr	r2, [r4, #16]
 8008d14:	b942      	cbnz	r2, 8008d28 <__swsetup_r+0xa4>
 8008d16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d1a:	d1c5      	bne.n	8008ca8 <__swsetup_r+0x24>
 8008d1c:	bd38      	pop	{r3, r4, r5, pc}
 8008d1e:	0799      	lsls	r1, r3, #30
 8008d20:	bf58      	it	pl
 8008d22:	6962      	ldrpl	r2, [r4, #20]
 8008d24:	60a2      	str	r2, [r4, #8]
 8008d26:	e7f4      	b.n	8008d12 <__swsetup_r+0x8e>
 8008d28:	2000      	movs	r0, #0
 8008d2a:	e7f7      	b.n	8008d1c <__swsetup_r+0x98>
 8008d2c:	20000018 	.word	0x20000018

08008d30 <_raise_r>:
 8008d30:	291f      	cmp	r1, #31
 8008d32:	b538      	push	{r3, r4, r5, lr}
 8008d34:	4605      	mov	r5, r0
 8008d36:	460c      	mov	r4, r1
 8008d38:	d904      	bls.n	8008d44 <_raise_r+0x14>
 8008d3a:	2316      	movs	r3, #22
 8008d3c:	6003      	str	r3, [r0, #0]
 8008d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d42:	bd38      	pop	{r3, r4, r5, pc}
 8008d44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d46:	b112      	cbz	r2, 8008d4e <_raise_r+0x1e>
 8008d48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d4c:	b94b      	cbnz	r3, 8008d62 <_raise_r+0x32>
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f000 f830 	bl	8008db4 <_getpid_r>
 8008d54:	4622      	mov	r2, r4
 8008d56:	4601      	mov	r1, r0
 8008d58:	4628      	mov	r0, r5
 8008d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d5e:	f000 b817 	b.w	8008d90 <_kill_r>
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d00a      	beq.n	8008d7c <_raise_r+0x4c>
 8008d66:	1c59      	adds	r1, r3, #1
 8008d68:	d103      	bne.n	8008d72 <_raise_r+0x42>
 8008d6a:	2316      	movs	r3, #22
 8008d6c:	6003      	str	r3, [r0, #0]
 8008d6e:	2001      	movs	r0, #1
 8008d70:	e7e7      	b.n	8008d42 <_raise_r+0x12>
 8008d72:	2100      	movs	r1, #0
 8008d74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008d78:	4620      	mov	r0, r4
 8008d7a:	4798      	blx	r3
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	e7e0      	b.n	8008d42 <_raise_r+0x12>

08008d80 <raise>:
 8008d80:	4b02      	ldr	r3, [pc, #8]	@ (8008d8c <raise+0xc>)
 8008d82:	4601      	mov	r1, r0
 8008d84:	6818      	ldr	r0, [r3, #0]
 8008d86:	f7ff bfd3 	b.w	8008d30 <_raise_r>
 8008d8a:	bf00      	nop
 8008d8c:	20000018 	.word	0x20000018

08008d90 <_kill_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d07      	ldr	r5, [pc, #28]	@ (8008db0 <_kill_r+0x20>)
 8008d94:	2300      	movs	r3, #0
 8008d96:	4604      	mov	r4, r0
 8008d98:	4608      	mov	r0, r1
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	602b      	str	r3, [r5, #0]
 8008d9e:	f7f9 f8ba 	bl	8001f16 <_kill>
 8008da2:	1c43      	adds	r3, r0, #1
 8008da4:	d102      	bne.n	8008dac <_kill_r+0x1c>
 8008da6:	682b      	ldr	r3, [r5, #0]
 8008da8:	b103      	cbz	r3, 8008dac <_kill_r+0x1c>
 8008daa:	6023      	str	r3, [r4, #0]
 8008dac:	bd38      	pop	{r3, r4, r5, pc}
 8008dae:	bf00      	nop
 8008db0:	20000460 	.word	0x20000460

08008db4 <_getpid_r>:
 8008db4:	f7f9 b8a7 	b.w	8001f06 <_getpid>

08008db8 <__swhatbuf_r>:
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	460c      	mov	r4, r1
 8008dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc0:	2900      	cmp	r1, #0
 8008dc2:	b096      	sub	sp, #88	@ 0x58
 8008dc4:	4615      	mov	r5, r2
 8008dc6:	461e      	mov	r6, r3
 8008dc8:	da0d      	bge.n	8008de6 <__swhatbuf_r+0x2e>
 8008dca:	89a3      	ldrh	r3, [r4, #12]
 8008dcc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008dd0:	f04f 0100 	mov.w	r1, #0
 8008dd4:	bf14      	ite	ne
 8008dd6:	2340      	movne	r3, #64	@ 0x40
 8008dd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ddc:	2000      	movs	r0, #0
 8008dde:	6031      	str	r1, [r6, #0]
 8008de0:	602b      	str	r3, [r5, #0]
 8008de2:	b016      	add	sp, #88	@ 0x58
 8008de4:	bd70      	pop	{r4, r5, r6, pc}
 8008de6:	466a      	mov	r2, sp
 8008de8:	f000 f848 	bl	8008e7c <_fstat_r>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	dbec      	blt.n	8008dca <__swhatbuf_r+0x12>
 8008df0:	9901      	ldr	r1, [sp, #4]
 8008df2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008df6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008dfa:	4259      	negs	r1, r3
 8008dfc:	4159      	adcs	r1, r3
 8008dfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e02:	e7eb      	b.n	8008ddc <__swhatbuf_r+0x24>

08008e04 <__smakebuf_r>:
 8008e04:	898b      	ldrh	r3, [r1, #12]
 8008e06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e08:	079d      	lsls	r5, r3, #30
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	460c      	mov	r4, r1
 8008e0e:	d507      	bpl.n	8008e20 <__smakebuf_r+0x1c>
 8008e10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	6123      	str	r3, [r4, #16]
 8008e18:	2301      	movs	r3, #1
 8008e1a:	6163      	str	r3, [r4, #20]
 8008e1c:	b003      	add	sp, #12
 8008e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e20:	ab01      	add	r3, sp, #4
 8008e22:	466a      	mov	r2, sp
 8008e24:	f7ff ffc8 	bl	8008db8 <__swhatbuf_r>
 8008e28:	9f00      	ldr	r7, [sp, #0]
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f7fd fbd2 	bl	80065d8 <_malloc_r>
 8008e34:	b948      	cbnz	r0, 8008e4a <__smakebuf_r+0x46>
 8008e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e3a:	059a      	lsls	r2, r3, #22
 8008e3c:	d4ee      	bmi.n	8008e1c <__smakebuf_r+0x18>
 8008e3e:	f023 0303 	bic.w	r3, r3, #3
 8008e42:	f043 0302 	orr.w	r3, r3, #2
 8008e46:	81a3      	strh	r3, [r4, #12]
 8008e48:	e7e2      	b.n	8008e10 <__smakebuf_r+0xc>
 8008e4a:	89a3      	ldrh	r3, [r4, #12]
 8008e4c:	6020      	str	r0, [r4, #0]
 8008e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e52:	81a3      	strh	r3, [r4, #12]
 8008e54:	9b01      	ldr	r3, [sp, #4]
 8008e56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e5a:	b15b      	cbz	r3, 8008e74 <__smakebuf_r+0x70>
 8008e5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e60:	4630      	mov	r0, r6
 8008e62:	f000 f81d 	bl	8008ea0 <_isatty_r>
 8008e66:	b128      	cbz	r0, 8008e74 <__smakebuf_r+0x70>
 8008e68:	89a3      	ldrh	r3, [r4, #12]
 8008e6a:	f023 0303 	bic.w	r3, r3, #3
 8008e6e:	f043 0301 	orr.w	r3, r3, #1
 8008e72:	81a3      	strh	r3, [r4, #12]
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	431d      	orrs	r5, r3
 8008e78:	81a5      	strh	r5, [r4, #12]
 8008e7a:	e7cf      	b.n	8008e1c <__smakebuf_r+0x18>

08008e7c <_fstat_r>:
 8008e7c:	b538      	push	{r3, r4, r5, lr}
 8008e7e:	4d07      	ldr	r5, [pc, #28]	@ (8008e9c <_fstat_r+0x20>)
 8008e80:	2300      	movs	r3, #0
 8008e82:	4604      	mov	r4, r0
 8008e84:	4608      	mov	r0, r1
 8008e86:	4611      	mov	r1, r2
 8008e88:	602b      	str	r3, [r5, #0]
 8008e8a:	f7f9 f888 	bl	8001f9e <_fstat>
 8008e8e:	1c43      	adds	r3, r0, #1
 8008e90:	d102      	bne.n	8008e98 <_fstat_r+0x1c>
 8008e92:	682b      	ldr	r3, [r5, #0]
 8008e94:	b103      	cbz	r3, 8008e98 <_fstat_r+0x1c>
 8008e96:	6023      	str	r3, [r4, #0]
 8008e98:	bd38      	pop	{r3, r4, r5, pc}
 8008e9a:	bf00      	nop
 8008e9c:	20000460 	.word	0x20000460

08008ea0 <_isatty_r>:
 8008ea0:	b538      	push	{r3, r4, r5, lr}
 8008ea2:	4d06      	ldr	r5, [pc, #24]	@ (8008ebc <_isatty_r+0x1c>)
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	4608      	mov	r0, r1
 8008eaa:	602b      	str	r3, [r5, #0]
 8008eac:	f7f9 f887 	bl	8001fbe <_isatty>
 8008eb0:	1c43      	adds	r3, r0, #1
 8008eb2:	d102      	bne.n	8008eba <_isatty_r+0x1a>
 8008eb4:	682b      	ldr	r3, [r5, #0]
 8008eb6:	b103      	cbz	r3, 8008eba <_isatty_r+0x1a>
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	bd38      	pop	{r3, r4, r5, pc}
 8008ebc:	20000460 	.word	0x20000460

08008ec0 <_init>:
 8008ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec2:	bf00      	nop
 8008ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ec6:	bc08      	pop	{r3}
 8008ec8:	469e      	mov	lr, r3
 8008eca:	4770      	bx	lr

08008ecc <_fini>:
 8008ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ece:	bf00      	nop
 8008ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ed2:	bc08      	pop	{r3}
 8008ed4:	469e      	mov	lr, r3
 8008ed6:	4770      	bx	lr
