
CAN_BUS_DTI_HV_550.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009950  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  08009b20  08009b20  0000ab20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0e4  0800a0e4  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a0e4  0800a0e4  0000b0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0ec  0800a0ec  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0ec  0800a0ec  0000b0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0f0  0800a0f0  0000b0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a0f4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001d4  0800a2c8  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  0800a2c8  0000c4f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e414  00000000  00000000  0000c202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002542  00000000  00000000  0001a616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0001cb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000099a  00000000  00000000  0001d7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f0b  00000000  00000000  0001e18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f006  00000000  00000000  00041095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfbef  00000000  00000000  0005009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011fc8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004910  00000000  00000000  0011fcd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  001245e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009b08 	.word	0x08009b08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08009b08 	.word	0x08009b08

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 800106a:	2300      	movs	r3, #0
 800106c:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 800106e:	2300      	movs	r3, #0
 8001070:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8001076:	2300      	movs	r3, #0
 8001078:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 800107a:	2300      	movs	r3, #0
 800107c:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 800107e:	2300      	movs	r3, #0
 8001080:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8001082:	2300      	movs	r3, #0
 8001084:	70fb      	strb	r3, [r7, #3]

  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;
 8001086:	2300      	movs	r3, #0
 8001088:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 800108a:	2300      	movs	r3, #0
 800108c:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 800108e:	2300      	movs	r3, #0
 8001090:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 8001096:	2300      	movs	r3, #0
 8001098:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 800109a:	2308      	movs	r3, #8
 800109c:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 80010a2:	2300      	movs	r3, #0
 80010a4:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 80010a6:	2300      	movs	r3, #0
 80010a8:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 80010aa:	2300      	movs	r3, #0
 80010ac:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 80010b2:	2300      	movs	r3, #0
 80010b4:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 80010ba:	2300      	movs	r3, #0
 80010bc:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 80010be:	2300      	movs	r3, #0
 80010c0:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 80010c6:	2300      	movs	r3, #0
 80010c8:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 80010ca:	2300      	movs	r3, #0
 80010cc:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 80010ce:	2300      	movs	r3, #0
 80010d0:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 80010d6:	2300      	movs	r3, #0
 80010d8:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 80010da:	2308      	movs	r3, #8
 80010dc:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 80010e2:	2300      	movs	r3, #0
 80010e4:	72fb      	strb	r3, [r7, #11]

  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 80010e6:	f000 f943 	bl	8001370 <MCP2515_Initialize>
 80010ea:	4603      	mov	r3, r0
 80010ec:	f083 0301 	eor.w	r3, r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <CANSPI_Initialize+0x9a>
  {
    return false;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e05e      	b.n	80011b8 <CANSPI_Initialize+0x158>
  }

  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 80010fa:	f000 f95b 	bl	80013b4 <MCP2515_SetConfigMode>
 80010fe:	4603      	mov	r3, r0
 8001100:	f083 0301 	eor.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <CANSPI_Initialize+0xae>
  {
    return false;
 800110a:	2300      	movs	r3, #0
 800110c:	e054      	b.n	80011b8 <CANSPI_Initialize+0x158>
  }

  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	461a      	mov	r2, r3
 8001112:	2123      	movs	r1, #35	@ 0x23
 8001114:	2020      	movs	r0, #32
 8001116:	f000 f9f1 	bl	80014fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800111a:	463b      	mov	r3, r7
 800111c:	461a      	mov	r2, r3
 800111e:	2127      	movs	r1, #39	@ 0x27
 8001120:	2024      	movs	r0, #36	@ 0x24
 8001122:	f000 f9eb 	bl	80014fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	461a      	mov	r2, r3
 800112c:	2103      	movs	r1, #3
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f9e4 	bl	80014fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	461a      	mov	r2, r3
 800113a:	2107      	movs	r1, #7
 800113c:	2004      	movs	r0, #4
 800113e:	f000 f9dd 	bl	80014fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	461a      	mov	r2, r3
 8001148:	210b      	movs	r1, #11
 800114a:	2008      	movs	r0, #8
 800114c:	f000 f9d6 	bl	80014fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	461a      	mov	r2, r3
 8001156:	2113      	movs	r1, #19
 8001158:	2010      	movs	r0, #16
 800115a:	f000 f9cf 	bl	80014fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	461a      	mov	r2, r3
 8001164:	2117      	movs	r1, #23
 8001166:	2014      	movs	r0, #20
 8001168:	f000 f9c8 	bl	80014fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	461a      	mov	r2, r3
 8001172:	211b      	movs	r1, #27
 8001174:	2018      	movs	r0, #24
 8001176:	f000 f9c1 	bl	80014fc <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 800117a:	2104      	movs	r1, #4
 800117c:	2060      	movs	r0, #96	@ 0x60
 800117e:	f000 f999 	bl	80014b4 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8001182:	2101      	movs	r1, #1
 8001184:	2070      	movs	r0, #112	@ 0x70
 8001186:	f000 f995 	bl	80014b4 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 800118a:	2100      	movs	r1, #0
 800118c:	202a      	movs	r0, #42	@ 0x2a
 800118e:	f000 f991 	bl	80014b4 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0x90);
 8001192:	2190      	movs	r1, #144	@ 0x90
 8001194:	2029      	movs	r0, #41	@ 0x29
 8001196:	f000 f98d 	bl	80014b4 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x82);
 800119a:	2182      	movs	r1, #130	@ 0x82
 800119c:	2028      	movs	r0, #40	@ 0x28
 800119e:	f000 f989 	bl	80014b4 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 80011a2:	f000 f925 	bl	80013f0 <MCP2515_SetNormalMode>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f083 0301 	eor.w	r3, r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <CANSPI_Initialize+0x156>
    return false;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e000      	b.n	80011b8 <CANSPI_Initialize+0x158>

  return true;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <CANSPI_Receive>:
  return (returnValue);
}

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80011cc:	f000 f9c0 	bl	8001550 <MCP2515_GetRxStatus>
 80011d0:	4603      	mov	r3, r0
 80011d2:	733b      	strb	r3, [r7, #12]

  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 80011d4:	7b3b      	ldrb	r3, [r7, #12]
 80011d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d066      	beq.n	80012ae <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80011e0:	7b3b      	ldrb	r3, [r7, #12]
 80011e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b40      	cmp	r3, #64	@ 0x40
 80011ea:	bf0c      	ite	eq
 80011ec:	2301      	moveq	r3, #1
 80011ee:	2300      	movne	r3, #0
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	7b3b      	ldrb	r3, [r7, #12]
 80011f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80011fc:	bf0c      	ite	eq
 80011fe:	2301      	moveq	r3, #1
 8001200:	2300      	movne	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	220d      	movs	r2, #13
 8001212:	4619      	mov	r1, r3
 8001214:	2090      	movs	r0, #144	@ 0x90
 8001216:	f000 f92b 	bl	8001470 <MCP2515_ReadRxSequence>
 800121a:	e00c      	b.n	8001236 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 800121c:	7b3b      	ldrb	r3, [r7, #12]
 800121e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b80      	cmp	r3, #128	@ 0x80
 8001226:	d106      	bne.n	8001236 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	220d      	movs	r2, #13
 800122e:	4619      	mov	r1, r3
 8001230:	2094      	movs	r0, #148	@ 0x94
 8001232:	f000 f91d 	bl	8001470 <MCP2515_ReadRxSequence>
    }

    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8001236:	7b3b      	ldrb	r3, [r7, #12]
 8001238:	f003 0318 	and.w	r3, r3, #24
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b10      	cmp	r3, #16
 8001240:	d10c      	bne.n	800125c <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2202      	movs	r2, #2
 8001246:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8001248:	7cb8      	ldrb	r0, [r7, #18]
 800124a:	7cf9      	ldrb	r1, [r7, #19]
 800124c:	7c3a      	ldrb	r2, [r7, #16]
 800124e:	7c7b      	ldrb	r3, [r7, #17]
 8001250:	f000 f832 	bl	80012b8 <convertReg2ExtendedCANid>
 8001254:	4602      	mov	r2, r0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	e00b      	b.n	8001274 <CANSPI_Receive+0xb4>
    }
    else
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8001262:	7c3b      	ldrb	r3, [r7, #16]
 8001264:	7c7a      	ldrb	r2, [r7, #17]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f863 	bl	8001334 <convertReg2StandardCANid>
 800126e:	4602      	mov	r2, r0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8001274:	7d3a      	ldrb	r2, [r7, #20]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800127a:	7d7a      	ldrb	r2, [r7, #21]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8001280:	7dba      	ldrb	r2, [r7, #22]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8001286:	7dfa      	ldrb	r2, [r7, #23]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 800128c:	7e3a      	ldrb	r2, [r7, #24]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8001292:	7e7a      	ldrb	r2, [r7, #25]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8001298:	7eba      	ldrb	r2, [r7, #26]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800129e:	7efa      	ldrb	r2, [r7, #27]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80012a4:	7f3a      	ldrb	r2, [r7, #28]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 80012aa:	2301      	movs	r3, #1
 80012ac:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 80012ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80012b8:	b490      	push	{r4, r7}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4604      	mov	r4, r0
 80012c0:	4608      	mov	r0, r1
 80012c2:	4611      	mov	r1, r2
 80012c4:	461a      	mov	r2, r3
 80012c6:	4623      	mov	r3, r4
 80012c8:	71fb      	strb	r3, [r7, #7]
 80012ca:	4603      	mov	r3, r0
 80012cc:	71bb      	strb	r3, [r7, #6]
 80012ce:	460b      	mov	r3, r1
 80012d0:	717b      	strb	r3, [r7, #5]
 80012d2:	4613      	mov	r3, r2
 80012d4:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80012de:	793b      	ldrb	r3, [r7, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80012e6:	793b      	ldrb	r3, [r7, #4]
 80012e8:	095b      	lsrs	r3, r3, #5
 80012ea:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80012ec:	797b      	ldrb	r3, [r7, #5]
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80012f2:	7bbb      	ldrb	r3, [r7, #14]
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4413      	add	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4413      	add	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4413      	add	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4413      	add	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8001328:	697b      	ldr	r3, [r7, #20]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bc90      	pop	{r4, r7}
 8001332:	4770      	bx	lr

08001334 <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	460a      	mov	r2, r1
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	4613      	mov	r3, r2
 8001342:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	095b      	lsrs	r3, r3, #5
 8001352:	b2db      	uxtb	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 8001360:	68fb      	ldr	r3, [r7, #12]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 8001376:	2201      	movs	r2, #1
 8001378:	2110      	movs	r1, #16
 800137a:	480c      	ldr	r0, [pc, #48]	@ (80013ac <MCP2515_Initialize+0x3c>)
 800137c:	f001 fcce 	bl	8002d1c <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8001380:	230a      	movs	r3, #10
 8001382:	71fb      	strb	r3, [r7, #7]

  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001384:	480a      	ldr	r0, [pc, #40]	@ (80013b0 <MCP2515_Initialize+0x40>)
 8001386:	f002 fed4 	bl	8004132 <HAL_SPI_GetState>
 800138a:	4603      	mov	r3, r0
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <MCP2515_Initialize+0x24>
      return true;
 8001390:	2301      	movs	r3, #1
 8001392:	e006      	b.n	80013a2 <MCP2515_Initialize+0x32>

    loop--;
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	3b01      	subs	r3, #1
 8001398:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f1      	bne.n	8001384 <MCP2515_Initialize+0x14>

  return false;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40020000 	.word	0x40020000
 80013b0:	20000218 	.word	0x20000218

080013b4 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80013ba:	2180      	movs	r1, #128	@ 0x80
 80013bc:	200f      	movs	r0, #15
 80013be:	f000 f879 	bl	80014b4 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80013c2:	230a      	movs	r3, #10
 80013c4:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80013c6:	200e      	movs	r0, #14
 80013c8:	f000 f830 	bl	800142c <MCP2515_ReadByte>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80013d2:	2b80      	cmp	r3, #128	@ 0x80
 80013d4:	d101      	bne.n	80013da <MCP2515_SetConfigMode+0x26>
      return true;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e006      	b.n	80013e8 <MCP2515_SetConfigMode+0x34>

    loop--;
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	3b01      	subs	r3, #1
 80013de:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1ef      	bne.n	80013c6 <MCP2515_SetConfigMode+0x12>

  return false;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80013f6:	2100      	movs	r1, #0
 80013f8:	200f      	movs	r0, #15
 80013fa:	f000 f85b 	bl	80014b4 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80013fe:	230a      	movs	r3, #10
 8001400:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8001402:	200e      	movs	r0, #14
 8001404:	f000 f812 	bl	800142c <MCP2515_ReadByte>
 8001408:	4603      	mov	r3, r0
 800140a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <MCP2515_SetNormalMode+0x26>
      return true;
 8001412:	2301      	movs	r3, #1
 8001414:	e006      	b.n	8001424 <MCP2515_SetNormalMode+0x34>

    loop--;
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	3b01      	subs	r3, #1
 800141a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1ef      	bne.n	8001402 <MCP2515_SetNormalMode+0x12>

  return false;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8001436:	2200      	movs	r2, #0
 8001438:	2110      	movs	r1, #16
 800143a:	480c      	ldr	r0, [pc, #48]	@ (800146c <MCP2515_ReadByte+0x40>)
 800143c:	f001 fc6e 	bl	8002d1c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 f8a1 	bl	8001588 <SPI_Tx>
  SPI_Tx(address);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f89d 	bl	8001588 <SPI_Tx>
  retVal = SPI_Rx();
 800144e:	f000 f8c1 	bl	80015d4 <SPI_Rx>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8001456:	2201      	movs	r2, #1
 8001458:	2110      	movs	r1, #16
 800145a:	4804      	ldr	r0, [pc, #16]	@ (800146c <MCP2515_ReadByte+0x40>)
 800145c:	f001 fc5e 	bl	8002d1c <HAL_GPIO_WritePin>

  return retVal;
 8001460:	7bfb      	ldrb	r3, [r7, #15]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40020000 	.word	0x40020000

08001470 <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	4613      	mov	r3, r2
 800147e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001480:	2200      	movs	r2, #0
 8001482:	2110      	movs	r1, #16
 8001484:	480a      	ldr	r0, [pc, #40]	@ (80014b0 <MCP2515_ReadRxSequence+0x40>)
 8001486:	f001 fc49 	bl	8002d1c <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	4618      	mov	r0, r3
 800148e:	f000 f87b 	bl	8001588 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8001492:	79bb      	ldrb	r3, [r7, #6]
 8001494:	4619      	mov	r1, r3
 8001496:	6838      	ldr	r0, [r7, #0]
 8001498:	f000 f8ac 	bl	80015f4 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 800149c:	2201      	movs	r2, #1
 800149e:	2110      	movs	r1, #16
 80014a0:	4803      	ldr	r0, [pc, #12]	@ (80014b0 <MCP2515_ReadRxSequence+0x40>)
 80014a2:	f001 fc3b 	bl	8002d1c <HAL_GPIO_WritePin>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40020000 	.word	0x40020000

080014b4 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	460a      	mov	r2, r1
 80014be:	71fb      	strb	r3, [r7, #7]
 80014c0:	4613      	mov	r3, r2
 80014c2:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80014c4:	2200      	movs	r2, #0
 80014c6:	2110      	movs	r1, #16
 80014c8:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <MCP2515_WriteByte+0x44>)
 80014ca:	f001 fc27 	bl	8002d1c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 80014ce:	2002      	movs	r0, #2
 80014d0:	f000 f85a 	bl	8001588 <SPI_Tx>
  SPI_Tx(address);
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f856 	bl	8001588 <SPI_Tx>
  SPI_Tx(data);
 80014dc:	79bb      	ldrb	r3, [r7, #6]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f852 	bl	8001588 <SPI_Tx>

  MCP2515_CS_HIGH();
 80014e4:	2201      	movs	r2, #1
 80014e6:	2110      	movs	r1, #16
 80014e8:	4803      	ldr	r0, [pc, #12]	@ (80014f8 <MCP2515_WriteByte+0x44>)
 80014ea:	f001 fc17 	bl	8002d1c <HAL_GPIO_WritePin>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40020000 	.word	0x40020000

080014fc <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	603a      	str	r2, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
 8001508:	460b      	mov	r3, r1
 800150a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800150c:	2200      	movs	r2, #0
 800150e:	2110      	movs	r1, #16
 8001510:	480e      	ldr	r0, [pc, #56]	@ (800154c <MCP2515_WriteByteSequence+0x50>)
 8001512:	f001 fc03 	bl	8002d1c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8001516:	2002      	movs	r0, #2
 8001518:	f000 f836 	bl	8001588 <SPI_Tx>
  SPI_Tx(startAddress);
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f832 	bl	8001588 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8001524:	79ba      	ldrb	r2, [r7, #6]
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	b2db      	uxtb	r3, r3
 800152c:	3301      	adds	r3, #1
 800152e:	b2db      	uxtb	r3, r3
 8001530:	4619      	mov	r1, r3
 8001532:	6838      	ldr	r0, [r7, #0]
 8001534:	f000 f83a 	bl	80015ac <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8001538:	2201      	movs	r2, #1
 800153a:	2110      	movs	r1, #16
 800153c:	4803      	ldr	r0, [pc, #12]	@ (800154c <MCP2515_WriteByteSequence+0x50>)
 800153e:	f001 fbed 	bl	8002d1c <HAL_GPIO_WritePin>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40020000 	.word	0x40020000

08001550 <MCP2515_GetRxStatus>:
  return retVal;
}

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8001556:	2200      	movs	r2, #0
 8001558:	2110      	movs	r1, #16
 800155a:	480a      	ldr	r0, [pc, #40]	@ (8001584 <MCP2515_GetRxStatus+0x34>)
 800155c:	f001 fbde 	bl	8002d1c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 8001560:	20b0      	movs	r0, #176	@ 0xb0
 8001562:	f000 f811 	bl	8001588 <SPI_Tx>
  retVal = SPI_Rx();
 8001566:	f000 f835 	bl	80015d4 <SPI_Rx>
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 800156e:	2201      	movs	r2, #1
 8001570:	2110      	movs	r1, #16
 8001572:	4804      	ldr	r0, [pc, #16]	@ (8001584 <MCP2515_GetRxStatus+0x34>)
 8001574:	f001 fbd2 	bl	8002d1c <HAL_GPIO_WritePin>

  return retVal;
 8001578:	79fb      	ldrb	r3, [r7, #7]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40020000 	.word	0x40020000

08001588 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8001592:	1df9      	adds	r1, r7, #7
 8001594:	230a      	movs	r3, #10
 8001596:	2201      	movs	r2, #1
 8001598:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <SPI_Tx+0x20>)
 800159a:	f002 f9c4 	bl	8003926 <HAL_SPI_Transmit>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000218 	.word	0x20000218

080015ac <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	230a      	movs	r3, #10
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4803      	ldr	r0, [pc, #12]	@ (80015d0 <SPI_TxBuffer+0x24>)
 80015c2:	f002 f9b0 	bl	8003926 <HAL_SPI_Transmit>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000218 	.word	0x20000218

080015d4 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80015da:	1df9      	adds	r1, r7, #7
 80015dc:	230a      	movs	r3, #10
 80015de:	2201      	movs	r2, #1
 80015e0:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <SPI_Rx+0x1c>)
 80015e2:	f002 fae4 	bl	8003bae <HAL_SPI_Receive>
  return retVal;
 80015e6:	79fb      	ldrb	r3, [r7, #7]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000218 	.word	0x20000218

080015f4 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	b29a      	uxth	r2, r3
 8001604:	230a      	movs	r3, #10
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4803      	ldr	r0, [pc, #12]	@ (8001618 <SPI_RxBuffer+0x24>)
 800160a:	f002 fad0 	bl	8003bae <HAL_SPI_Receive>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000218 	.word	0x20000218

0800161c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	b29a      	uxth	r2, r3
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	4804      	ldr	r0, [pc, #16]	@ (8001644 <_write+0x28>)
 8001634:	f002 ff1e 	bl	8004474 <HAL_UART_Transmit>
    return len;
 8001638:	687b      	ldr	r3, [r7, #4]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200002b8 	.word	0x200002b8

08001648 <Decode_CAN_Message>:

void Decode_CAN_Message(CAN_RxHeaderTypeDef *header, uint8_t *data)
{
 8001648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164a:	b089      	sub	sp, #36	@ 0x24
 800164c:	af06      	add	r7, sp, #24
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
    switch (header->StdId)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f242 220f 	movw	r2, #8719	@ 0x220f
 800165a:	4293      	cmp	r3, r2
 800165c:	f000 816a 	beq.w	8001934 <Decode_CAN_Message+0x2ec>
 8001660:	f242 220f 	movw	r2, #8719	@ 0x220f
 8001664:	4293      	cmp	r3, r2
 8001666:	f200 81c5 	bhi.w	80019f4 <Decode_CAN_Message+0x3ac>
 800166a:	f242 120f 	movw	r2, #8463	@ 0x210f
 800166e:	4293      	cmp	r3, r2
 8001670:	f000 80d9 	beq.w	8001826 <Decode_CAN_Message+0x1de>
 8001674:	f242 120f 	movw	r2, #8463	@ 0x210f
 8001678:	4293      	cmp	r3, r2
 800167a:	f200 81bb 	bhi.w	80019f4 <Decode_CAN_Message+0x3ac>
 800167e:	f641 720f 	movw	r2, #7951	@ 0x1f0f
 8001682:	4293      	cmp	r3, r2
 8001684:	d004      	beq.n	8001690 <Decode_CAN_Message+0x48>
 8001686:	f242 020f 	movw	r2, #8207	@ 0x200f
 800168a:	4293      	cmp	r3, r2
 800168c:	d06e      	beq.n	800176c <Decode_CAN_Message+0x124>
 800168e:	e1b1      	b.n	80019f4 <Decode_CAN_Message+0x3ac>
    {
		case 0x1F0F: // General Data 6: Control mode, Target Iq, Motor position, isMotorStill
		{
			control_mode = data[0];
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	781a      	ldrb	r2, [r3, #0]
 8001694:	4b90      	ldr	r3, [pc, #576]	@ (80018d8 <Decode_CAN_Message+0x290>)
 8001696:	701a      	strb	r2, [r3, #0]

			target_iq_raw = (int16_t)((data[1] << 8) | data[2]);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b21b      	sxth	r3, r3
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	3302      	adds	r3, #2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	4b8a      	ldr	r3, [pc, #552]	@ (80018dc <Decode_CAN_Message+0x294>)
 80016b2:	801a      	strh	r2, [r3, #0]
			target_iq = target_iq_raw / 10.0f;
 80016b4:	4b89      	ldr	r3, [pc, #548]	@ (80018dc <Decode_CAN_Message+0x294>)
 80016b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80016c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ca:	4b85      	ldr	r3, [pc, #532]	@ (80018e0 <Decode_CAN_Message+0x298>)
 80016cc:	edc3 7a00 	vstr	s15, [r3]

			motor_position_raw = (data[3] << 8) | data[4];
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	3303      	adds	r3, #3
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	b21a      	sxth	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	3304      	adds	r3, #4
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	4b7e      	ldr	r3, [pc, #504]	@ (80018e4 <Decode_CAN_Message+0x29c>)
 80016ec:	801a      	strh	r2, [r3, #0]
			motor_position = motor_position_raw / 10.0f;
 80016ee:	4b7d      	ldr	r3, [pc, #500]	@ (80018e4 <Decode_CAN_Message+0x29c>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016fa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80016fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001702:	4b79      	ldr	r3, [pc, #484]	@ (80018e8 <Decode_CAN_Message+0x2a0>)
 8001704:	edc3 7a00 	vstr	s15, [r3]

			is_motor_still = data[5];
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	795a      	ldrb	r2, [r3, #5]
 800170c:	4b77      	ldr	r3, [pc, #476]	@ (80018ec <Decode_CAN_Message+0x2a4>)
 800170e:	701a      	strb	r2, [r3, #0]

			snprintf(uart_buffer,
 8001710:	4b71      	ldr	r3, [pc, #452]	@ (80018d8 <Decode_CAN_Message+0x290>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461e      	mov	r6, r3
 8001716:	4b72      	ldr	r3, [pc, #456]	@ (80018e0 <Decode_CAN_Message+0x298>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe ff34 	bl	8000588 <__aeabi_f2d>
 8001720:	4604      	mov	r4, r0
 8001722:	460d      	mov	r5, r1
 8001724:	4b70      	ldr	r3, [pc, #448]	@ (80018e8 <Decode_CAN_Message+0x2a0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff2d 	bl	8000588 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
					 sizeof(uart_buffer),
					 "ID: 0x1F0F | Ctrl Mode: %u | Target Iq: %.1f A | Motor Pos: %.1f deg | Still: %s\r\n",
					 control_mode,
					 target_iq,
					 motor_position,
					 is_motor_still ? "1" : "0");
 8001732:	496e      	ldr	r1, [pc, #440]	@ (80018ec <Decode_CAN_Message+0x2a4>)
 8001734:	7809      	ldrb	r1, [r1, #0]
			snprintf(uart_buffer,
 8001736:	2900      	cmp	r1, #0
 8001738:	d001      	beq.n	800173e <Decode_CAN_Message+0xf6>
 800173a:	496d      	ldr	r1, [pc, #436]	@ (80018f0 <Decode_CAN_Message+0x2a8>)
 800173c:	e000      	b.n	8001740 <Decode_CAN_Message+0xf8>
 800173e:	496d      	ldr	r1, [pc, #436]	@ (80018f4 <Decode_CAN_Message+0x2ac>)
 8001740:	9104      	str	r1, [sp, #16]
 8001742:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001746:	e9cd 4500 	strd	r4, r5, [sp]
 800174a:	4633      	mov	r3, r6
 800174c:	4a6a      	ldr	r2, [pc, #424]	@ (80018f8 <Decode_CAN_Message+0x2b0>)
 800174e:	2164      	movs	r1, #100	@ 0x64
 8001750:	486a      	ldr	r0, [pc, #424]	@ (80018fc <Decode_CAN_Message+0x2b4>)
 8001752:	f004 fd77 	bl	8006244 <sniprintf>

			HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8001756:	4869      	ldr	r0, [pc, #420]	@ (80018fc <Decode_CAN_Message+0x2b4>)
 8001758:	f7fe fdaa 	bl	80002b0 <strlen>
 800175c:	4603      	mov	r3, r0
 800175e:	b29a      	uxth	r2, r3
 8001760:	2364      	movs	r3, #100	@ 0x64
 8001762:	4966      	ldr	r1, [pc, #408]	@ (80018fc <Decode_CAN_Message+0x2b4>)
 8001764:	4866      	ldr	r0, [pc, #408]	@ (8001900 <Decode_CAN_Message+0x2b8>)
 8001766:	f002 fe85 	bl	8004474 <HAL_UART_Transmit>
			break;
 800176a:	e155      	b.n	8001a18 <Decode_CAN_Message+0x3d0>
		}
        case 0x200F: // ERPM, Duty, Voltage
        {
            erpm = (int32_t)((data[0] << 24) | (data[1] << 16) | (data[2] << 8) | data[3]);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	061a      	lsls	r2, r3, #24
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	041b      	lsls	r3, r3, #16
 800177a:	431a      	orrs	r2, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	3302      	adds	r3, #2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	4313      	orrs	r3, r2
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	3203      	adds	r2, #3
 800178a:	7812      	ldrb	r2, [r2, #0]
 800178c:	4313      	orrs	r3, r2
 800178e:	4a5d      	ldr	r2, [pc, #372]	@ (8001904 <Decode_CAN_Message+0x2bc>)
 8001790:	6013      	str	r3, [r2, #0]
            duty_raw = (data[4] << 8) | data[5];
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	3304      	adds	r3, #4
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b21b      	sxth	r3, r3
 800179a:	021b      	lsls	r3, r3, #8
 800179c:	b21a      	sxth	r2, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	3305      	adds	r3, #5
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b56      	ldr	r3, [pc, #344]	@ (8001908 <Decode_CAN_Message+0x2c0>)
 80017ae:	801a      	strh	r2, [r3, #0]
            voltage = (data[6] << 8) | data[7];
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	3306      	adds	r3, #6
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	b21a      	sxth	r2, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	3307      	adds	r3, #7
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	4b50      	ldr	r3, [pc, #320]	@ (800190c <Decode_CAN_Message+0x2c4>)
 80017cc:	801a      	strh	r2, [r3, #0]

            duty = duty_raw / 10.0f;
 80017ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001908 <Decode_CAN_Message+0x2c0>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017da:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80017de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001910 <Decode_CAN_Message+0x2c8>)
 80017e4:	edc3 7a00 	vstr	s15, [r3]

            snprintf(uart_buffer,
 80017e8:	4b46      	ldr	r3, [pc, #280]	@ (8001904 <Decode_CAN_Message+0x2bc>)
 80017ea:	681c      	ldr	r4, [r3, #0]
 80017ec:	4b48      	ldr	r3, [pc, #288]	@ (8001910 <Decode_CAN_Message+0x2c8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fec9 	bl	8000588 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4944      	ldr	r1, [pc, #272]	@ (800190c <Decode_CAN_Message+0x2c4>)
 80017fc:	8809      	ldrh	r1, [r1, #0]
 80017fe:	9102      	str	r1, [sp, #8]
 8001800:	e9cd 2300 	strd	r2, r3, [sp]
 8001804:	4623      	mov	r3, r4
 8001806:	4a43      	ldr	r2, [pc, #268]	@ (8001914 <Decode_CAN_Message+0x2cc>)
 8001808:	2164      	movs	r1, #100	@ 0x64
 800180a:	483c      	ldr	r0, [pc, #240]	@ (80018fc <Decode_CAN_Message+0x2b4>)
 800180c:	f004 fd1a 	bl	8006244 <sniprintf>
                     sizeof(uart_buffer),
                     "ID: 0x200F | ERPM: %ld | Duty: %.1f %% | Voltage: %u V\r\n",
                     erpm, duty, voltage);
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8001810:	483a      	ldr	r0, [pc, #232]	@ (80018fc <Decode_CAN_Message+0x2b4>)
 8001812:	f7fe fd4d 	bl	80002b0 <strlen>
 8001816:	4603      	mov	r3, r0
 8001818:	b29a      	uxth	r2, r3
 800181a:	2364      	movs	r3, #100	@ 0x64
 800181c:	4937      	ldr	r1, [pc, #220]	@ (80018fc <Decode_CAN_Message+0x2b4>)
 800181e:	4838      	ldr	r0, [pc, #224]	@ (8001900 <Decode_CAN_Message+0x2b8>)
 8001820:	f002 fe28 	bl	8004474 <HAL_UART_Transmit>
            break;
 8001824:	e0f8      	b.n	8001a18 <Decode_CAN_Message+0x3d0>
        }

        case 0x210F: // AC Current, DC Current
        {
            ac_current_raw = (data[0] << 8) | data[1];
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b21b      	sxth	r3, r3
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	b21a      	sxth	r2, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b21b      	sxth	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b21b      	sxth	r3, r3
 800183c:	b29a      	uxth	r2, r3
 800183e:	4b36      	ldr	r3, [pc, #216]	@ (8001918 <Decode_CAN_Message+0x2d0>)
 8001840:	801a      	strh	r2, [r3, #0]
            dc_current_raw = (data[2] << 8) | data[3];
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	3302      	adds	r3, #2
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b21b      	sxth	r3, r3
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	b21a      	sxth	r2, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	3303      	adds	r3, #3
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b21b      	sxth	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b21b      	sxth	r3, r3
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b2f      	ldr	r3, [pc, #188]	@ (800191c <Decode_CAN_Message+0x2d4>)
 800185e:	801a      	strh	r2, [r3, #0]

            ac_current = ac_current_raw * 0.01f;
 8001860:	4b2d      	ldr	r3, [pc, #180]	@ (8001918 <Decode_CAN_Message+0x2d0>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	ee07 3a90 	vmov	s15, r3
 8001868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001920 <Decode_CAN_Message+0x2d8>
 8001870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001874:	4b2b      	ldr	r3, [pc, #172]	@ (8001924 <Decode_CAN_Message+0x2dc>)
 8001876:	edc3 7a00 	vstr	s15, [r3]
            dc_current = dc_current_raw * 0.1f;
 800187a:	4b28      	ldr	r3, [pc, #160]	@ (800191c <Decode_CAN_Message+0x2d4>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	ee07 3a90 	vmov	s15, r3
 8001882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001886:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001928 <Decode_CAN_Message+0x2e0>
 800188a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800188e:	4b27      	ldr	r3, [pc, #156]	@ (800192c <Decode_CAN_Message+0x2e4>)
 8001890:	edc3 7a00 	vstr	s15, [r3]

            snprintf(uart_buffer,
 8001894:	4b23      	ldr	r3, [pc, #140]	@ (8001924 <Decode_CAN_Message+0x2dc>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe75 	bl	8000588 <__aeabi_f2d>
 800189e:	4604      	mov	r4, r0
 80018a0:	460d      	mov	r5, r1
 80018a2:	4b22      	ldr	r3, [pc, #136]	@ (800192c <Decode_CAN_Message+0x2e4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe6e 	bl	8000588 <__aeabi_f2d>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018b4:	e9cd 4500 	strd	r4, r5, [sp]
 80018b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001930 <Decode_CAN_Message+0x2e8>)
 80018ba:	2164      	movs	r1, #100	@ 0x64
 80018bc:	480f      	ldr	r0, [pc, #60]	@ (80018fc <Decode_CAN_Message+0x2b4>)
 80018be:	f004 fcc1 	bl	8006244 <sniprintf>
                     sizeof(uart_buffer),
                     "ID: 0x210F | AC Current: %.2f A | DC Current: %.2f A\r\n",
                     ac_current, dc_current);
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 80018c2:	480e      	ldr	r0, [pc, #56]	@ (80018fc <Decode_CAN_Message+0x2b4>)
 80018c4:	f7fe fcf4 	bl	80002b0 <strlen>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	2364      	movs	r3, #100	@ 0x64
 80018ce:	490b      	ldr	r1, [pc, #44]	@ (80018fc <Decode_CAN_Message+0x2b4>)
 80018d0:	480b      	ldr	r0, [pc, #44]	@ (8001900 <Decode_CAN_Message+0x2b8>)
 80018d2:	f002 fdcf 	bl	8004474 <HAL_UART_Transmit>
            break;
 80018d6:	e09f      	b.n	8001a18 <Decode_CAN_Message+0x3d0>
 80018d8:	20000364 	.word	0x20000364
 80018dc:	20000366 	.word	0x20000366
 80018e0:	20000368 	.word	0x20000368
 80018e4:	2000036c 	.word	0x2000036c
 80018e8:	20000370 	.word	0x20000370
 80018ec:	20000374 	.word	0x20000374
 80018f0:	08009b20 	.word	0x08009b20
 80018f4:	08009b24 	.word	0x08009b24
 80018f8:	08009b28 	.word	0x08009b28
 80018fc:	20000300 	.word	0x20000300
 8001900:	200002b8 	.word	0x200002b8
 8001904:	20000378 	.word	0x20000378
 8001908:	2000037c 	.word	0x2000037c
 800190c:	2000037e 	.word	0x2000037e
 8001910:	20000380 	.word	0x20000380
 8001914:	08009b7c 	.word	0x08009b7c
 8001918:	20000384 	.word	0x20000384
 800191c:	20000386 	.word	0x20000386
 8001920:	3c23d70a 	.word	0x3c23d70a
 8001924:	20000388 	.word	0x20000388
 8001928:	3dcccccd 	.word	0x3dcccccd
 800192c:	2000038c 	.word	0x2000038c
 8001930:	08009bb8 	.word	0x08009bb8
        }

        case 0x220F: // Ctrl Temp, Motor Temp, Fault Code
        {
            ctrl_temp_raw = (data[0] << 8) | data[1];
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b21b      	sxth	r3, r3
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	b21a      	sxth	r2, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b21b      	sxth	r3, r3
 8001946:	4313      	orrs	r3, r2
 8001948:	b21b      	sxth	r3, r3
 800194a:	b29a      	uxth	r2, r3
 800194c:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <Decode_CAN_Message+0x3d8>)
 800194e:	801a      	strh	r2, [r3, #0]
            motor_temp_raw = (data[2] << 8) | data[3];
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	3302      	adds	r3, #2
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	b21b      	sxth	r3, r3
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	b21a      	sxth	r2, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	3303      	adds	r3, #3
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b21b      	sxth	r3, r3
 8001964:	4313      	orrs	r3, r2
 8001966:	b21b      	sxth	r3, r3
 8001968:	b29a      	uxth	r2, r3
 800196a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a24 <Decode_CAN_Message+0x3dc>)
 800196c:	801a      	strh	r2, [r3, #0]
            fault_code = data[4];
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	791a      	ldrb	r2, [r3, #4]
 8001972:	4b2d      	ldr	r3, [pc, #180]	@ (8001a28 <Decode_CAN_Message+0x3e0>)
 8001974:	701a      	strb	r2, [r3, #0]

            ctrl_temp = ctrl_temp_raw * 0.1f;
 8001976:	4b2a      	ldr	r3, [pc, #168]	@ (8001a20 <Decode_CAN_Message+0x3d8>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001982:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001a2c <Decode_CAN_Message+0x3e4>
 8001986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198a:	4b29      	ldr	r3, [pc, #164]	@ (8001a30 <Decode_CAN_Message+0x3e8>)
 800198c:	edc3 7a00 	vstr	s15, [r3]
            motor_temp = motor_temp_raw * 0.1f;
 8001990:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <Decode_CAN_Message+0x3dc>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	ee07 3a90 	vmov	s15, r3
 8001998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800199c:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001a2c <Decode_CAN_Message+0x3e4>
 80019a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a4:	4b23      	ldr	r3, [pc, #140]	@ (8001a34 <Decode_CAN_Message+0x3ec>)
 80019a6:	edc3 7a00 	vstr	s15, [r3]

            snprintf(uart_buffer,
 80019aa:	4b21      	ldr	r3, [pc, #132]	@ (8001a30 <Decode_CAN_Message+0x3e8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdea 	bl	8000588 <__aeabi_f2d>
 80019b4:	4604      	mov	r4, r0
 80019b6:	460d      	mov	r5, r1
 80019b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <Decode_CAN_Message+0x3ec>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fde3 	bl	8000588 <__aeabi_f2d>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4918      	ldr	r1, [pc, #96]	@ (8001a28 <Decode_CAN_Message+0x3e0>)
 80019c8:	7809      	ldrb	r1, [r1, #0]
 80019ca:	9104      	str	r1, [sp, #16]
 80019cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019d0:	e9cd 4500 	strd	r4, r5, [sp]
 80019d4:	4a18      	ldr	r2, [pc, #96]	@ (8001a38 <Decode_CAN_Message+0x3f0>)
 80019d6:	2164      	movs	r1, #100	@ 0x64
 80019d8:	4818      	ldr	r0, [pc, #96]	@ (8001a3c <Decode_CAN_Message+0x3f4>)
 80019da:	f004 fc33 	bl	8006244 <sniprintf>
                     sizeof(uart_buffer),
                     "ID: 0x220F | Ctrl Temp: %.1f °C | Motor Temp: %.1f °C | Fault: 0x%02X\r\n",
                     ctrl_temp, motor_temp, fault_code);
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 80019de:	4817      	ldr	r0, [pc, #92]	@ (8001a3c <Decode_CAN_Message+0x3f4>)
 80019e0:	f7fe fc66 	bl	80002b0 <strlen>
 80019e4:	4603      	mov	r3, r0
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	2364      	movs	r3, #100	@ 0x64
 80019ea:	4914      	ldr	r1, [pc, #80]	@ (8001a3c <Decode_CAN_Message+0x3f4>)
 80019ec:	4814      	ldr	r0, [pc, #80]	@ (8001a40 <Decode_CAN_Message+0x3f8>)
 80019ee:	f002 fd41 	bl	8004474 <HAL_UART_Transmit>
            break;
 80019f2:	e011      	b.n	8001a18 <Decode_CAN_Message+0x3d0>

        default:
        {
            snprintf(uart_buffer,
                     sizeof(uart_buffer),
                     "Unknown CAN ID: 0x%03lX\r\n", (unsigned long)header->StdId);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
            snprintf(uart_buffer,
 80019f8:	4a12      	ldr	r2, [pc, #72]	@ (8001a44 <Decode_CAN_Message+0x3fc>)
 80019fa:	2164      	movs	r1, #100	@ 0x64
 80019fc:	480f      	ldr	r0, [pc, #60]	@ (8001a3c <Decode_CAN_Message+0x3f4>)
 80019fe:	f004 fc21 	bl	8006244 <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8001a02:	480e      	ldr	r0, [pc, #56]	@ (8001a3c <Decode_CAN_Message+0x3f4>)
 8001a04:	f7fe fc54 	bl	80002b0 <strlen>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	2364      	movs	r3, #100	@ 0x64
 8001a0e:	490b      	ldr	r1, [pc, #44]	@ (8001a3c <Decode_CAN_Message+0x3f4>)
 8001a10:	480b      	ldr	r0, [pc, #44]	@ (8001a40 <Decode_CAN_Message+0x3f8>)
 8001a12:	f002 fd2f 	bl	8004474 <HAL_UART_Transmit>
            break;
 8001a16:	bf00      	nop
        }
    }
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a20:	20000390 	.word	0x20000390
 8001a24:	20000392 	.word	0x20000392
 8001a28:	20000394 	.word	0x20000394
 8001a2c:	3dcccccd 	.word	0x3dcccccd
 8001a30:	20000398 	.word	0x20000398
 8001a34:	2000039c 	.word	0x2000039c
 8001a38:	08009bf0 	.word	0x08009bf0
 8001a3c:	20000300 	.word	0x20000300
 8001a40:	200002b8 	.word	0x200002b8
 8001a44:	08009c3c 	.word	0x08009c3c

08001a48 <NEXTION_SendString>:

void NEXTION_SendString(const char *ID, const char *string) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b090      	sub	sp, #64	@ 0x40
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
    char buf[50];
    int len = sprintf(buf, "%s.txt=\"%s\"", ID, string);
 8001a52:	f107 0008 	add.w	r0, r7, #8
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	490b      	ldr	r1, [pc, #44]	@ (8001a88 <NEXTION_SendString+0x40>)
 8001a5c:	f004 fc28 	bl	80062b0 <siprintf>
 8001a60:	63f8      	str	r0, [r7, #60]	@ 0x3c
    HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 8001a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	f107 0108 	add.w	r1, r7, #8
 8001a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6e:	4807      	ldr	r0, [pc, #28]	@ (8001a8c <NEXTION_SendString+0x44>)
 8001a70:	f002 fd00 	bl	8004474 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)"\xFF\xFF\xFF", 3, 100);
 8001a74:	2364      	movs	r3, #100	@ 0x64
 8001a76:	2203      	movs	r2, #3
 8001a78:	4905      	ldr	r1, [pc, #20]	@ (8001a90 <NEXTION_SendString+0x48>)
 8001a7a:	4804      	ldr	r0, [pc, #16]	@ (8001a8c <NEXTION_SendString+0x44>)
 8001a7c:	f002 fcfa 	bl	8004474 <HAL_UART_Transmit>
}
 8001a80:	bf00      	nop
 8001a82:	3740      	adds	r7, #64	@ 0x40
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	08009c58 	.word	0x08009c58
 8001a8c:	20000270 	.word	0x20000270
 8001a90:	08009c64 	.word	0x08009c64

08001a94 <NEXTION_SendInt>:

void NEXTION_SendInt(char *ID, int value) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
    char str[20];
    sprintf(str, "%d", value);
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	4906      	ldr	r1, [pc, #24]	@ (8001ac0 <NEXTION_SendInt+0x2c>)
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f004 fc02 	bl	80062b0 <siprintf>
    NEXTION_SendString(ID, str);
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffc8 	bl	8001a48 <NEXTION_SendString>
}
 8001ab8:	bf00      	nop
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	08009c68 	.word	0x08009c68

08001ac4 <NEXTION_SendFloat>:

void NEXTION_SendFloat(char *ID, float value) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
    char str[20];
    sprintf(str, "%.2f", value);
 8001ace:	6838      	ldr	r0, [r7, #0]
 8001ad0:	f7fe fd5a 	bl	8000588 <__aeabi_f2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	f107 000c 	add.w	r0, r7, #12
 8001adc:	4906      	ldr	r1, [pc, #24]	@ (8001af8 <NEXTION_SendFloat+0x34>)
 8001ade:	f004 fbe7 	bl	80062b0 <siprintf>
    NEXTION_SendString(ID, str);
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ffad 	bl	8001a48 <NEXTION_SendString>
}
 8001aee:	bf00      	nop
 8001af0:	3720      	adds	r7, #32
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	08009c6c 	.word	0x08009c6c

08001afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b092      	sub	sp, #72	@ 0x48
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b02:	f000 fc41 	bl	8002388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b06:	f000 f851 	bl	8001bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0a:	f000 f96d 	bl	8001de8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b0e:	f000 f941 	bl	8001d94 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001b12:	f000 f8df 	bl	8001cd4 <MX_SPI1_Init>
  MX_CAN1_Init();
 8001b16:	f000 f8a9 	bl	8001c6c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8001b1a:	f000 f911 	bl	8001d40 <MX_USART1_UART_Init>
  uint16_t readValue;
  uint16_t rxValue;
  uCAN_MSG txMessage;
  uCAN_MSG rxMessage;
//  HAL_ADC_Start(&hadc1);
  CANSPI_Initialize();
 8001b1e:	f7ff fa9f 	bl	8001060 <CANSPI_Initialize>
  HAL_Delay(1000);
 8001b22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b26:	f000 fca1 	bl	800246c <HAL_Delay>
//	    txMessage.frame.data7 = readValue >> 8;
//	    CANSPI_Transmit(&txMessage);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(CANSPI_Receive(&rxMessage))
 8001b2a:	f107 0320 	add.w	r3, r7, #32
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fb46 	bl	80011c0 <CANSPI_Receive>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <main+0x54>
	    {
//	    	sprintf(test,"Tough%d\n",100);
//	    	HAL_UART_Transmit(&huart2,test,sizeof(test),100);
	    	CAN_RxHeaderTypeDef fakeHeader;
	    	fakeHeader.StdId = rxMessage.frame.id;
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	607b      	str	r3, [r7, #4]
	    	Decode_CAN_Message(&fakeHeader, &rxMessage.frame.data0);
 8001b3e:	f107 0320 	add.w	r3, r7, #32
 8001b42:	f103 0209 	add.w	r2, r3, #9
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fd7c 	bl	8001648 <Decode_CAN_Message>
	    }
	    HAL_Delay(100);
 8001b50:	2064      	movs	r0, #100	@ 0x64
 8001b52:	f000 fc8b 	bl	800246c <HAL_Delay>
//	    NEXTION_SEND("t27", voltage);      // uint16_t
	    NEXTION_SEND("t15", erpm / 10);    // int32_t divided, result is int
 8001b56:	4b0d      	ldr	r3, [pc, #52]	@ (8001b8c <main+0x90>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001b90 <main+0x94>)
 8001b5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b60:	1092      	asrs	r2, r2, #2
 8001b62:	17db      	asrs	r3, r3, #31
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	4619      	mov	r1, r3
 8001b68:	480a      	ldr	r0, [pc, #40]	@ (8001b94 <main+0x98>)
 8001b6a:	f7ff ff93 	bl	8001a94 <NEXTION_SendInt>
	    NEXTION_SEND("t24", motor_temp);   // float
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <main+0x9c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4619      	mov	r1, r3
 8001b74:	4809      	ldr	r0, [pc, #36]	@ (8001b9c <main+0xa0>)
 8001b76:	f7ff ffa5 	bl	8001ac4 <NEXTION_SendFloat>
		NEXTION_SendString ("t5", "30");
 8001b7a:	4909      	ldr	r1, [pc, #36]	@ (8001ba0 <main+0xa4>)
 8001b7c:	4809      	ldr	r0, [pc, #36]	@ (8001ba4 <main+0xa8>)
 8001b7e:	f7ff ff63 	bl	8001a48 <NEXTION_SendString>
		NEXTION_SendString ("t3", "30");
 8001b82:	4907      	ldr	r1, [pc, #28]	@ (8001ba0 <main+0xa4>)
 8001b84:	4808      	ldr	r0, [pc, #32]	@ (8001ba8 <main+0xac>)
 8001b86:	f7ff ff5f 	bl	8001a48 <NEXTION_SendString>
	    if(CANSPI_Receive(&rxMessage))
 8001b8a:	e7ce      	b.n	8001b2a <main+0x2e>
 8001b8c:	20000378 	.word	0x20000378
 8001b90:	66666667 	.word	0x66666667
 8001b94:	08009c90 	.word	0x08009c90
 8001b98:	2000039c 	.word	0x2000039c
 8001b9c:	08009c94 	.word	0x08009c94
 8001ba0:	08009c98 	.word	0x08009c98
 8001ba4:	08009c9c 	.word	0x08009c9c
 8001ba8:	08009ca0 	.word	0x08009ca0

08001bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b094      	sub	sp, #80	@ 0x50
 8001bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	2234      	movs	r2, #52	@ 0x34
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f004 fbdd 	bl	800637a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	4b23      	ldr	r3, [pc, #140]	@ (8001c64 <SystemClock_Config+0xb8>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd8:	4a22      	ldr	r2, [pc, #136]	@ (8001c64 <SystemClock_Config+0xb8>)
 8001bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bde:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be0:	4b20      	ldr	r3, [pc, #128]	@ (8001c64 <SystemClock_Config+0xb8>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bec:	2300      	movs	r3, #0
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <SystemClock_Config+0xbc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c68 <SystemClock_Config+0xbc>)
 8001bfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <SystemClock_Config+0xbc>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c10:	2301      	movs	r3, #1
 8001c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c14:	2310      	movs	r3, #16
 8001c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4618      	mov	r0, r3
 8001c22:	f001 fb59 	bl	80032d8 <HAL_RCC_OscConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001c2c:	f000 f94a 	bl	8001ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c30:	230f      	movs	r3, #15
 8001c32:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 f880 	bl	8002d50 <HAL_RCC_ClockConfig>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001c56:	f000 f935 	bl	8001ec4 <Error_Handler>
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	3750      	adds	r7, #80	@ 0x50
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40007000 	.word	0x40007000

08001c6c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c70:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <MX_CAN1_Init+0x60>)
 8001c72:	4a17      	ldr	r2, [pc, #92]	@ (8001cd0 <MX_CAN1_Init+0x64>)
 8001c74:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001c76:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <MX_CAN1_Init+0x60>)
 8001c78:	2210      	movs	r2, #16
 8001c7a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <MX_CAN1_Init+0x60>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c82:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <MX_CAN1_Init+0x60>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001c88:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <MX_CAN1_Init+0x60>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <MX_CAN1_Init+0x60>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ccc <MX_CAN1_Init+0x60>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <MX_CAN1_Init+0x60>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <MX_CAN1_Init+0x60>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001ca6:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <MX_CAN1_Init+0x60>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001cac:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <MX_CAN1_Init+0x60>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001cb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <MX_CAN1_Init+0x60>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001cb8:	4804      	ldr	r0, [pc, #16]	@ (8001ccc <MX_CAN1_Init+0x60>)
 8001cba:	f000 fbfb 	bl	80024b4 <HAL_CAN_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001cc4:	f000 f8fe 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200001f0 	.word	0x200001f0
 8001cd0:	40006400 	.word	0x40006400

08001cd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cd8:	4b17      	ldr	r3, [pc, #92]	@ (8001d38 <MX_SPI1_Init+0x64>)
 8001cda:	4a18      	ldr	r2, [pc, #96]	@ (8001d3c <MX_SPI1_Init+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cde:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <MX_SPI1_Init+0x64>)
 8001ce0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ce6:	4b14      	ldr	r3, [pc, #80]	@ (8001d38 <MX_SPI1_Init+0x64>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cec:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <MX_SPI1_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf2:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <MX_SPI1_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d38 <MX_SPI1_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001d38 <MX_SPI1_Init+0x64>)
 8001d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d06:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <MX_SPI1_Init+0x64>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <MX_SPI1_Init+0x64>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d12:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <MX_SPI1_Init+0x64>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d18:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <MX_SPI1_Init+0x64>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <MX_SPI1_Init+0x64>)
 8001d20:	220a      	movs	r2, #10
 8001d22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d24:	4804      	ldr	r0, [pc, #16]	@ (8001d38 <MX_SPI1_Init+0x64>)
 8001d26:	f001 fd75 	bl	8003814 <HAL_SPI_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d30:	f000 f8c8 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000218 	.word	0x20000218
 8001d3c:	40013000 	.word	0x40013000

08001d40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	@ (8001d90 <MX_USART1_UART_Init+0x50>)
 8001d48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d4c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d66:	220c      	movs	r2, #12
 8001d68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	@ (8001d8c <MX_USART1_UART_Init+0x4c>)
 8001d78:	f002 fb2c 	bl	80043d4 <HAL_UART_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d82:	f000 f89f 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000270 	.word	0x20000270
 8001d90:	40011000 	.word	0x40011000

08001d94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <MX_USART2_UART_Init+0x50>)
 8001d9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001da0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001da4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001dba:	220c      	movs	r2, #12
 8001dbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <MX_USART2_UART_Init+0x4c>)
 8001dcc:	f002 fb02 	bl	80043d4 <HAL_UART_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dd6:	f000 f875 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200002b8 	.word	0x200002b8
 8001de4:	40004400 	.word	0x40004400

08001de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	@ 0x28
 8001dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
 8001dfc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb8 <MX_GPIO_Init+0xd0>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a2c      	ldr	r2, [pc, #176]	@ (8001eb8 <MX_GPIO_Init+0xd0>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb8 <MX_GPIO_Init+0xd0>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b26      	ldr	r3, [pc, #152]	@ (8001eb8 <MX_GPIO_Init+0xd0>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	4a25      	ldr	r2, [pc, #148]	@ (8001eb8 <MX_GPIO_Init+0xd0>)
 8001e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2a:	4b23      	ldr	r3, [pc, #140]	@ (8001eb8 <MX_GPIO_Init+0xd0>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb8 <MX_GPIO_Init+0xd0>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb8 <MX_GPIO_Init+0xd0>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb8 <MX_GPIO_Init+0xd0>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	4b18      	ldr	r3, [pc, #96]	@ (8001eb8 <MX_GPIO_Init+0xd0>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	4a17      	ldr	r2, [pc, #92]	@ (8001eb8 <MX_GPIO_Init+0xd0>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e62:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <MX_GPIO_Init+0xd0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2110      	movs	r1, #16
 8001e72:	4812      	ldr	r0, [pc, #72]	@ (8001ebc <MX_GPIO_Init+0xd4>)
 8001e74:	f000 ff52 	bl	8002d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	480c      	ldr	r0, [pc, #48]	@ (8001ec0 <MX_GPIO_Init+0xd8>)
 8001e90:	f000 fdb0 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001e94:	2310      	movs	r3, #16
 8001e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4804      	ldr	r0, [pc, #16]	@ (8001ebc <MX_GPIO_Init+0xd4>)
 8001eac:	f000 fda2 	bl	80029f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001eb0:	bf00      	nop
 8001eb2:	3728      	adds	r7, #40	@ 0x28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	40020800 	.word	0x40020800

08001ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec8:	b672      	cpsid	i
}
 8001eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <Error_Handler+0x8>

08001ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	4b10      	ldr	r3, [pc, #64]	@ (8001f1c <HAL_MspInit+0x4c>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	4a0f      	ldr	r2, [pc, #60]	@ (8001f1c <HAL_MspInit+0x4c>)
 8001ee0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <HAL_MspInit+0x4c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <HAL_MspInit+0x4c>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	4a08      	ldr	r2, [pc, #32]	@ (8001f1c <HAL_MspInit+0x4c>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f02:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_MspInit+0x4c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800

08001f20 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	@ 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a19      	ldr	r2, [pc, #100]	@ (8001fa4 <HAL_CAN_MspInit+0x84>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d12c      	bne.n	8001f9c <HAL_CAN_MspInit+0x7c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <HAL_CAN_MspInit+0x88>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	4a17      	ldr	r2, [pc, #92]	@ (8001fa8 <HAL_CAN_MspInit+0x88>)
 8001f4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f52:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <HAL_CAN_MspInit+0x88>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <HAL_CAN_MspInit+0x88>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	4a10      	ldr	r2, [pc, #64]	@ (8001fa8 <HAL_CAN_MspInit+0x88>)
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <HAL_CAN_MspInit+0x88>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001f8c:	2309      	movs	r3, #9
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4619      	mov	r1, r3
 8001f96:	4805      	ldr	r0, [pc, #20]	@ (8001fac <HAL_CAN_MspInit+0x8c>)
 8001f98:	f000 fd2c 	bl	80029f4 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001f9c:	bf00      	nop
 8001f9e:	3728      	adds	r7, #40	@ 0x28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40006400 	.word	0x40006400
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020400 	.word	0x40020400

08001fb0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	@ 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a19      	ldr	r2, [pc, #100]	@ (8002034 <HAL_SPI_MspInit+0x84>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d12b      	bne.n	800202a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	4b18      	ldr	r3, [pc, #96]	@ (8002038 <HAL_SPI_MspInit+0x88>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	4a17      	ldr	r2, [pc, #92]	@ (8002038 <HAL_SPI_MspInit+0x88>)
 8001fdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fe2:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <HAL_SPI_MspInit+0x88>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <HAL_SPI_MspInit+0x88>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4a10      	ldr	r2, [pc, #64]	@ (8002038 <HAL_SPI_MspInit+0x88>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <HAL_SPI_MspInit+0x88>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800200a:	23e0      	movs	r3, #224	@ 0xe0
 800200c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800201a:	2305      	movs	r3, #5
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	4805      	ldr	r0, [pc, #20]	@ (800203c <HAL_SPI_MspInit+0x8c>)
 8002026:	f000 fce5 	bl	80029f4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800202a:	bf00      	nop
 800202c:	3728      	adds	r7, #40	@ 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40013000 	.word	0x40013000
 8002038:	40023800 	.word	0x40023800
 800203c:	40020000 	.word	0x40020000

08002040 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08c      	sub	sp, #48	@ 0x30
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 031c 	add.w	r3, r7, #28
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a36      	ldr	r2, [pc, #216]	@ (8002138 <HAL_UART_MspInit+0xf8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d135      	bne.n	80020ce <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	4b35      	ldr	r3, [pc, #212]	@ (800213c <HAL_UART_MspInit+0xfc>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	4a34      	ldr	r2, [pc, #208]	@ (800213c <HAL_UART_MspInit+0xfc>)
 800206c:	f043 0310 	orr.w	r3, r3, #16
 8002070:	6453      	str	r3, [r2, #68]	@ 0x44
 8002072:	4b32      	ldr	r3, [pc, #200]	@ (800213c <HAL_UART_MspInit+0xfc>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	4b2e      	ldr	r3, [pc, #184]	@ (800213c <HAL_UART_MspInit+0xfc>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	4a2d      	ldr	r2, [pc, #180]	@ (800213c <HAL_UART_MspInit+0xfc>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6313      	str	r3, [r2, #48]	@ 0x30
 800208e:	4b2b      	ldr	r3, [pc, #172]	@ (800213c <HAL_UART_MspInit+0xfc>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800209a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800209e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a8:	2303      	movs	r3, #3
 80020aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020ac:	2307      	movs	r3, #7
 80020ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b0:	f107 031c 	add.w	r3, r7, #28
 80020b4:	4619      	mov	r1, r3
 80020b6:	4822      	ldr	r0, [pc, #136]	@ (8002140 <HAL_UART_MspInit+0x100>)
 80020b8:	f000 fc9c 	bl	80029f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	2025      	movs	r0, #37	@ 0x25
 80020c2:	f000 fbce 	bl	8002862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020c6:	2025      	movs	r0, #37	@ 0x25
 80020c8:	f000 fbe7 	bl	800289a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80020cc:	e030      	b.n	8002130 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002144 <HAL_UART_MspInit+0x104>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d12b      	bne.n	8002130 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020d8:	2300      	movs	r3, #0
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	4b17      	ldr	r3, [pc, #92]	@ (800213c <HAL_UART_MspInit+0xfc>)
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	4a16      	ldr	r2, [pc, #88]	@ (800213c <HAL_UART_MspInit+0xfc>)
 80020e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80020e8:	4b14      	ldr	r3, [pc, #80]	@ (800213c <HAL_UART_MspInit+0xfc>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	4b10      	ldr	r3, [pc, #64]	@ (800213c <HAL_UART_MspInit+0xfc>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fc:	4a0f      	ldr	r2, [pc, #60]	@ (800213c <HAL_UART_MspInit+0xfc>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6313      	str	r3, [r2, #48]	@ 0x30
 8002104:	4b0d      	ldr	r3, [pc, #52]	@ (800213c <HAL_UART_MspInit+0xfc>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002110:	230c      	movs	r3, #12
 8002112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002120:	2307      	movs	r3, #7
 8002122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f107 031c 	add.w	r3, r7, #28
 8002128:	4619      	mov	r1, r3
 800212a:	4805      	ldr	r0, [pc, #20]	@ (8002140 <HAL_UART_MspInit+0x100>)
 800212c:	f000 fc62 	bl	80029f4 <HAL_GPIO_Init>
}
 8002130:	bf00      	nop
 8002132:	3730      	adds	r7, #48	@ 0x30
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40011000 	.word	0x40011000
 800213c:	40023800 	.word	0x40023800
 8002140:	40020000 	.word	0x40020000
 8002144:	40004400 	.word	0x40004400

08002148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800214c:	bf00      	nop
 800214e:	e7fd      	b.n	800214c <NMI_Handler+0x4>

08002150 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <HardFault_Handler+0x4>

08002158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <MemManage_Handler+0x4>

08002160 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <BusFault_Handler+0x4>

08002168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <UsageFault_Handler+0x4>

08002170 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800219e:	f000 f945 	bl	800242c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021ac:	4802      	ldr	r0, [pc, #8]	@ (80021b8 <USART1_IRQHandler+0x10>)
 80021ae:	f002 f9ed 	bl	800458c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000270 	.word	0x20000270

080021bc <_getpid>:
char **environ = __env;

/* Functions */
void initialise_monitor_handles() {}

int _getpid(void) { return 1; }
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
 80021c0:	2301      	movs	r3, #1
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <_kill>:

int _kill(int pid, int sig)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 80021d6:	f004 f923 	bl	8006420 <__errno>
 80021da:	4603      	mov	r3, r0
 80021dc:	2216      	movs	r2, #22
 80021de:	601a      	str	r2, [r3, #0]
    return -1;
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_exit>:

void _exit (int status)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 80021f4:	f04f 31ff 	mov.w	r1, #4294967295
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ffe7 	bl	80021cc <_kill>
    while (1) {}    /* Make sure we hang here */
 80021fe:	bf00      	nop
 8002200:	e7fd      	b.n	80021fe <_exit+0x12>

08002202 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	e00a      	b.n	800222a <_read+0x28>
    {
        *ptr++ = __io_getchar();
 8002214:	f3af 8000 	nop.w
 8002218:	4601      	mov	r1, r0
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	60ba      	str	r2, [r7, #8]
 8002220:	b2ca      	uxtb	r2, r1
 8002222:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3301      	adds	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	dbf0      	blt.n	8002214 <_read+0x12>
    }

    return len;
 8002232:	687b      	ldr	r3, [r7, #4]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_close>:

    return len;
}

int _close(int file)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002264:	605a      	str	r2, [r3, #4]
    return 0;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <_isatty>:

int _isatty(int file)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 800227c:	2301      	movs	r3, #1
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022ac:	4a14      	ldr	r2, [pc, #80]	@ (8002300 <_sbrk+0x5c>)
 80022ae:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <_sbrk+0x60>)
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b8:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c0:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <_sbrk+0x64>)
 80022c2:	4a12      	ldr	r2, [pc, #72]	@ (800230c <_sbrk+0x68>)
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c6:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d207      	bcs.n	80022e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d4:	f004 f8a4 	bl	8006420 <__errno>
 80022d8:	4603      	mov	r3, r0
 80022da:	220c      	movs	r2, #12
 80022dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	e009      	b.n	80022f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e4:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ea:	4b07      	ldr	r3, [pc, #28]	@ (8002308 <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	4a05      	ldr	r2, [pc, #20]	@ (8002308 <_sbrk+0x64>)
 80022f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022f6:	68fb      	ldr	r3, [r7, #12]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20020000 	.word	0x20020000
 8002304:	00000400 	.word	0x00000400
 8002308:	200003a0 	.word	0x200003a0
 800230c:	200004f8 	.word	0x200004f8

08002310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <SystemInit+0x20>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231a:	4a05      	ldr	r2, [pc, #20]	@ (8002330 <SystemInit+0x20>)
 800231c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002334:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800236c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002338:	f7ff ffea 	bl	8002310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800233c:	480c      	ldr	r0, [pc, #48]	@ (8002370 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800233e:	490d      	ldr	r1, [pc, #52]	@ (8002374 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002340:	4a0d      	ldr	r2, [pc, #52]	@ (8002378 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002344:	e002      	b.n	800234c <LoopCopyDataInit>

08002346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234a:	3304      	adds	r3, #4

0800234c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800234c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002350:	d3f9      	bcc.n	8002346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002352:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002354:	4c0a      	ldr	r4, [pc, #40]	@ (8002380 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002358:	e001      	b.n	800235e <LoopFillZerobss>

0800235a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800235c:	3204      	adds	r2, #4

0800235e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002360:	d3fb      	bcc.n	800235a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002362:	f004 f863 	bl	800642c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002366:	f7ff fbc9 	bl	8001afc <main>
  bx  lr    
 800236a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800236c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002374:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002378:	0800a0f4 	.word	0x0800a0f4
  ldr r2, =_sbss
 800237c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002380:	200004f4 	.word	0x200004f4

08002384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002384:	e7fe      	b.n	8002384 <ADC_IRQHandler>
	...

08002388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800238c:	4b0e      	ldr	r3, [pc, #56]	@ (80023c8 <HAL_Init+0x40>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0d      	ldr	r2, [pc, #52]	@ (80023c8 <HAL_Init+0x40>)
 8002392:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002398:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <HAL_Init+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0a      	ldr	r2, [pc, #40]	@ (80023c8 <HAL_Init+0x40>)
 800239e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a4:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <HAL_Init+0x40>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a07      	ldr	r2, [pc, #28]	@ (80023c8 <HAL_Init+0x40>)
 80023aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b0:	2003      	movs	r0, #3
 80023b2:	f000 fa4b 	bl	800284c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023b6:	200f      	movs	r0, #15
 80023b8:	f000 f808 	bl	80023cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023bc:	f7ff fd88 	bl	8001ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023c00 	.word	0x40023c00

080023cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023d4:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <HAL_InitTick+0x54>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b12      	ldr	r3, [pc, #72]	@ (8002424 <HAL_InitTick+0x58>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fa63 	bl	80028b6 <HAL_SYSTICK_Config>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e00e      	b.n	8002418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b0f      	cmp	r3, #15
 80023fe:	d80a      	bhi.n	8002416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002400:	2200      	movs	r2, #0
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	f04f 30ff 	mov.w	r0, #4294967295
 8002408:	f000 fa2b 	bl	8002862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800240c:	4a06      	ldr	r2, [pc, #24]	@ (8002428 <HAL_InitTick+0x5c>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	e000      	b.n	8002418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
}
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000000 	.word	0x20000000
 8002424:	20000008 	.word	0x20000008
 8002428:	20000004 	.word	0x20000004

0800242c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002430:	4b06      	ldr	r3, [pc, #24]	@ (800244c <HAL_IncTick+0x20>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <HAL_IncTick+0x24>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4413      	add	r3, r2
 800243c:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <HAL_IncTick+0x24>)
 800243e:	6013      	str	r3, [r2, #0]
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000008 	.word	0x20000008
 8002450:	200003a4 	.word	0x200003a4

08002454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return uwTick;
 8002458:	4b03      	ldr	r3, [pc, #12]	@ (8002468 <HAL_GetTick+0x14>)
 800245a:	681b      	ldr	r3, [r3, #0]
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	200003a4 	.word	0x200003a4

0800246c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002474:	f7ff ffee 	bl	8002454 <HAL_GetTick>
 8002478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002484:	d005      	beq.n	8002492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002486:	4b0a      	ldr	r3, [pc, #40]	@ (80024b0 <HAL_Delay+0x44>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4413      	add	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002492:	bf00      	nop
 8002494:	f7ff ffde 	bl	8002454 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d8f7      	bhi.n	8002494 <HAL_Delay+0x28>
  {
  }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000008 	.word	0x20000008

080024b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0ed      	b.n	80026a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff fd24 	bl	8001f20 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024e8:	f7ff ffb4 	bl	8002454 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024ee:	e012      	b.n	8002516 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024f0:	f7ff ffb0 	bl	8002454 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b0a      	cmp	r3, #10
 80024fc:	d90b      	bls.n	8002516 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2205      	movs	r2, #5
 800250e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e0c5      	b.n	80026a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0e5      	beq.n	80024f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0202 	bic.w	r2, r2, #2
 8002532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002534:	f7ff ff8e 	bl	8002454 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800253a:	e012      	b.n	8002562 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800253c:	f7ff ff8a 	bl	8002454 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b0a      	cmp	r3, #10
 8002548:	d90b      	bls.n	8002562 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2205      	movs	r2, #5
 800255a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e09f      	b.n	80026a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1e5      	bne.n	800253c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7e1b      	ldrb	r3, [r3, #24]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d108      	bne.n	800258a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e007      	b.n	800259a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7e5b      	ldrb	r3, [r3, #25]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d108      	bne.n	80025b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	e007      	b.n	80025c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7e9b      	ldrb	r3, [r3, #26]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d108      	bne.n	80025de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0220 	orr.w	r2, r2, #32
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	e007      	b.n	80025ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0220 	bic.w	r2, r2, #32
 80025ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7edb      	ldrb	r3, [r3, #27]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d108      	bne.n	8002608 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0210 	bic.w	r2, r2, #16
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e007      	b.n	8002618 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0210 	orr.w	r2, r2, #16
 8002616:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7f1b      	ldrb	r3, [r3, #28]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d108      	bne.n	8002632 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0208 	orr.w	r2, r2, #8
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	e007      	b.n	8002642 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0208 	bic.w	r2, r2, #8
 8002640:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	7f5b      	ldrb	r3, [r3, #29]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d108      	bne.n	800265c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0204 	orr.w	r2, r2, #4
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e007      	b.n	800266c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0204 	bic.w	r2, r2, #4
 800266a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	ea42 0103 	orr.w	r1, r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	1e5a      	subs	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026bc:	4b0c      	ldr	r3, [pc, #48]	@ (80026f0 <__NVIC_SetPriorityGrouping+0x44>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026c8:	4013      	ands	r3, r2
 80026ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026de:	4a04      	ldr	r2, [pc, #16]	@ (80026f0 <__NVIC_SetPriorityGrouping+0x44>)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	60d3      	str	r3, [r2, #12]
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f8:	4b04      	ldr	r3, [pc, #16]	@ (800270c <__NVIC_GetPriorityGrouping+0x18>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	0a1b      	lsrs	r3, r3, #8
 80026fe:	f003 0307 	and.w	r3, r3, #7
}
 8002702:	4618      	mov	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	2b00      	cmp	r3, #0
 8002720:	db0b      	blt.n	800273a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	f003 021f 	and.w	r2, r3, #31
 8002728:	4907      	ldr	r1, [pc, #28]	@ (8002748 <__NVIC_EnableIRQ+0x38>)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	2001      	movs	r0, #1
 8002732:	fa00 f202 	lsl.w	r2, r0, r2
 8002736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	e000e100 	.word	0xe000e100

0800274c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	6039      	str	r1, [r7, #0]
 8002756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	2b00      	cmp	r3, #0
 800275e:	db0a      	blt.n	8002776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	b2da      	uxtb	r2, r3
 8002764:	490c      	ldr	r1, [pc, #48]	@ (8002798 <__NVIC_SetPriority+0x4c>)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	0112      	lsls	r2, r2, #4
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	440b      	add	r3, r1
 8002770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002774:	e00a      	b.n	800278c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4908      	ldr	r1, [pc, #32]	@ (800279c <__NVIC_SetPriority+0x50>)
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	3b04      	subs	r3, #4
 8002784:	0112      	lsls	r2, r2, #4
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	440b      	add	r3, r1
 800278a:	761a      	strb	r2, [r3, #24]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000e100 	.word	0xe000e100
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	@ 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f1c3 0307 	rsb	r3, r3, #7
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	bf28      	it	cs
 80027be:	2304      	movcs	r3, #4
 80027c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2b06      	cmp	r3, #6
 80027c8:	d902      	bls.n	80027d0 <NVIC_EncodePriority+0x30>
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3b03      	subs	r3, #3
 80027ce:	e000      	b.n	80027d2 <NVIC_EncodePriority+0x32>
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	f04f 32ff 	mov.w	r2, #4294967295
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43da      	mvns	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	401a      	ands	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	43d9      	mvns	r1, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	4313      	orrs	r3, r2
         );
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3724      	adds	r7, #36	@ 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002818:	d301      	bcc.n	800281e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281a:	2301      	movs	r3, #1
 800281c:	e00f      	b.n	800283e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800281e:	4a0a      	ldr	r2, [pc, #40]	@ (8002848 <SysTick_Config+0x40>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002826:	210f      	movs	r1, #15
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	f7ff ff8e 	bl	800274c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002830:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <SysTick_Config+0x40>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002836:	4b04      	ldr	r3, [pc, #16]	@ (8002848 <SysTick_Config+0x40>)
 8002838:	2207      	movs	r2, #7
 800283a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	e000e010 	.word	0xe000e010

0800284c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ff29 	bl	80026ac <__NVIC_SetPriorityGrouping>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002862:	b580      	push	{r7, lr}
 8002864:	b086      	sub	sp, #24
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002874:	f7ff ff3e 	bl	80026f4 <__NVIC_GetPriorityGrouping>
 8002878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	6978      	ldr	r0, [r7, #20]
 8002880:	f7ff ff8e 	bl	80027a0 <NVIC_EncodePriority>
 8002884:	4602      	mov	r2, r0
 8002886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff5d 	bl	800274c <__NVIC_SetPriority>
}
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ff31 	bl	8002710 <__NVIC_EnableIRQ>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ffa2 	bl	8002808 <SysTick_Config>
 80028c4:	4603      	mov	r3, r0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff fdba 	bl	8002454 <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d008      	beq.n	8002900 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2280      	movs	r2, #128	@ 0x80
 80028f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e052      	b.n	80029a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0216 	bic.w	r2, r2, #22
 800290e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800291e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d103      	bne.n	8002930 <HAL_DMA_Abort+0x62>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800292c:	2b00      	cmp	r3, #0
 800292e:	d007      	beq.n	8002940 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0208 	bic.w	r2, r2, #8
 800293e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002950:	e013      	b.n	800297a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002952:	f7ff fd7f 	bl	8002454 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b05      	cmp	r3, #5
 800295e:	d90c      	bls.n	800297a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2203      	movs	r2, #3
 800296a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e015      	b.n	80029a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e4      	bne.n	8002952 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298c:	223f      	movs	r2, #63	@ 0x3f
 800298e:	409a      	lsls	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d004      	beq.n	80029cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2280      	movs	r2, #128	@ 0x80
 80029c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e00c      	b.n	80029e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2205      	movs	r2, #5
 80029d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	@ 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	e165      	b.n	8002cdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a10:	2201      	movs	r2, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	f040 8154 	bne.w	8002cd6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d005      	beq.n	8002a46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d130      	bne.n	8002aa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	2203      	movs	r2, #3
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 0201 	and.w	r2, r3, #1
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d017      	beq.n	8002ae4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d123      	bne.n	8002b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3208      	adds	r2, #8
 8002af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	220f      	movs	r2, #15
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	08da      	lsrs	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3208      	adds	r2, #8
 8002b32:	69b9      	ldr	r1, [r7, #24]
 8002b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0203 	and.w	r2, r3, #3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80ae 	beq.w	8002cd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	4b5d      	ldr	r3, [pc, #372]	@ (8002cf4 <HAL_GPIO_Init+0x300>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b82:	4a5c      	ldr	r2, [pc, #368]	@ (8002cf4 <HAL_GPIO_Init+0x300>)
 8002b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b8a:	4b5a      	ldr	r3, [pc, #360]	@ (8002cf4 <HAL_GPIO_Init+0x300>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b96:	4a58      	ldr	r2, [pc, #352]	@ (8002cf8 <HAL_GPIO_Init+0x304>)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	220f      	movs	r2, #15
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4f      	ldr	r2, [pc, #316]	@ (8002cfc <HAL_GPIO_Init+0x308>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d025      	beq.n	8002c0e <HAL_GPIO_Init+0x21a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4e      	ldr	r2, [pc, #312]	@ (8002d00 <HAL_GPIO_Init+0x30c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01f      	beq.n	8002c0a <HAL_GPIO_Init+0x216>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4d      	ldr	r2, [pc, #308]	@ (8002d04 <HAL_GPIO_Init+0x310>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d019      	beq.n	8002c06 <HAL_GPIO_Init+0x212>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4c      	ldr	r2, [pc, #304]	@ (8002d08 <HAL_GPIO_Init+0x314>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_GPIO_Init+0x20e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4b      	ldr	r2, [pc, #300]	@ (8002d0c <HAL_GPIO_Init+0x318>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00d      	beq.n	8002bfe <HAL_GPIO_Init+0x20a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4a      	ldr	r2, [pc, #296]	@ (8002d10 <HAL_GPIO_Init+0x31c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <HAL_GPIO_Init+0x206>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a49      	ldr	r2, [pc, #292]	@ (8002d14 <HAL_GPIO_Init+0x320>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d101      	bne.n	8002bf6 <HAL_GPIO_Init+0x202>
 8002bf2:	2306      	movs	r3, #6
 8002bf4:	e00c      	b.n	8002c10 <HAL_GPIO_Init+0x21c>
 8002bf6:	2307      	movs	r3, #7
 8002bf8:	e00a      	b.n	8002c10 <HAL_GPIO_Init+0x21c>
 8002bfa:	2305      	movs	r3, #5
 8002bfc:	e008      	b.n	8002c10 <HAL_GPIO_Init+0x21c>
 8002bfe:	2304      	movs	r3, #4
 8002c00:	e006      	b.n	8002c10 <HAL_GPIO_Init+0x21c>
 8002c02:	2303      	movs	r3, #3
 8002c04:	e004      	b.n	8002c10 <HAL_GPIO_Init+0x21c>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e002      	b.n	8002c10 <HAL_GPIO_Init+0x21c>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_GPIO_Init+0x21c>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	f002 0203 	and.w	r2, r2, #3
 8002c16:	0092      	lsls	r2, r2, #2
 8002c18:	4093      	lsls	r3, r2
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c20:	4935      	ldr	r1, [pc, #212]	@ (8002cf8 <HAL_GPIO_Init+0x304>)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	089b      	lsrs	r3, r3, #2
 8002c26:	3302      	adds	r3, #2
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c52:	4a31      	ldr	r2, [pc, #196]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c58:	4b2f      	ldr	r3, [pc, #188]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c7c:	4a26      	ldr	r2, [pc, #152]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c82:	4b25      	ldr	r3, [pc, #148]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cac:	4b1a      	ldr	r3, [pc, #104]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cd0:	4a11      	ldr	r2, [pc, #68]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b0f      	cmp	r3, #15
 8002ce0:	f67f ae96 	bls.w	8002a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	3724      	adds	r7, #36	@ 0x24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40013800 	.word	0x40013800
 8002cfc:	40020000 	.word	0x40020000
 8002d00:	40020400 	.word	0x40020400
 8002d04:	40020800 	.word	0x40020800
 8002d08:	40020c00 	.word	0x40020c00
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40021400 	.word	0x40021400
 8002d14:	40021800 	.word	0x40021800
 8002d18:	40013c00 	.word	0x40013c00

08002d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	807b      	strh	r3, [r7, #2]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d2c:	787b      	ldrb	r3, [r7, #1]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d32:	887a      	ldrh	r2, [r7, #2]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d38:	e003      	b.n	8002d42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d3a:	887b      	ldrh	r3, [r7, #2]
 8002d3c:	041a      	lsls	r2, r3, #16
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	619a      	str	r2, [r3, #24]
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0cc      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d64:	4b68      	ldr	r3, [pc, #416]	@ (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d90c      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b65      	ldr	r3, [pc, #404]	@ (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b63      	ldr	r3, [pc, #396]	@ (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0b8      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d020      	beq.n	8002dda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da4:	4b59      	ldr	r3, [pc, #356]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a58      	ldr	r2, [pc, #352]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dbc:	4b53      	ldr	r3, [pc, #332]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4a52      	ldr	r2, [pc, #328]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc8:	4b50      	ldr	r3, [pc, #320]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	494d      	ldr	r1, [pc, #308]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d044      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d107      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	4b47      	ldr	r3, [pc, #284]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d119      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e07f      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d003      	beq.n	8002e0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e06f      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e067      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e2e:	4b37      	ldr	r3, [pc, #220]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f023 0203 	bic.w	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4934      	ldr	r1, [pc, #208]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e40:	f7ff fb08 	bl	8002454 <HAL_GetTick>
 8002e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e48:	f7ff fb04 	bl	8002454 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e04f      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 020c 	and.w	r2, r3, #12
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d1eb      	bne.n	8002e48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e70:	4b25      	ldr	r3, [pc, #148]	@ (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d20c      	bcs.n	8002e98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b22      	ldr	r3, [pc, #136]	@ (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b20      	ldr	r3, [pc, #128]	@ (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e032      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea4:	4b19      	ldr	r3, [pc, #100]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4916      	ldr	r1, [pc, #88]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ec2:	4b12      	ldr	r3, [pc, #72]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	490e      	ldr	r1, [pc, #56]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ed6:	f000 f855 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8002eda:	4602      	mov	r2, r0
 8002edc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	490a      	ldr	r1, [pc, #40]	@ (8002f10 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	5ccb      	ldrb	r3, [r1, r3]
 8002eea:	fa22 f303 	lsr.w	r3, r2, r3
 8002eee:	4a09      	ldr	r2, [pc, #36]	@ (8002f14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ef2:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fa68 	bl	80023cc <HAL_InitTick>

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40023c00 	.word	0x40023c00
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	08009ca4 	.word	0x08009ca4
 8002f14:	20000000 	.word	0x20000000
 8002f18:	20000004 	.word	0x20000004

08002f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f20:	4b03      	ldr	r3, [pc, #12]	@ (8002f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000000 	.word	0x20000000

08002f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f38:	f7ff fff0 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	0a9b      	lsrs	r3, r3, #10
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	4903      	ldr	r1, [pc, #12]	@ (8002f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40023800 	.word	0x40023800
 8002f58:	08009cb4 	.word	0x08009cb4

08002f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f60:	f7ff ffdc 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f64:	4602      	mov	r2, r0
 8002f66:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	0b5b      	lsrs	r3, r3, #13
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	4903      	ldr	r1, [pc, #12]	@ (8002f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f72:	5ccb      	ldrb	r3, [r1, r3]
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	08009cb4 	.word	0x08009cb4

08002f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f88:	b0a6      	sub	sp, #152	@ 0x98
 8002f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002faa:	4bc8      	ldr	r3, [pc, #800]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b0c      	cmp	r3, #12
 8002fb4:	f200 817e 	bhi.w	80032b4 <HAL_RCC_GetSysClockFreq+0x330>
 8002fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbe:	bf00      	nop
 8002fc0:	08002ff5 	.word	0x08002ff5
 8002fc4:	080032b5 	.word	0x080032b5
 8002fc8:	080032b5 	.word	0x080032b5
 8002fcc:	080032b5 	.word	0x080032b5
 8002fd0:	08002ffd 	.word	0x08002ffd
 8002fd4:	080032b5 	.word	0x080032b5
 8002fd8:	080032b5 	.word	0x080032b5
 8002fdc:	080032b5 	.word	0x080032b5
 8002fe0:	08003005 	.word	0x08003005
 8002fe4:	080032b5 	.word	0x080032b5
 8002fe8:	080032b5 	.word	0x080032b5
 8002fec:	080032b5 	.word	0x080032b5
 8002ff0:	0800316f 	.word	0x0800316f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff4:	4bb6      	ldr	r3, [pc, #728]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002ff6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ffa:	e15f      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ffc:	4bb5      	ldr	r3, [pc, #724]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ffe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003002:	e15b      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003004:	4bb1      	ldr	r3, [pc, #708]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x348>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800300c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003010:	4bae      	ldr	r3, [pc, #696]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x348>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d031      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301c:	4bab      	ldr	r3, [pc, #684]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x348>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	099b      	lsrs	r3, r3, #6
 8003022:	2200      	movs	r2, #0
 8003024:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003026:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003028:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800302a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003030:	2300      	movs	r3, #0
 8003032:	667b      	str	r3, [r7, #100]	@ 0x64
 8003034:	4ba7      	ldr	r3, [pc, #668]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003036:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800303a:	462a      	mov	r2, r5
 800303c:	fb03 f202 	mul.w	r2, r3, r2
 8003040:	2300      	movs	r3, #0
 8003042:	4621      	mov	r1, r4
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	4aa2      	ldr	r2, [pc, #648]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800304c:	4621      	mov	r1, r4
 800304e:	fba1 1202 	umull	r1, r2, r1, r2
 8003052:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003054:	460a      	mov	r2, r1
 8003056:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003058:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800305a:	4413      	add	r3, r2
 800305c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800305e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003062:	2200      	movs	r2, #0
 8003064:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003066:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003068:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800306c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003070:	f7fd fe2a 	bl	8000cc8 <__aeabi_uldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4613      	mov	r3, r2
 800307a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800307e:	e064      	b.n	800314a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003080:	4b92      	ldr	r3, [pc, #584]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x348>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	099b      	lsrs	r3, r3, #6
 8003086:	2200      	movs	r2, #0
 8003088:	653b      	str	r3, [r7, #80]	@ 0x50
 800308a:	657a      	str	r2, [r7, #84]	@ 0x54
 800308c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800308e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003092:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003094:	2300      	movs	r3, #0
 8003096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003098:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800309c:	4622      	mov	r2, r4
 800309e:	462b      	mov	r3, r5
 80030a0:	f04f 0000 	mov.w	r0, #0
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	0159      	lsls	r1, r3, #5
 80030aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ae:	0150      	lsls	r0, r2, #5
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4621      	mov	r1, r4
 80030b6:	1a51      	subs	r1, r2, r1
 80030b8:	6139      	str	r1, [r7, #16]
 80030ba:	4629      	mov	r1, r5
 80030bc:	eb63 0301 	sbc.w	r3, r3, r1
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030ce:	4659      	mov	r1, fp
 80030d0:	018b      	lsls	r3, r1, #6
 80030d2:	4651      	mov	r1, sl
 80030d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030d8:	4651      	mov	r1, sl
 80030da:	018a      	lsls	r2, r1, #6
 80030dc:	4651      	mov	r1, sl
 80030de:	ebb2 0801 	subs.w	r8, r2, r1
 80030e2:	4659      	mov	r1, fp
 80030e4:	eb63 0901 	sbc.w	r9, r3, r1
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030fc:	4690      	mov	r8, r2
 80030fe:	4699      	mov	r9, r3
 8003100:	4623      	mov	r3, r4
 8003102:	eb18 0303 	adds.w	r3, r8, r3
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	462b      	mov	r3, r5
 800310a:	eb49 0303 	adc.w	r3, r9, r3
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800311c:	4629      	mov	r1, r5
 800311e:	028b      	lsls	r3, r1, #10
 8003120:	4621      	mov	r1, r4
 8003122:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003126:	4621      	mov	r1, r4
 8003128:	028a      	lsls	r2, r1, #10
 800312a:	4610      	mov	r0, r2
 800312c:	4619      	mov	r1, r3
 800312e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003132:	2200      	movs	r2, #0
 8003134:	643b      	str	r3, [r7, #64]	@ 0x40
 8003136:	647a      	str	r2, [r7, #68]	@ 0x44
 8003138:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800313c:	f7fd fdc4 	bl	8000cc8 <__aeabi_uldivmod>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4613      	mov	r3, r2
 8003146:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800314a:	4b60      	ldr	r3, [pc, #384]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x348>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	0c1b      	lsrs	r3, r3, #16
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	3301      	adds	r3, #1
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800315c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003160:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800316c:	e0a6      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800316e:	4b57      	ldr	r3, [pc, #348]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x348>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003176:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800317a:	4b54      	ldr	r3, [pc, #336]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x348>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d02a      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003186:	4b51      	ldr	r3, [pc, #324]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x348>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	099b      	lsrs	r3, r3, #6
 800318c:	2200      	movs	r2, #0
 800318e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003190:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003194:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003198:	2100      	movs	r1, #0
 800319a:	4b4e      	ldr	r3, [pc, #312]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800319c:	fb03 f201 	mul.w	r2, r3, r1
 80031a0:	2300      	movs	r3, #0
 80031a2:	fb00 f303 	mul.w	r3, r0, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	4a4a      	ldr	r2, [pc, #296]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x350>)
 80031aa:	fba0 1202 	umull	r1, r2, r0, r2
 80031ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80031b0:	460a      	mov	r2, r1
 80031b2:	673a      	str	r2, [r7, #112]	@ 0x70
 80031b4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80031b6:	4413      	add	r3, r2
 80031b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80031ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031be:	2200      	movs	r2, #0
 80031c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80031c2:	637a      	str	r2, [r7, #52]	@ 0x34
 80031c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80031c8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80031cc:	f7fd fd7c 	bl	8000cc8 <__aeabi_uldivmod>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4613      	mov	r3, r2
 80031d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031da:	e05b      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031dc:	4b3b      	ldr	r3, [pc, #236]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x348>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	099b      	lsrs	r3, r3, #6
 80031e2:	2200      	movs	r2, #0
 80031e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ee:	623b      	str	r3, [r7, #32]
 80031f0:	2300      	movs	r3, #0
 80031f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031f8:	4642      	mov	r2, r8
 80031fa:	464b      	mov	r3, r9
 80031fc:	f04f 0000 	mov.w	r0, #0
 8003200:	f04f 0100 	mov.w	r1, #0
 8003204:	0159      	lsls	r1, r3, #5
 8003206:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800320a:	0150      	lsls	r0, r2, #5
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4641      	mov	r1, r8
 8003212:	ebb2 0a01 	subs.w	sl, r2, r1
 8003216:	4649      	mov	r1, r9
 8003218:	eb63 0b01 	sbc.w	fp, r3, r1
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003228:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800322c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003230:	ebb2 040a 	subs.w	r4, r2, sl
 8003234:	eb63 050b 	sbc.w	r5, r3, fp
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	00eb      	lsls	r3, r5, #3
 8003242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003246:	00e2      	lsls	r2, r4, #3
 8003248:	4614      	mov	r4, r2
 800324a:	461d      	mov	r5, r3
 800324c:	4643      	mov	r3, r8
 800324e:	18e3      	adds	r3, r4, r3
 8003250:	603b      	str	r3, [r7, #0]
 8003252:	464b      	mov	r3, r9
 8003254:	eb45 0303 	adc.w	r3, r5, r3
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003266:	4629      	mov	r1, r5
 8003268:	028b      	lsls	r3, r1, #10
 800326a:	4621      	mov	r1, r4
 800326c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003270:	4621      	mov	r1, r4
 8003272:	028a      	lsls	r2, r1, #10
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800327c:	2200      	movs	r2, #0
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	61fa      	str	r2, [r7, #28]
 8003282:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003286:	f7fd fd1f 	bl	8000cc8 <__aeabi_uldivmod>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4613      	mov	r3, r2
 8003290:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003294:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x348>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	0f1b      	lsrs	r3, r3, #28
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80032a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80032b2:	e003      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032b4:	4b06      	ldr	r3, [pc, #24]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80032b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80032ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3798      	adds	r7, #152	@ 0x98
 80032c4:	46bd      	mov	sp, r7
 80032c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800
 80032d0:	00f42400 	.word	0x00f42400
 80032d4:	017d7840 	.word	0x017d7840

080032d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e28d      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8083 	beq.w	80033fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80032f8:	4b94      	ldr	r3, [pc, #592]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b04      	cmp	r3, #4
 8003302:	d019      	beq.n	8003338 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003304:	4b91      	ldr	r3, [pc, #580]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 030c 	and.w	r3, r3, #12
        || \
 800330c:	2b08      	cmp	r3, #8
 800330e:	d106      	bne.n	800331e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003310:	4b8e      	ldr	r3, [pc, #568]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003318:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800331c:	d00c      	beq.n	8003338 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331e:	4b8b      	ldr	r3, [pc, #556]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003326:	2b0c      	cmp	r3, #12
 8003328:	d112      	bne.n	8003350 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800332a:	4b88      	ldr	r3, [pc, #544]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003332:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003336:	d10b      	bne.n	8003350 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003338:	4b84      	ldr	r3, [pc, #528]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d05b      	beq.n	80033fc <HAL_RCC_OscConfig+0x124>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d157      	bne.n	80033fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e25a      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003358:	d106      	bne.n	8003368 <HAL_RCC_OscConfig+0x90>
 800335a:	4b7c      	ldr	r3, [pc, #496]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a7b      	ldr	r2, [pc, #492]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e01d      	b.n	80033a4 <HAL_RCC_OscConfig+0xcc>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0xb4>
 8003372:	4b76      	ldr	r3, [pc, #472]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a75      	ldr	r2, [pc, #468]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4b73      	ldr	r3, [pc, #460]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a72      	ldr	r2, [pc, #456]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0xcc>
 800338c:	4b6f      	ldr	r3, [pc, #444]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a6e      	ldr	r2, [pc, #440]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	4b6c      	ldr	r3, [pc, #432]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a6b      	ldr	r2, [pc, #428]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 800339e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7ff f852 	bl	8002454 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7ff f84e 	bl	8002454 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	@ 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e21f      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b61      	ldr	r3, [pc, #388]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0xdc>
 80033d2:	e014      	b.n	80033fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7ff f83e 	bl	8002454 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033dc:	f7ff f83a 	bl	8002454 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	@ 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e20b      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	4b57      	ldr	r3, [pc, #348]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x104>
 80033fa:	e000      	b.n	80033fe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d06f      	beq.n	80034ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800340a:	4b50      	ldr	r3, [pc, #320]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b00      	cmp	r3, #0
 8003414:	d017      	beq.n	8003446 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003416:	4b4d      	ldr	r3, [pc, #308]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
        || \
 800341e:	2b08      	cmp	r3, #8
 8003420:	d105      	bne.n	800342e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003422:	4b4a      	ldr	r3, [pc, #296]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342e:	4b47      	ldr	r3, [pc, #284]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d11c      	bne.n	8003474 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343a:	4b44      	ldr	r3, [pc, #272]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d116      	bne.n	8003474 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003446:	4b41      	ldr	r3, [pc, #260]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_RCC_OscConfig+0x186>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d001      	beq.n	800345e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e1d3      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345e:	4b3b      	ldr	r3, [pc, #236]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4937      	ldr	r1, [pc, #220]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003472:	e03a      	b.n	80034ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d020      	beq.n	80034be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800347c:	4b34      	ldr	r3, [pc, #208]	@ (8003550 <HAL_RCC_OscConfig+0x278>)
 800347e:	2201      	movs	r2, #1
 8003480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fe ffe7 	bl	8002454 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800348a:	f7fe ffe3 	bl	8002454 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e1b4      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349c:	4b2b      	ldr	r3, [pc, #172]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a8:	4b28      	ldr	r3, [pc, #160]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4925      	ldr	r1, [pc, #148]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]
 80034bc:	e015      	b.n	80034ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034be:	4b24      	ldr	r3, [pc, #144]	@ (8003550 <HAL_RCC_OscConfig+0x278>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fe ffc6 	bl	8002454 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034cc:	f7fe ffc2 	bl	8002454 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e193      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034de:	4b1b      	ldr	r3, [pc, #108]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d036      	beq.n	8003564 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d016      	beq.n	800352c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fe:	4b15      	ldr	r3, [pc, #84]	@ (8003554 <HAL_RCC_OscConfig+0x27c>)
 8003500:	2201      	movs	r2, #1
 8003502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003504:	f7fe ffa6 	bl	8002454 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800350c:	f7fe ffa2 	bl	8002454 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e173      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351e:	4b0b      	ldr	r3, [pc, #44]	@ (800354c <HAL_RCC_OscConfig+0x274>)
 8003520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x234>
 800352a:	e01b      	b.n	8003564 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800352c:	4b09      	ldr	r3, [pc, #36]	@ (8003554 <HAL_RCC_OscConfig+0x27c>)
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003532:	f7fe ff8f 	bl	8002454 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003538:	e00e      	b.n	8003558 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353a:	f7fe ff8b 	bl	8002454 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d907      	bls.n	8003558 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e15c      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
 800354c:	40023800 	.word	0x40023800
 8003550:	42470000 	.word	0x42470000
 8003554:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	4b8a      	ldr	r3, [pc, #552]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800355a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ea      	bne.n	800353a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8097 	beq.w	80036a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003576:	4b83      	ldr	r3, [pc, #524]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10f      	bne.n	80035a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	4b7f      	ldr	r3, [pc, #508]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	4a7e      	ldr	r2, [pc, #504]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003590:	6413      	str	r3, [r2, #64]	@ 0x40
 8003592:	4b7c      	ldr	r3, [pc, #496]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	4b79      	ldr	r3, [pc, #484]	@ (8003788 <HAL_RCC_OscConfig+0x4b0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d118      	bne.n	80035e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ae:	4b76      	ldr	r3, [pc, #472]	@ (8003788 <HAL_RCC_OscConfig+0x4b0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a75      	ldr	r2, [pc, #468]	@ (8003788 <HAL_RCC_OscConfig+0x4b0>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fe ff4b 	bl	8002454 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c2:	f7fe ff47 	bl	8002454 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e118      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003788 <HAL_RCC_OscConfig+0x4b0>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x31e>
 80035e8:	4b66      	ldr	r3, [pc, #408]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ec:	4a65      	ldr	r2, [pc, #404]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035f4:	e01c      	b.n	8003630 <HAL_RCC_OscConfig+0x358>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x340>
 80035fe:	4b61      	ldr	r3, [pc, #388]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003602:	4a60      	ldr	r2, [pc, #384]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003604:	f043 0304 	orr.w	r3, r3, #4
 8003608:	6713      	str	r3, [r2, #112]	@ 0x70
 800360a:	4b5e      	ldr	r3, [pc, #376]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360e:	4a5d      	ldr	r2, [pc, #372]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6713      	str	r3, [r2, #112]	@ 0x70
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0x358>
 8003618:	4b5a      	ldr	r3, [pc, #360]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361c:	4a59      	ldr	r2, [pc, #356]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	6713      	str	r3, [r2, #112]	@ 0x70
 8003624:	4b57      	ldr	r3, [pc, #348]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003628:	4a56      	ldr	r2, [pc, #344]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800362a:	f023 0304 	bic.w	r3, r3, #4
 800362e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d015      	beq.n	8003664 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003638:	f7fe ff0c 	bl	8002454 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363e:	e00a      	b.n	8003656 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003640:	f7fe ff08 	bl	8002454 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e0d7      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003656:	4b4b      	ldr	r3, [pc, #300]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0ee      	beq.n	8003640 <HAL_RCC_OscConfig+0x368>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fe fef6 	bl	8002454 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366a:	e00a      	b.n	8003682 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7fe fef2 	bl	8002454 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e0c1      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003682:	4b40      	ldr	r3, [pc, #256]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1ee      	bne.n	800366c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d105      	bne.n	80036a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003694:	4b3b      	ldr	r3, [pc, #236]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003698:	4a3a      	ldr	r2, [pc, #232]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800369a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800369e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80ad 	beq.w	8003804 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036aa:	4b36      	ldr	r3, [pc, #216]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d060      	beq.n	8003778 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d145      	bne.n	800374a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036be:	4b33      	ldr	r3, [pc, #204]	@ (800378c <HAL_RCC_OscConfig+0x4b4>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fe fec6 	bl	8002454 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fe fec2 	bl	8002454 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e093      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	4b29      	ldr	r3, [pc, #164]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	019b      	lsls	r3, r3, #6
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	3b01      	subs	r3, #1
 8003704:	041b      	lsls	r3, r3, #16
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370c:	061b      	lsls	r3, r3, #24
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003714:	071b      	lsls	r3, r3, #28
 8003716:	491b      	ldr	r1, [pc, #108]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 8003718:	4313      	orrs	r3, r2
 800371a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800371c:	4b1b      	ldr	r3, [pc, #108]	@ (800378c <HAL_RCC_OscConfig+0x4b4>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fe fe97 	bl	8002454 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372a:	f7fe fe93 	bl	8002454 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e064      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373c:	4b11      	ldr	r3, [pc, #68]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x452>
 8003748:	e05c      	b.n	8003804 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374a:	4b10      	ldr	r3, [pc, #64]	@ (800378c <HAL_RCC_OscConfig+0x4b4>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fe fe80 	bl	8002454 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003758:	f7fe fe7c 	bl	8002454 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e04d      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <HAL_RCC_OscConfig+0x4ac>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x480>
 8003776:	e045      	b.n	8003804 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d107      	bne.n	8003790 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e040      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
 8003784:	40023800 	.word	0x40023800
 8003788:	40007000 	.word	0x40007000
 800378c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003790:	4b1f      	ldr	r3, [pc, #124]	@ (8003810 <HAL_RCC_OscConfig+0x538>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d030      	beq.n	8003800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d129      	bne.n	8003800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d122      	bne.n	8003800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037c0:	4013      	ands	r3, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d119      	bne.n	8003800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d6:	085b      	lsrs	r3, r3, #1
 80037d8:	3b01      	subs	r3, #1
 80037da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d10f      	bne.n	8003800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800

08003814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e07b      	b.n	800391e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	2b00      	cmp	r3, #0
 800382c:	d108      	bne.n	8003840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003836:	d009      	beq.n	800384c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	61da      	str	r2, [r3, #28]
 800383e:	e005      	b.n	800384c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fe fba2 	bl	8001fb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003882:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d0:	ea42 0103 	orr.w	r1, r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	f003 0104 	and.w	r1, r3, #4
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	f003 0210 	and.w	r2, r3, #16
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69da      	ldr	r2, [r3, #28]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800390c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b088      	sub	sp, #32
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	603b      	str	r3, [r7, #0]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003936:	f7fe fd8d 	bl	8002454 <HAL_GetTick>
 800393a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	d001      	beq.n	8003950 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800394c:	2302      	movs	r3, #2
 800394e:	e12a      	b.n	8003ba6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <HAL_SPI_Transmit+0x36>
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e122      	b.n	8003ba6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_SPI_Transmit+0x48>
 800396a:	2302      	movs	r3, #2
 800396c:	e11b      	b.n	8003ba6 <HAL_SPI_Transmit+0x280>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2203      	movs	r2, #3
 800397a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	88fa      	ldrh	r2, [r7, #6]
 800398e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039bc:	d10f      	bne.n	80039de <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e8:	2b40      	cmp	r3, #64	@ 0x40
 80039ea:	d007      	beq.n	80039fc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a04:	d152      	bne.n	8003aac <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_SPI_Transmit+0xee>
 8003a0e:	8b7b      	ldrh	r3, [r7, #26]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d145      	bne.n	8003aa0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	881a      	ldrh	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a24:	1c9a      	adds	r2, r3, #2
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a38:	e032      	b.n	8003aa0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d112      	bne.n	8003a6e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4c:	881a      	ldrh	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a58:	1c9a      	adds	r2, r3, #2
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a6c:	e018      	b.n	8003aa0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a6e:	f7fe fcf1 	bl	8002454 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d803      	bhi.n	8003a86 <HAL_SPI_Transmit+0x160>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d102      	bne.n	8003a8c <HAL_SPI_Transmit+0x166>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d109      	bne.n	8003aa0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e082      	b.n	8003ba6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1c7      	bne.n	8003a3a <HAL_SPI_Transmit+0x114>
 8003aaa:	e053      	b.n	8003b54 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_SPI_Transmit+0x194>
 8003ab4:	8b7b      	ldrh	r3, [r7, #26]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d147      	bne.n	8003b4a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	7812      	ldrb	r2, [r2, #0]
 8003ac6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ae0:	e033      	b.n	8003b4a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d113      	bne.n	8003b18 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	330c      	adds	r3, #12
 8003afa:	7812      	ldrb	r2, [r2, #0]
 8003afc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b16:	e018      	b.n	8003b4a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b18:	f7fe fc9c 	bl	8002454 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d803      	bhi.n	8003b30 <HAL_SPI_Transmit+0x20a>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2e:	d102      	bne.n	8003b36 <HAL_SPI_Transmit+0x210>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d109      	bne.n	8003b4a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e02d      	b.n	8003ba6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1c6      	bne.n	8003ae2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	6839      	ldr	r1, [r7, #0]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fbe7 	bl	800432c <SPI_EndRxTxTransaction>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10a      	bne.n	8003b88 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b088      	sub	sp, #32
 8003bb2:	af02      	add	r7, sp, #8
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	603b      	str	r3, [r7, #0]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d001      	beq.n	8003bce <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e104      	b.n	8003dd8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_SPI_Receive+0x2c>
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e0fc      	b.n	8003dd8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003be6:	d112      	bne.n	8003c0e <HAL_SPI_Receive+0x60>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10e      	bne.n	8003c0e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2204      	movs	r2, #4
 8003bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003bf8:	88fa      	ldrh	r2, [r7, #6]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	68b9      	ldr	r1, [r7, #8]
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f8eb 	bl	8003de0 <HAL_SPI_TransmitReceive>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	e0e4      	b.n	8003dd8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c0e:	f7fe fc21 	bl	8002454 <HAL_GetTick>
 8003c12:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_SPI_Receive+0x74>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e0da      	b.n	8003dd8 <HAL_SPI_Receive+0x22a>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	88fa      	ldrh	r2, [r7, #6]
 8003c42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	88fa      	ldrh	r2, [r7, #6]
 8003c48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c70:	d10f      	bne.n	8003c92 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c9c:	2b40      	cmp	r3, #64	@ 0x40
 8003c9e:	d007      	beq.n	8003cb0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d170      	bne.n	8003d9a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003cb8:	e035      	b.n	8003d26 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d115      	bne.n	8003cf4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f103 020c 	add.w	r2, r3, #12
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd4:	7812      	ldrb	r2, [r2, #0]
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003cf2:	e018      	b.n	8003d26 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cf4:	f7fe fbae 	bl	8002454 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d803      	bhi.n	8003d0c <HAL_SPI_Receive+0x15e>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0a:	d102      	bne.n	8003d12 <HAL_SPI_Receive+0x164>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e058      	b.n	8003dd8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1c4      	bne.n	8003cba <HAL_SPI_Receive+0x10c>
 8003d30:	e038      	b.n	8003da4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d113      	bne.n	8003d68 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4a:	b292      	uxth	r2, r2
 8003d4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d52:	1c9a      	adds	r2, r3, #2
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d66:	e018      	b.n	8003d9a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d68:	f7fe fb74 	bl	8002454 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d803      	bhi.n	8003d80 <HAL_SPI_Receive+0x1d2>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7e:	d102      	bne.n	8003d86 <HAL_SPI_Receive+0x1d8>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e01e      	b.n	8003dd8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1c6      	bne.n	8003d32 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	6839      	ldr	r1, [r7, #0]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fa59 	bl	8004260 <SPI_EndRxTransaction>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
  }
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08a      	sub	sp, #40	@ 0x28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dee:	2301      	movs	r3, #1
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003df2:	f7fe fb2f 	bl	8002454 <HAL_GetTick>
 8003df6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dfe:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003e06:	887b      	ldrh	r3, [r7, #2]
 8003e08:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e0a:	7ffb      	ldrb	r3, [r7, #31]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d00c      	beq.n	8003e2a <HAL_SPI_TransmitReceive+0x4a>
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e16:	d106      	bne.n	8003e26 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d102      	bne.n	8003e26 <HAL_SPI_TransmitReceive+0x46>
 8003e20:	7ffb      	ldrb	r3, [r7, #31]
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d001      	beq.n	8003e2a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
 8003e28:	e17f      	b.n	800412a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_SPI_TransmitReceive+0x5c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_SPI_TransmitReceive+0x5c>
 8003e36:	887b      	ldrh	r3, [r7, #2]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e174      	b.n	800412a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_SPI_TransmitReceive+0x6e>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e16d      	b.n	800412a <HAL_SPI_TransmitReceive+0x34a>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d003      	beq.n	8003e6a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2205      	movs	r2, #5
 8003e66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	887a      	ldrh	r2, [r7, #2]
 8003e7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	887a      	ldrh	r2, [r7, #2]
 8003e80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	887a      	ldrh	r2, [r7, #2]
 8003e8c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	887a      	ldrh	r2, [r7, #2]
 8003e92:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eaa:	2b40      	cmp	r3, #64	@ 0x40
 8003eac:	d007      	beq.n	8003ebe <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ebc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec6:	d17e      	bne.n	8003fc6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_SPI_TransmitReceive+0xf6>
 8003ed0:	8afb      	ldrh	r3, [r7, #22]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d16c      	bne.n	8003fb0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eda:	881a      	ldrh	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee6:	1c9a      	adds	r2, r3, #2
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003efa:	e059      	b.n	8003fb0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d11b      	bne.n	8003f42 <HAL_SPI_TransmitReceive+0x162>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d016      	beq.n	8003f42 <HAL_SPI_TransmitReceive+0x162>
 8003f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d113      	bne.n	8003f42 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	881a      	ldrh	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2a:	1c9a      	adds	r2, r3, #2
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d119      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x1a4>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d014      	beq.n	8003f84 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f64:	b292      	uxth	r2, r2
 8003f66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6c:	1c9a      	adds	r2, r3, #2
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f80:	2301      	movs	r3, #1
 8003f82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f84:	f7fe fa66 	bl	8002454 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d80d      	bhi.n	8003fb0 <HAL_SPI_TransmitReceive+0x1d0>
 8003f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9a:	d009      	beq.n	8003fb0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e0bc      	b.n	800412a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1a0      	bne.n	8003efc <HAL_SPI_TransmitReceive+0x11c>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d19b      	bne.n	8003efc <HAL_SPI_TransmitReceive+0x11c>
 8003fc4:	e082      	b.n	80040cc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <HAL_SPI_TransmitReceive+0x1f4>
 8003fce:	8afb      	ldrh	r3, [r7, #22]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d171      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	7812      	ldrb	r2, [r2, #0]
 8003fe0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ffa:	e05d      	b.n	80040b8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b02      	cmp	r3, #2
 8004008:	d11c      	bne.n	8004044 <HAL_SPI_TransmitReceive+0x264>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d017      	beq.n	8004044 <HAL_SPI_TransmitReceive+0x264>
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	2b01      	cmp	r3, #1
 8004018:	d114      	bne.n	8004044 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	7812      	ldrb	r2, [r2, #0]
 8004026:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b01      	cmp	r3, #1
 8004050:	d119      	bne.n	8004086 <HAL_SPI_TransmitReceive+0x2a6>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d014      	beq.n	8004086 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004082:	2301      	movs	r3, #1
 8004084:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004086:	f7fe f9e5 	bl	8002454 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004092:	429a      	cmp	r2, r3
 8004094:	d803      	bhi.n	800409e <HAL_SPI_TransmitReceive+0x2be>
 8004096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d102      	bne.n	80040a4 <HAL_SPI_TransmitReceive+0x2c4>
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d109      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e038      	b.n	800412a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d19c      	bne.n	8003ffc <HAL_SPI_TransmitReceive+0x21c>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d197      	bne.n	8003ffc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040cc:	6a3a      	ldr	r2, [r7, #32]
 80040ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f92b 	bl	800432c <SPI_EndRxTxTransaction>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e01d      	b.n	800412a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004128:	2300      	movs	r3, #0
  }
}
 800412a:	4618      	mov	r0, r3
 800412c:	3728      	adds	r7, #40	@ 0x28
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004140:	b2db      	uxtb	r3, r3
}
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
	...

08004150 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	4613      	mov	r3, r2
 800415e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004160:	f7fe f978 	bl	8002454 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	4413      	add	r3, r2
 800416e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004170:	f7fe f970 	bl	8002454 <HAL_GetTick>
 8004174:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004176:	4b39      	ldr	r3, [pc, #228]	@ (800425c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	015b      	lsls	r3, r3, #5
 800417c:	0d1b      	lsrs	r3, r3, #20
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	fb02 f303 	mul.w	r3, r2, r3
 8004184:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004186:	e055      	b.n	8004234 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418e:	d051      	beq.n	8004234 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004190:	f7fe f960 	bl	8002454 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	429a      	cmp	r2, r3
 800419e:	d902      	bls.n	80041a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d13d      	bne.n	8004222 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80041b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041be:	d111      	bne.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041c8:	d004      	beq.n	80041d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041d2:	d107      	bne.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ec:	d10f      	bne.n	800420e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800420c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e018      	b.n	8004254 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d102      	bne.n	800422e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	61fb      	str	r3, [r7, #28]
 800422c:	e002      	b.n	8004234 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	3b01      	subs	r3, #1
 8004232:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4013      	ands	r3, r2
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	429a      	cmp	r2, r3
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	429a      	cmp	r2, r3
 8004250:	d19a      	bne.n	8004188 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000000 	.word	0x20000000

08004260 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004274:	d111      	bne.n	800429a <SPI_EndRxTransaction+0x3a>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800427e:	d004      	beq.n	800428a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004288:	d107      	bne.n	800429a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004298:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042a2:	d12a      	bne.n	80042fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ac:	d012      	beq.n	80042d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2200      	movs	r2, #0
 80042b6:	2180      	movs	r1, #128	@ 0x80
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f7ff ff49 	bl	8004150 <SPI_WaitFlagStateUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d02d      	beq.n	8004320 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c8:	f043 0220 	orr.w	r2, r3, #32
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e026      	b.n	8004322 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2200      	movs	r2, #0
 80042dc:	2101      	movs	r1, #1
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f7ff ff36 	bl	8004150 <SPI_WaitFlagStateUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01a      	beq.n	8004320 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ee:	f043 0220 	orr.w	r2, r3, #32
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e013      	b.n	8004322 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2200      	movs	r2, #0
 8004302:	2101      	movs	r1, #1
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f7ff ff23 	bl	8004150 <SPI_WaitFlagStateUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e000      	b.n	8004322 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2201      	movs	r2, #1
 8004340:	2102      	movs	r1, #2
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f7ff ff04 	bl	8004150 <SPI_WaitFlagStateUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004352:	f043 0220 	orr.w	r2, r3, #32
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e032      	b.n	80043c4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800435e:	4b1b      	ldr	r3, [pc, #108]	@ (80043cc <SPI_EndRxTxTransaction+0xa0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1b      	ldr	r2, [pc, #108]	@ (80043d0 <SPI_EndRxTxTransaction+0xa4>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	0d5b      	lsrs	r3, r3, #21
 800436a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800436e:	fb02 f303 	mul.w	r3, r2, r3
 8004372:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800437c:	d112      	bne.n	80043a4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2200      	movs	r2, #0
 8004386:	2180      	movs	r1, #128	@ 0x80
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f7ff fee1 	bl	8004150 <SPI_WaitFlagStateUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d016      	beq.n	80043c2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004398:	f043 0220 	orr.w	r2, r3, #32
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e00f      	b.n	80043c4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ba:	2b80      	cmp	r3, #128	@ 0x80
 80043bc:	d0f2      	beq.n	80043a4 <SPI_EndRxTxTransaction+0x78>
 80043be:	e000      	b.n	80043c2 <SPI_EndRxTxTransaction+0x96>
        break;
 80043c0:	bf00      	nop
  }

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20000000 	.word	0x20000000
 80043d0:	165e9f81 	.word	0x165e9f81

080043d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e042      	b.n	800446c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fd fe20 	bl	8002040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2224      	movs	r2, #36	@ 0x24
 8004404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fd7f 	bl	8004f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800442c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695a      	ldr	r2, [r3, #20]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800443c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800444c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	@ 0x28
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	4613      	mov	r3, r2
 8004482:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b20      	cmp	r3, #32
 8004492:	d175      	bne.n	8004580 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_UART_Transmit+0x2c>
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e06e      	b.n	8004582 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2221      	movs	r2, #33	@ 0x21
 80044ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044b2:	f7fd ffcf 	bl	8002454 <HAL_GetTick>
 80044b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	88fa      	ldrh	r2, [r7, #6]
 80044bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	88fa      	ldrh	r2, [r7, #6]
 80044c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044cc:	d108      	bne.n	80044e0 <HAL_UART_Transmit+0x6c>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d104      	bne.n	80044e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	e003      	b.n	80044e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044e8:	e02e      	b.n	8004548 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2200      	movs	r2, #0
 80044f2:	2180      	movs	r1, #128	@ 0x80
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fb1d 	bl	8004b34 <UART_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e03a      	b.n	8004582 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10b      	bne.n	800452a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004520:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	3302      	adds	r3, #2
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	e007      	b.n	800453a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	781a      	ldrb	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	3301      	adds	r3, #1
 8004538:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1cb      	bne.n	80044ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2200      	movs	r2, #0
 800455a:	2140      	movs	r1, #64	@ 0x40
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 fae9 	bl	8004b34 <UART_WaitOnFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e006      	b.n	8004582 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	e000      	b.n	8004582 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004580:	2302      	movs	r3, #2
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3720      	adds	r7, #32
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b0ba      	sub	sp, #232	@ 0xe8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80045ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10f      	bne.n	80045f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <HAL_UART_IRQHandler+0x66>
 80045de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fbd7 	bl	8004d9e <UART_Receive_IT>
      return;
 80045f0:	e273      	b.n	8004ada <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 80de 	beq.w	80047b8 <HAL_UART_IRQHandler+0x22c>
 80045fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d106      	bne.n	8004616 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800460c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80d1 	beq.w	80047b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00b      	beq.n	800463a <HAL_UART_IRQHandler+0xae>
 8004622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004632:	f043 0201 	orr.w	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800463a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_UART_IRQHandler+0xd2>
 8004646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004656:	f043 0202 	orr.w	r2, r3, #2
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <HAL_UART_IRQHandler+0xf6>
 800466a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467a:	f043 0204 	orr.w	r2, r3, #4
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d011      	beq.n	80046b2 <HAL_UART_IRQHandler+0x126>
 800468e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b00      	cmp	r3, #0
 8004698:	d105      	bne.n	80046a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800469a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046aa:	f043 0208 	orr.w	r2, r3, #8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 820a 	beq.w	8004ad0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_UART_IRQHandler+0x14e>
 80046c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fb62 	bl	8004d9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e4:	2b40      	cmp	r3, #64	@ 0x40
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d103      	bne.n	8004706 <HAL_UART_IRQHandler+0x17a>
 80046fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d04f      	beq.n	80047a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fa6d 	bl	8004be6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004716:	2b40      	cmp	r3, #64	@ 0x40
 8004718:	d141      	bne.n	800479e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3314      	adds	r3, #20
 8004720:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004730:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3314      	adds	r3, #20
 8004742:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004746:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800474a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004752:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800475e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1d9      	bne.n	800471a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d013      	beq.n	8004796 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004772:	4a8a      	ldr	r2, [pc, #552]	@ (800499c <HAL_UART_IRQHandler+0x410>)
 8004774:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe f917 	bl	80029ae <HAL_DMA_Abort_IT>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d016      	beq.n	80047b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004790:	4610      	mov	r0, r2
 8004792:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004794:	e00e      	b.n	80047b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f9b6 	bl	8004b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800479c:	e00a      	b.n	80047b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f9b2 	bl	8004b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a4:	e006      	b.n	80047b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f9ae 	bl	8004b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80047b2:	e18d      	b.n	8004ad0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	bf00      	nop
    return;
 80047b6:	e18b      	b.n	8004ad0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047bc:	2b01      	cmp	r3, #1
 80047be:	f040 8167 	bne.w	8004a90 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8160 	beq.w	8004a90 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80047d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8159 	beq.w	8004a90 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047de:	2300      	movs	r3, #0
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fe:	2b40      	cmp	r3, #64	@ 0x40
 8004800:	f040 80ce 	bne.w	80049a0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004810:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80a9 	beq.w	800496c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800481e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004822:	429a      	cmp	r2, r3
 8004824:	f080 80a2 	bcs.w	800496c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800482e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800483a:	f000 8088 	beq.w	800494e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	330c      	adds	r3, #12
 8004844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004854:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800485c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800486a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800486e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004876:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800487a:	e841 2300 	strex	r3, r2, [r1]
 800487e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004882:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1d9      	bne.n	800483e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3314      	adds	r3, #20
 8004890:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800489a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800489c:	f023 0301 	bic.w	r3, r3, #1
 80048a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3314      	adds	r3, #20
 80048aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80048b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80048b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80048c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e1      	bne.n	800488a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3314      	adds	r3, #20
 80048cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80048d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3314      	adds	r3, #20
 80048e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80048f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80048f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e3      	bne.n	80048c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800491c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800491e:	f023 0310 	bic.w	r3, r3, #16
 8004922:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004930:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004932:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004936:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800493e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e3      	bne.n	800490c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004948:	4618      	mov	r0, r3
 800494a:	f7fd ffc0 	bl	80028ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800495c:	b29b      	uxth	r3, r3
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	b29b      	uxth	r3, r3
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f8d9 	bl	8004b1c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800496a:	e0b3      	b.n	8004ad4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004970:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004974:	429a      	cmp	r2, r3
 8004976:	f040 80ad 	bne.w	8004ad4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004984:	f040 80a6 	bne.w	8004ad4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004992:	4619      	mov	r1, r3
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f8c1 	bl	8004b1c <HAL_UARTEx_RxEventCallback>
      return;
 800499a:	e09b      	b.n	8004ad4 <HAL_UART_IRQHandler+0x548>
 800499c:	08004cad 	.word	0x08004cad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 808e 	beq.w	8004ad8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80049bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8089 	beq.w	8004ad8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	330c      	adds	r3, #12
 80049cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	330c      	adds	r3, #12
 80049e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80049ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80049ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049f2:	e841 2300 	strex	r3, r2, [r1]
 80049f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1e3      	bne.n	80049c6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3314      	adds	r3, #20
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	e853 3f00 	ldrex	r3, [r3]
 8004a0c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	f023 0301 	bic.w	r3, r3, #1
 8004a14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3314      	adds	r3, #20
 8004a1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a22:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e3      	bne.n	80049fe <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0310 	bic.w	r3, r3, #16
 8004a5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	330c      	adds	r3, #12
 8004a64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a68:	61fa      	str	r2, [r7, #28]
 8004a6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	69b9      	ldr	r1, [r7, #24]
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	617b      	str	r3, [r7, #20]
   return(result);
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e3      	bne.n	8004a44 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a86:	4619      	mov	r1, r3
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f847 	bl	8004b1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a8e:	e023      	b.n	8004ad8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d009      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x524>
 8004a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f910 	bl	8004cce <UART_Transmit_IT>
    return;
 8004aae:	e014      	b.n	8004ada <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00e      	beq.n	8004ada <HAL_UART_IRQHandler+0x54e>
 8004abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f950 	bl	8004d6e <UART_EndTransmit_IT>
    return;
 8004ace:	e004      	b.n	8004ada <HAL_UART_IRQHandler+0x54e>
    return;
 8004ad0:	bf00      	nop
 8004ad2:	e002      	b.n	8004ada <HAL_UART_IRQHandler+0x54e>
      return;
 8004ad4:	bf00      	nop
 8004ad6:	e000      	b.n	8004ada <HAL_UART_IRQHandler+0x54e>
      return;
 8004ad8:	bf00      	nop
  }
}
 8004ada:	37e8      	adds	r7, #232	@ 0xe8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	4613      	mov	r3, r2
 8004b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b44:	e03b      	b.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d037      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4e:	f7fd fc81 	bl	8002454 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	6a3a      	ldr	r2, [r7, #32]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d302      	bcc.n	8004b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e03a      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d023      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b80      	cmp	r3, #128	@ 0x80
 8004b7a:	d020      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b40      	cmp	r3, #64	@ 0x40
 8004b80:	d01d      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d116      	bne.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f81d 	bl	8004be6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2208      	movs	r2, #8
 8004bb0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e00f      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	bf0c      	ite	eq
 8004bce:	2301      	moveq	r3, #1
 8004bd0:	2300      	movne	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d0b4      	beq.n	8004b46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b095      	sub	sp, #84	@ 0x54
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1e5      	bne.n	8004bee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3314      	adds	r3, #20
 8004c28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3314      	adds	r3, #20
 8004c40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c4a:	e841 2300 	strex	r3, r2, [r1]
 8004c4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1e5      	bne.n	8004c22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d119      	bne.n	8004c92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f023 0310 	bic.w	r3, r3, #16
 8004c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	330c      	adds	r3, #12
 8004c7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c7e:	61ba      	str	r2, [r7, #24]
 8004c80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6979      	ldr	r1, [r7, #20]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e5      	bne.n	8004c5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ca0:	bf00      	nop
 8004ca2:	3754      	adds	r7, #84	@ 0x54
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff ff21 	bl	8004b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b21      	cmp	r3, #33	@ 0x21
 8004ce0:	d13e      	bne.n	8004d60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cea:	d114      	bne.n	8004d16 <UART_Transmit_IT+0x48>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d110      	bne.n	8004d16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	1c9a      	adds	r2, r3, #2
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	621a      	str	r2, [r3, #32]
 8004d14:	e008      	b.n	8004d28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	1c59      	adds	r1, r3, #1
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6211      	str	r1, [r2, #32]
 8004d20:	781a      	ldrb	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	4619      	mov	r1, r3
 8004d36:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10f      	bne.n	8004d5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e000      	b.n	8004d62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
  }
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff fea6 	bl	8004ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b08c      	sub	sp, #48	@ 0x30
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b22      	cmp	r3, #34	@ 0x22
 8004db8:	f040 80aa 	bne.w	8004f10 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc4:	d115      	bne.n	8004df2 <UART_Receive_IT+0x54>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d111      	bne.n	8004df2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dea:	1c9a      	adds	r2, r3, #2
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	629a      	str	r2, [r3, #40]	@ 0x28
 8004df0:	e024      	b.n	8004e3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e00:	d007      	beq.n	8004e12 <UART_Receive_IT+0x74>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10a      	bne.n	8004e20 <UART_Receive_IT+0x82>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	e008      	b.n	8004e32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d15d      	bne.n	8004f0c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0220 	bic.w	r2, r2, #32
 8004e5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695a      	ldr	r2, [r3, #20]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0201 	bic.w	r2, r2, #1
 8004e7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d135      	bne.n	8004f02 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	330c      	adds	r3, #12
 8004ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	e853 3f00 	ldrex	r3, [r3]
 8004eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f023 0310 	bic.w	r3, r3, #16
 8004eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	330c      	adds	r3, #12
 8004eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ebc:	623a      	str	r2, [r7, #32]
 8004ebe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec0:	69f9      	ldr	r1, [r7, #28]
 8004ec2:	6a3a      	ldr	r2, [r7, #32]
 8004ec4:	e841 2300 	strex	r3, r2, [r1]
 8004ec8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e5      	bne.n	8004e9c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d10a      	bne.n	8004ef4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ef8:	4619      	mov	r1, r3
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff fe0e 	bl	8004b1c <HAL_UARTEx_RxEventCallback>
 8004f00:	e002      	b.n	8004f08 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff fdf6 	bl	8004af4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	e002      	b.n	8004f12 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e000      	b.n	8004f12 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f10:	2302      	movs	r3, #2
  }
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3730      	adds	r7, #48	@ 0x30
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f20:	b0c0      	sub	sp, #256	@ 0x100
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f38:	68d9      	ldr	r1, [r3, #12]
 8004f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	ea40 0301 	orr.w	r3, r0, r1
 8004f44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f74:	f021 010c 	bic.w	r1, r1, #12
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f82:	430b      	orrs	r3, r1
 8004f84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f96:	6999      	ldr	r1, [r3, #24]
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	ea40 0301 	orr.w	r3, r0, r1
 8004fa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4b8f      	ldr	r3, [pc, #572]	@ (80051e8 <UART_SetConfig+0x2cc>)
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d005      	beq.n	8004fbc <UART_SetConfig+0xa0>
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b8d      	ldr	r3, [pc, #564]	@ (80051ec <UART_SetConfig+0x2d0>)
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d104      	bne.n	8004fc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fbc:	f7fd ffce 	bl	8002f5c <HAL_RCC_GetPCLK2Freq>
 8004fc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004fc4:	e003      	b.n	8004fce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fc6:	f7fd ffb5 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 8004fca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fd8:	f040 810c 	bne.w	80051f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004fe6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004fea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004fee:	4622      	mov	r2, r4
 8004ff0:	462b      	mov	r3, r5
 8004ff2:	1891      	adds	r1, r2, r2
 8004ff4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ff6:	415b      	adcs	r3, r3
 8004ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ffa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ffe:	4621      	mov	r1, r4
 8005000:	eb12 0801 	adds.w	r8, r2, r1
 8005004:	4629      	mov	r1, r5
 8005006:	eb43 0901 	adc.w	r9, r3, r1
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800501a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800501e:	4690      	mov	r8, r2
 8005020:	4699      	mov	r9, r3
 8005022:	4623      	mov	r3, r4
 8005024:	eb18 0303 	adds.w	r3, r8, r3
 8005028:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800502c:	462b      	mov	r3, r5
 800502e:	eb49 0303 	adc.w	r3, r9, r3
 8005032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005042:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005046:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800504a:	460b      	mov	r3, r1
 800504c:	18db      	adds	r3, r3, r3
 800504e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005050:	4613      	mov	r3, r2
 8005052:	eb42 0303 	adc.w	r3, r2, r3
 8005056:	657b      	str	r3, [r7, #84]	@ 0x54
 8005058:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800505c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005060:	f7fb fe32 	bl	8000cc8 <__aeabi_uldivmod>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4b61      	ldr	r3, [pc, #388]	@ (80051f0 <UART_SetConfig+0x2d4>)
 800506a:	fba3 2302 	umull	r2, r3, r3, r2
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	011c      	lsls	r4, r3, #4
 8005072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005076:	2200      	movs	r2, #0
 8005078:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800507c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005080:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005084:	4642      	mov	r2, r8
 8005086:	464b      	mov	r3, r9
 8005088:	1891      	adds	r1, r2, r2
 800508a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800508c:	415b      	adcs	r3, r3
 800508e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005090:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005094:	4641      	mov	r1, r8
 8005096:	eb12 0a01 	adds.w	sl, r2, r1
 800509a:	4649      	mov	r1, r9
 800509c:	eb43 0b01 	adc.w	fp, r3, r1
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050b4:	4692      	mov	sl, r2
 80050b6:	469b      	mov	fp, r3
 80050b8:	4643      	mov	r3, r8
 80050ba:	eb1a 0303 	adds.w	r3, sl, r3
 80050be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050c2:	464b      	mov	r3, r9
 80050c4:	eb4b 0303 	adc.w	r3, fp, r3
 80050c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80050cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80050dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050e0:	460b      	mov	r3, r1
 80050e2:	18db      	adds	r3, r3, r3
 80050e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80050e6:	4613      	mov	r3, r2
 80050e8:	eb42 0303 	adc.w	r3, r2, r3
 80050ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80050ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80050f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80050f6:	f7fb fde7 	bl	8000cc8 <__aeabi_uldivmod>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4611      	mov	r1, r2
 8005100:	4b3b      	ldr	r3, [pc, #236]	@ (80051f0 <UART_SetConfig+0x2d4>)
 8005102:	fba3 2301 	umull	r2, r3, r3, r1
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	2264      	movs	r2, #100	@ 0x64
 800510a:	fb02 f303 	mul.w	r3, r2, r3
 800510e:	1acb      	subs	r3, r1, r3
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005116:	4b36      	ldr	r3, [pc, #216]	@ (80051f0 <UART_SetConfig+0x2d4>)
 8005118:	fba3 2302 	umull	r2, r3, r3, r2
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005124:	441c      	add	r4, r3
 8005126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800512a:	2200      	movs	r2, #0
 800512c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005130:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005134:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005138:	4642      	mov	r2, r8
 800513a:	464b      	mov	r3, r9
 800513c:	1891      	adds	r1, r2, r2
 800513e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005140:	415b      	adcs	r3, r3
 8005142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005144:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005148:	4641      	mov	r1, r8
 800514a:	1851      	adds	r1, r2, r1
 800514c:	6339      	str	r1, [r7, #48]	@ 0x30
 800514e:	4649      	mov	r1, r9
 8005150:	414b      	adcs	r3, r1
 8005152:	637b      	str	r3, [r7, #52]	@ 0x34
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005160:	4659      	mov	r1, fp
 8005162:	00cb      	lsls	r3, r1, #3
 8005164:	4651      	mov	r1, sl
 8005166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800516a:	4651      	mov	r1, sl
 800516c:	00ca      	lsls	r2, r1, #3
 800516e:	4610      	mov	r0, r2
 8005170:	4619      	mov	r1, r3
 8005172:	4603      	mov	r3, r0
 8005174:	4642      	mov	r2, r8
 8005176:	189b      	adds	r3, r3, r2
 8005178:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800517c:	464b      	mov	r3, r9
 800517e:	460a      	mov	r2, r1
 8005180:	eb42 0303 	adc.w	r3, r2, r3
 8005184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005194:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005198:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800519c:	460b      	mov	r3, r1
 800519e:	18db      	adds	r3, r3, r3
 80051a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051a2:	4613      	mov	r3, r2
 80051a4:	eb42 0303 	adc.w	r3, r2, r3
 80051a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80051b2:	f7fb fd89 	bl	8000cc8 <__aeabi_uldivmod>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4b0d      	ldr	r3, [pc, #52]	@ (80051f0 <UART_SetConfig+0x2d4>)
 80051bc:	fba3 1302 	umull	r1, r3, r3, r2
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	2164      	movs	r1, #100	@ 0x64
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	3332      	adds	r3, #50	@ 0x32
 80051ce:	4a08      	ldr	r2, [pc, #32]	@ (80051f0 <UART_SetConfig+0x2d4>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	f003 0207 	and.w	r2, r3, #7
 80051da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4422      	add	r2, r4
 80051e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051e4:	e106      	b.n	80053f4 <UART_SetConfig+0x4d8>
 80051e6:	bf00      	nop
 80051e8:	40011000 	.word	0x40011000
 80051ec:	40011400 	.word	0x40011400
 80051f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80051fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005202:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005206:	4642      	mov	r2, r8
 8005208:	464b      	mov	r3, r9
 800520a:	1891      	adds	r1, r2, r2
 800520c:	6239      	str	r1, [r7, #32]
 800520e:	415b      	adcs	r3, r3
 8005210:	627b      	str	r3, [r7, #36]	@ 0x24
 8005212:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005216:	4641      	mov	r1, r8
 8005218:	1854      	adds	r4, r2, r1
 800521a:	4649      	mov	r1, r9
 800521c:	eb43 0501 	adc.w	r5, r3, r1
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	00eb      	lsls	r3, r5, #3
 800522a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800522e:	00e2      	lsls	r2, r4, #3
 8005230:	4614      	mov	r4, r2
 8005232:	461d      	mov	r5, r3
 8005234:	4643      	mov	r3, r8
 8005236:	18e3      	adds	r3, r4, r3
 8005238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800523c:	464b      	mov	r3, r9
 800523e:	eb45 0303 	adc.w	r3, r5, r3
 8005242:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005252:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005262:	4629      	mov	r1, r5
 8005264:	008b      	lsls	r3, r1, #2
 8005266:	4621      	mov	r1, r4
 8005268:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800526c:	4621      	mov	r1, r4
 800526e:	008a      	lsls	r2, r1, #2
 8005270:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005274:	f7fb fd28 	bl	8000cc8 <__aeabi_uldivmod>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4b60      	ldr	r3, [pc, #384]	@ (8005400 <UART_SetConfig+0x4e4>)
 800527e:	fba3 2302 	umull	r2, r3, r3, r2
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	011c      	lsls	r4, r3, #4
 8005286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800528a:	2200      	movs	r2, #0
 800528c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005290:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005294:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005298:	4642      	mov	r2, r8
 800529a:	464b      	mov	r3, r9
 800529c:	1891      	adds	r1, r2, r2
 800529e:	61b9      	str	r1, [r7, #24]
 80052a0:	415b      	adcs	r3, r3
 80052a2:	61fb      	str	r3, [r7, #28]
 80052a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052a8:	4641      	mov	r1, r8
 80052aa:	1851      	adds	r1, r2, r1
 80052ac:	6139      	str	r1, [r7, #16]
 80052ae:	4649      	mov	r1, r9
 80052b0:	414b      	adcs	r3, r1
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052c0:	4659      	mov	r1, fp
 80052c2:	00cb      	lsls	r3, r1, #3
 80052c4:	4651      	mov	r1, sl
 80052c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ca:	4651      	mov	r1, sl
 80052cc:	00ca      	lsls	r2, r1, #3
 80052ce:	4610      	mov	r0, r2
 80052d0:	4619      	mov	r1, r3
 80052d2:	4603      	mov	r3, r0
 80052d4:	4642      	mov	r2, r8
 80052d6:	189b      	adds	r3, r3, r2
 80052d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052dc:	464b      	mov	r3, r9
 80052de:	460a      	mov	r2, r1
 80052e0:	eb42 0303 	adc.w	r3, r2, r3
 80052e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005300:	4649      	mov	r1, r9
 8005302:	008b      	lsls	r3, r1, #2
 8005304:	4641      	mov	r1, r8
 8005306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800530a:	4641      	mov	r1, r8
 800530c:	008a      	lsls	r2, r1, #2
 800530e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005312:	f7fb fcd9 	bl	8000cc8 <__aeabi_uldivmod>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4611      	mov	r1, r2
 800531c:	4b38      	ldr	r3, [pc, #224]	@ (8005400 <UART_SetConfig+0x4e4>)
 800531e:	fba3 2301 	umull	r2, r3, r3, r1
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	2264      	movs	r2, #100	@ 0x64
 8005326:	fb02 f303 	mul.w	r3, r2, r3
 800532a:	1acb      	subs	r3, r1, r3
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	3332      	adds	r3, #50	@ 0x32
 8005330:	4a33      	ldr	r2, [pc, #204]	@ (8005400 <UART_SetConfig+0x4e4>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800533c:	441c      	add	r4, r3
 800533e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005342:	2200      	movs	r2, #0
 8005344:	673b      	str	r3, [r7, #112]	@ 0x70
 8005346:	677a      	str	r2, [r7, #116]	@ 0x74
 8005348:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800534c:	4642      	mov	r2, r8
 800534e:	464b      	mov	r3, r9
 8005350:	1891      	adds	r1, r2, r2
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	415b      	adcs	r3, r3
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800535c:	4641      	mov	r1, r8
 800535e:	1851      	adds	r1, r2, r1
 8005360:	6039      	str	r1, [r7, #0]
 8005362:	4649      	mov	r1, r9
 8005364:	414b      	adcs	r3, r1
 8005366:	607b      	str	r3, [r7, #4]
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005374:	4659      	mov	r1, fp
 8005376:	00cb      	lsls	r3, r1, #3
 8005378:	4651      	mov	r1, sl
 800537a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800537e:	4651      	mov	r1, sl
 8005380:	00ca      	lsls	r2, r1, #3
 8005382:	4610      	mov	r0, r2
 8005384:	4619      	mov	r1, r3
 8005386:	4603      	mov	r3, r0
 8005388:	4642      	mov	r2, r8
 800538a:	189b      	adds	r3, r3, r2
 800538c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800538e:	464b      	mov	r3, r9
 8005390:	460a      	mov	r2, r1
 8005392:	eb42 0303 	adc.w	r3, r2, r3
 8005396:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80053a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80053b0:	4649      	mov	r1, r9
 80053b2:	008b      	lsls	r3, r1, #2
 80053b4:	4641      	mov	r1, r8
 80053b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053ba:	4641      	mov	r1, r8
 80053bc:	008a      	lsls	r2, r1, #2
 80053be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80053c2:	f7fb fc81 	bl	8000cc8 <__aeabi_uldivmod>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005400 <UART_SetConfig+0x4e4>)
 80053cc:	fba3 1302 	umull	r1, r3, r3, r2
 80053d0:	095b      	lsrs	r3, r3, #5
 80053d2:	2164      	movs	r1, #100	@ 0x64
 80053d4:	fb01 f303 	mul.w	r3, r1, r3
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	3332      	adds	r3, #50	@ 0x32
 80053de:	4a08      	ldr	r2, [pc, #32]	@ (8005400 <UART_SetConfig+0x4e4>)
 80053e0:	fba2 2303 	umull	r2, r3, r2, r3
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	f003 020f 	and.w	r2, r3, #15
 80053ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4422      	add	r2, r4
 80053f2:	609a      	str	r2, [r3, #8]
}
 80053f4:	bf00      	nop
 80053f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80053fa:	46bd      	mov	sp, r7
 80053fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005400:	51eb851f 	.word	0x51eb851f

08005404 <__cvt>:
 8005404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005408:	b088      	sub	sp, #32
 800540a:	2b00      	cmp	r3, #0
 800540c:	461d      	mov	r5, r3
 800540e:	4614      	mov	r4, r2
 8005410:	bfbc      	itt	lt
 8005412:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005416:	4614      	movlt	r4, r2
 8005418:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800541a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800541c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005420:	bfb6      	itet	lt
 8005422:	461d      	movlt	r5, r3
 8005424:	2300      	movge	r3, #0
 8005426:	232d      	movlt	r3, #45	@ 0x2d
 8005428:	7013      	strb	r3, [r2, #0]
 800542a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800542c:	f023 0820 	bic.w	r8, r3, #32
 8005430:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005434:	d005      	beq.n	8005442 <__cvt+0x3e>
 8005436:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800543a:	d100      	bne.n	800543e <__cvt+0x3a>
 800543c:	3601      	adds	r6, #1
 800543e:	2302      	movs	r3, #2
 8005440:	e000      	b.n	8005444 <__cvt+0x40>
 8005442:	2303      	movs	r3, #3
 8005444:	aa07      	add	r2, sp, #28
 8005446:	9204      	str	r2, [sp, #16]
 8005448:	aa06      	add	r2, sp, #24
 800544a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800544e:	e9cd 3600 	strd	r3, r6, [sp]
 8005452:	4622      	mov	r2, r4
 8005454:	462b      	mov	r3, r5
 8005456:	f001 f89f 	bl	8006598 <_dtoa_r>
 800545a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800545e:	4607      	mov	r7, r0
 8005460:	d119      	bne.n	8005496 <__cvt+0x92>
 8005462:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005464:	07db      	lsls	r3, r3, #31
 8005466:	d50e      	bpl.n	8005486 <__cvt+0x82>
 8005468:	eb00 0906 	add.w	r9, r0, r6
 800546c:	2200      	movs	r2, #0
 800546e:	2300      	movs	r3, #0
 8005470:	4620      	mov	r0, r4
 8005472:	4629      	mov	r1, r5
 8005474:	f7fb fb48 	bl	8000b08 <__aeabi_dcmpeq>
 8005478:	b108      	cbz	r0, 800547e <__cvt+0x7a>
 800547a:	f8cd 901c 	str.w	r9, [sp, #28]
 800547e:	2230      	movs	r2, #48	@ 0x30
 8005480:	9b07      	ldr	r3, [sp, #28]
 8005482:	454b      	cmp	r3, r9
 8005484:	d31e      	bcc.n	80054c4 <__cvt+0xc0>
 8005486:	9b07      	ldr	r3, [sp, #28]
 8005488:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800548a:	1bdb      	subs	r3, r3, r7
 800548c:	4638      	mov	r0, r7
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	b008      	add	sp, #32
 8005492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005496:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800549a:	eb00 0906 	add.w	r9, r0, r6
 800549e:	d1e5      	bne.n	800546c <__cvt+0x68>
 80054a0:	7803      	ldrb	r3, [r0, #0]
 80054a2:	2b30      	cmp	r3, #48	@ 0x30
 80054a4:	d10a      	bne.n	80054bc <__cvt+0xb8>
 80054a6:	2200      	movs	r2, #0
 80054a8:	2300      	movs	r3, #0
 80054aa:	4620      	mov	r0, r4
 80054ac:	4629      	mov	r1, r5
 80054ae:	f7fb fb2b 	bl	8000b08 <__aeabi_dcmpeq>
 80054b2:	b918      	cbnz	r0, 80054bc <__cvt+0xb8>
 80054b4:	f1c6 0601 	rsb	r6, r6, #1
 80054b8:	f8ca 6000 	str.w	r6, [sl]
 80054bc:	f8da 3000 	ldr.w	r3, [sl]
 80054c0:	4499      	add	r9, r3
 80054c2:	e7d3      	b.n	800546c <__cvt+0x68>
 80054c4:	1c59      	adds	r1, r3, #1
 80054c6:	9107      	str	r1, [sp, #28]
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	e7d9      	b.n	8005480 <__cvt+0x7c>

080054cc <__exponent>:
 80054cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ce:	2900      	cmp	r1, #0
 80054d0:	bfba      	itte	lt
 80054d2:	4249      	neglt	r1, r1
 80054d4:	232d      	movlt	r3, #45	@ 0x2d
 80054d6:	232b      	movge	r3, #43	@ 0x2b
 80054d8:	2909      	cmp	r1, #9
 80054da:	7002      	strb	r2, [r0, #0]
 80054dc:	7043      	strb	r3, [r0, #1]
 80054de:	dd29      	ble.n	8005534 <__exponent+0x68>
 80054e0:	f10d 0307 	add.w	r3, sp, #7
 80054e4:	461d      	mov	r5, r3
 80054e6:	270a      	movs	r7, #10
 80054e8:	461a      	mov	r2, r3
 80054ea:	fbb1 f6f7 	udiv	r6, r1, r7
 80054ee:	fb07 1416 	mls	r4, r7, r6, r1
 80054f2:	3430      	adds	r4, #48	@ 0x30
 80054f4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80054f8:	460c      	mov	r4, r1
 80054fa:	2c63      	cmp	r4, #99	@ 0x63
 80054fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8005500:	4631      	mov	r1, r6
 8005502:	dcf1      	bgt.n	80054e8 <__exponent+0x1c>
 8005504:	3130      	adds	r1, #48	@ 0x30
 8005506:	1e94      	subs	r4, r2, #2
 8005508:	f803 1c01 	strb.w	r1, [r3, #-1]
 800550c:	1c41      	adds	r1, r0, #1
 800550e:	4623      	mov	r3, r4
 8005510:	42ab      	cmp	r3, r5
 8005512:	d30a      	bcc.n	800552a <__exponent+0x5e>
 8005514:	f10d 0309 	add.w	r3, sp, #9
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	42ac      	cmp	r4, r5
 800551c:	bf88      	it	hi
 800551e:	2300      	movhi	r3, #0
 8005520:	3302      	adds	r3, #2
 8005522:	4403      	add	r3, r0
 8005524:	1a18      	subs	r0, r3, r0
 8005526:	b003      	add	sp, #12
 8005528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800552a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800552e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005532:	e7ed      	b.n	8005510 <__exponent+0x44>
 8005534:	2330      	movs	r3, #48	@ 0x30
 8005536:	3130      	adds	r1, #48	@ 0x30
 8005538:	7083      	strb	r3, [r0, #2]
 800553a:	70c1      	strb	r1, [r0, #3]
 800553c:	1d03      	adds	r3, r0, #4
 800553e:	e7f1      	b.n	8005524 <__exponent+0x58>

08005540 <_printf_float>:
 8005540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005544:	b091      	sub	sp, #68	@ 0x44
 8005546:	460c      	mov	r4, r1
 8005548:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800554c:	4616      	mov	r6, r2
 800554e:	461f      	mov	r7, r3
 8005550:	4605      	mov	r5, r0
 8005552:	f000 ff1b 	bl	800638c <_localeconv_r>
 8005556:	6803      	ldr	r3, [r0, #0]
 8005558:	9308      	str	r3, [sp, #32]
 800555a:	4618      	mov	r0, r3
 800555c:	f7fa fea8 	bl	80002b0 <strlen>
 8005560:	2300      	movs	r3, #0
 8005562:	930e      	str	r3, [sp, #56]	@ 0x38
 8005564:	f8d8 3000 	ldr.w	r3, [r8]
 8005568:	9009      	str	r0, [sp, #36]	@ 0x24
 800556a:	3307      	adds	r3, #7
 800556c:	f023 0307 	bic.w	r3, r3, #7
 8005570:	f103 0208 	add.w	r2, r3, #8
 8005574:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005578:	f8d4 b000 	ldr.w	fp, [r4]
 800557c:	f8c8 2000 	str.w	r2, [r8]
 8005580:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005584:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005588:	930b      	str	r3, [sp, #44]	@ 0x2c
 800558a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800558e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005592:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005596:	4b9d      	ldr	r3, [pc, #628]	@ (800580c <_printf_float+0x2cc>)
 8005598:	f04f 32ff 	mov.w	r2, #4294967295
 800559c:	f7fb fae6 	bl	8000b6c <__aeabi_dcmpun>
 80055a0:	bb70      	cbnz	r0, 8005600 <_printf_float+0xc0>
 80055a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055a6:	4b99      	ldr	r3, [pc, #612]	@ (800580c <_printf_float+0x2cc>)
 80055a8:	f04f 32ff 	mov.w	r2, #4294967295
 80055ac:	f7fb fac0 	bl	8000b30 <__aeabi_dcmple>
 80055b0:	bb30      	cbnz	r0, 8005600 <_printf_float+0xc0>
 80055b2:	2200      	movs	r2, #0
 80055b4:	2300      	movs	r3, #0
 80055b6:	4640      	mov	r0, r8
 80055b8:	4649      	mov	r1, r9
 80055ba:	f7fb faaf 	bl	8000b1c <__aeabi_dcmplt>
 80055be:	b110      	cbz	r0, 80055c6 <_printf_float+0x86>
 80055c0:	232d      	movs	r3, #45	@ 0x2d
 80055c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055c6:	4a92      	ldr	r2, [pc, #584]	@ (8005810 <_printf_float+0x2d0>)
 80055c8:	4b92      	ldr	r3, [pc, #584]	@ (8005814 <_printf_float+0x2d4>)
 80055ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80055ce:	bf8c      	ite	hi
 80055d0:	4690      	movhi	r8, r2
 80055d2:	4698      	movls	r8, r3
 80055d4:	2303      	movs	r3, #3
 80055d6:	6123      	str	r3, [r4, #16]
 80055d8:	f02b 0304 	bic.w	r3, fp, #4
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	f04f 0900 	mov.w	r9, #0
 80055e2:	9700      	str	r7, [sp, #0]
 80055e4:	4633      	mov	r3, r6
 80055e6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80055e8:	4621      	mov	r1, r4
 80055ea:	4628      	mov	r0, r5
 80055ec:	f000 f9d4 	bl	8005998 <_printf_common>
 80055f0:	3001      	adds	r0, #1
 80055f2:	f040 808f 	bne.w	8005714 <_printf_float+0x1d4>
 80055f6:	f04f 30ff 	mov.w	r0, #4294967295
 80055fa:	b011      	add	sp, #68	@ 0x44
 80055fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005600:	4642      	mov	r2, r8
 8005602:	464b      	mov	r3, r9
 8005604:	4640      	mov	r0, r8
 8005606:	4649      	mov	r1, r9
 8005608:	f7fb fab0 	bl	8000b6c <__aeabi_dcmpun>
 800560c:	b140      	cbz	r0, 8005620 <_printf_float+0xe0>
 800560e:	464b      	mov	r3, r9
 8005610:	2b00      	cmp	r3, #0
 8005612:	bfbc      	itt	lt
 8005614:	232d      	movlt	r3, #45	@ 0x2d
 8005616:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800561a:	4a7f      	ldr	r2, [pc, #508]	@ (8005818 <_printf_float+0x2d8>)
 800561c:	4b7f      	ldr	r3, [pc, #508]	@ (800581c <_printf_float+0x2dc>)
 800561e:	e7d4      	b.n	80055ca <_printf_float+0x8a>
 8005620:	6863      	ldr	r3, [r4, #4]
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005628:	d13f      	bne.n	80056aa <_printf_float+0x16a>
 800562a:	2306      	movs	r3, #6
 800562c:	6063      	str	r3, [r4, #4]
 800562e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005632:	2200      	movs	r2, #0
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	9206      	str	r2, [sp, #24]
 8005638:	aa0e      	add	r2, sp, #56	@ 0x38
 800563a:	e9cd a204 	strd	sl, r2, [sp, #16]
 800563e:	aa0d      	add	r2, sp, #52	@ 0x34
 8005640:	9203      	str	r2, [sp, #12]
 8005642:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005646:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800564a:	6863      	ldr	r3, [r4, #4]
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	4642      	mov	r2, r8
 8005650:	464b      	mov	r3, r9
 8005652:	4628      	mov	r0, r5
 8005654:	910a      	str	r1, [sp, #40]	@ 0x28
 8005656:	f7ff fed5 	bl	8005404 <__cvt>
 800565a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800565c:	2947      	cmp	r1, #71	@ 0x47
 800565e:	4680      	mov	r8, r0
 8005660:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005662:	d128      	bne.n	80056b6 <_printf_float+0x176>
 8005664:	1cc8      	adds	r0, r1, #3
 8005666:	db02      	blt.n	800566e <_printf_float+0x12e>
 8005668:	6863      	ldr	r3, [r4, #4]
 800566a:	4299      	cmp	r1, r3
 800566c:	dd40      	ble.n	80056f0 <_printf_float+0x1b0>
 800566e:	f1aa 0a02 	sub.w	sl, sl, #2
 8005672:	fa5f fa8a 	uxtb.w	sl, sl
 8005676:	3901      	subs	r1, #1
 8005678:	4652      	mov	r2, sl
 800567a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800567e:	910d      	str	r1, [sp, #52]	@ 0x34
 8005680:	f7ff ff24 	bl	80054cc <__exponent>
 8005684:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005686:	1813      	adds	r3, r2, r0
 8005688:	2a01      	cmp	r2, #1
 800568a:	4681      	mov	r9, r0
 800568c:	6123      	str	r3, [r4, #16]
 800568e:	dc02      	bgt.n	8005696 <_printf_float+0x156>
 8005690:	6822      	ldr	r2, [r4, #0]
 8005692:	07d2      	lsls	r2, r2, #31
 8005694:	d501      	bpl.n	800569a <_printf_float+0x15a>
 8005696:	3301      	adds	r3, #1
 8005698:	6123      	str	r3, [r4, #16]
 800569a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d09f      	beq.n	80055e2 <_printf_float+0xa2>
 80056a2:	232d      	movs	r3, #45	@ 0x2d
 80056a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056a8:	e79b      	b.n	80055e2 <_printf_float+0xa2>
 80056aa:	2947      	cmp	r1, #71	@ 0x47
 80056ac:	d1bf      	bne.n	800562e <_printf_float+0xee>
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1bd      	bne.n	800562e <_printf_float+0xee>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e7ba      	b.n	800562c <_printf_float+0xec>
 80056b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80056ba:	d9dc      	bls.n	8005676 <_printf_float+0x136>
 80056bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80056c0:	d118      	bne.n	80056f4 <_printf_float+0x1b4>
 80056c2:	2900      	cmp	r1, #0
 80056c4:	6863      	ldr	r3, [r4, #4]
 80056c6:	dd0b      	ble.n	80056e0 <_printf_float+0x1a0>
 80056c8:	6121      	str	r1, [r4, #16]
 80056ca:	b913      	cbnz	r3, 80056d2 <_printf_float+0x192>
 80056cc:	6822      	ldr	r2, [r4, #0]
 80056ce:	07d0      	lsls	r0, r2, #31
 80056d0:	d502      	bpl.n	80056d8 <_printf_float+0x198>
 80056d2:	3301      	adds	r3, #1
 80056d4:	440b      	add	r3, r1
 80056d6:	6123      	str	r3, [r4, #16]
 80056d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80056da:	f04f 0900 	mov.w	r9, #0
 80056de:	e7dc      	b.n	800569a <_printf_float+0x15a>
 80056e0:	b913      	cbnz	r3, 80056e8 <_printf_float+0x1a8>
 80056e2:	6822      	ldr	r2, [r4, #0]
 80056e4:	07d2      	lsls	r2, r2, #31
 80056e6:	d501      	bpl.n	80056ec <_printf_float+0x1ac>
 80056e8:	3302      	adds	r3, #2
 80056ea:	e7f4      	b.n	80056d6 <_printf_float+0x196>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e7f2      	b.n	80056d6 <_printf_float+0x196>
 80056f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80056f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056f6:	4299      	cmp	r1, r3
 80056f8:	db05      	blt.n	8005706 <_printf_float+0x1c6>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	6121      	str	r1, [r4, #16]
 80056fe:	07d8      	lsls	r0, r3, #31
 8005700:	d5ea      	bpl.n	80056d8 <_printf_float+0x198>
 8005702:	1c4b      	adds	r3, r1, #1
 8005704:	e7e7      	b.n	80056d6 <_printf_float+0x196>
 8005706:	2900      	cmp	r1, #0
 8005708:	bfd4      	ite	le
 800570a:	f1c1 0202 	rsble	r2, r1, #2
 800570e:	2201      	movgt	r2, #1
 8005710:	4413      	add	r3, r2
 8005712:	e7e0      	b.n	80056d6 <_printf_float+0x196>
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	055a      	lsls	r2, r3, #21
 8005718:	d407      	bmi.n	800572a <_printf_float+0x1ea>
 800571a:	6923      	ldr	r3, [r4, #16]
 800571c:	4642      	mov	r2, r8
 800571e:	4631      	mov	r1, r6
 8005720:	4628      	mov	r0, r5
 8005722:	47b8      	blx	r7
 8005724:	3001      	adds	r0, #1
 8005726:	d12b      	bne.n	8005780 <_printf_float+0x240>
 8005728:	e765      	b.n	80055f6 <_printf_float+0xb6>
 800572a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800572e:	f240 80dd 	bls.w	80058ec <_printf_float+0x3ac>
 8005732:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005736:	2200      	movs	r2, #0
 8005738:	2300      	movs	r3, #0
 800573a:	f7fb f9e5 	bl	8000b08 <__aeabi_dcmpeq>
 800573e:	2800      	cmp	r0, #0
 8005740:	d033      	beq.n	80057aa <_printf_float+0x26a>
 8005742:	4a37      	ldr	r2, [pc, #220]	@ (8005820 <_printf_float+0x2e0>)
 8005744:	2301      	movs	r3, #1
 8005746:	4631      	mov	r1, r6
 8005748:	4628      	mov	r0, r5
 800574a:	47b8      	blx	r7
 800574c:	3001      	adds	r0, #1
 800574e:	f43f af52 	beq.w	80055f6 <_printf_float+0xb6>
 8005752:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005756:	4543      	cmp	r3, r8
 8005758:	db02      	blt.n	8005760 <_printf_float+0x220>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	07d8      	lsls	r0, r3, #31
 800575e:	d50f      	bpl.n	8005780 <_printf_float+0x240>
 8005760:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005764:	4631      	mov	r1, r6
 8005766:	4628      	mov	r0, r5
 8005768:	47b8      	blx	r7
 800576a:	3001      	adds	r0, #1
 800576c:	f43f af43 	beq.w	80055f6 <_printf_float+0xb6>
 8005770:	f04f 0900 	mov.w	r9, #0
 8005774:	f108 38ff 	add.w	r8, r8, #4294967295
 8005778:	f104 0a1a 	add.w	sl, r4, #26
 800577c:	45c8      	cmp	r8, r9
 800577e:	dc09      	bgt.n	8005794 <_printf_float+0x254>
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	079b      	lsls	r3, r3, #30
 8005784:	f100 8103 	bmi.w	800598e <_printf_float+0x44e>
 8005788:	68e0      	ldr	r0, [r4, #12]
 800578a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800578c:	4298      	cmp	r0, r3
 800578e:	bfb8      	it	lt
 8005790:	4618      	movlt	r0, r3
 8005792:	e732      	b.n	80055fa <_printf_float+0xba>
 8005794:	2301      	movs	r3, #1
 8005796:	4652      	mov	r2, sl
 8005798:	4631      	mov	r1, r6
 800579a:	4628      	mov	r0, r5
 800579c:	47b8      	blx	r7
 800579e:	3001      	adds	r0, #1
 80057a0:	f43f af29 	beq.w	80055f6 <_printf_float+0xb6>
 80057a4:	f109 0901 	add.w	r9, r9, #1
 80057a8:	e7e8      	b.n	800577c <_printf_float+0x23c>
 80057aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	dc39      	bgt.n	8005824 <_printf_float+0x2e4>
 80057b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005820 <_printf_float+0x2e0>)
 80057b2:	2301      	movs	r3, #1
 80057b4:	4631      	mov	r1, r6
 80057b6:	4628      	mov	r0, r5
 80057b8:	47b8      	blx	r7
 80057ba:	3001      	adds	r0, #1
 80057bc:	f43f af1b 	beq.w	80055f6 <_printf_float+0xb6>
 80057c0:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80057c4:	ea59 0303 	orrs.w	r3, r9, r3
 80057c8:	d102      	bne.n	80057d0 <_printf_float+0x290>
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	07d9      	lsls	r1, r3, #31
 80057ce:	d5d7      	bpl.n	8005780 <_printf_float+0x240>
 80057d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057d4:	4631      	mov	r1, r6
 80057d6:	4628      	mov	r0, r5
 80057d8:	47b8      	blx	r7
 80057da:	3001      	adds	r0, #1
 80057dc:	f43f af0b 	beq.w	80055f6 <_printf_float+0xb6>
 80057e0:	f04f 0a00 	mov.w	sl, #0
 80057e4:	f104 0b1a 	add.w	fp, r4, #26
 80057e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057ea:	425b      	negs	r3, r3
 80057ec:	4553      	cmp	r3, sl
 80057ee:	dc01      	bgt.n	80057f4 <_printf_float+0x2b4>
 80057f0:	464b      	mov	r3, r9
 80057f2:	e793      	b.n	800571c <_printf_float+0x1dc>
 80057f4:	2301      	movs	r3, #1
 80057f6:	465a      	mov	r2, fp
 80057f8:	4631      	mov	r1, r6
 80057fa:	4628      	mov	r0, r5
 80057fc:	47b8      	blx	r7
 80057fe:	3001      	adds	r0, #1
 8005800:	f43f aef9 	beq.w	80055f6 <_printf_float+0xb6>
 8005804:	f10a 0a01 	add.w	sl, sl, #1
 8005808:	e7ee      	b.n	80057e8 <_printf_float+0x2a8>
 800580a:	bf00      	nop
 800580c:	7fefffff 	.word	0x7fefffff
 8005810:	08009cc0 	.word	0x08009cc0
 8005814:	08009cbc 	.word	0x08009cbc
 8005818:	08009cc8 	.word	0x08009cc8
 800581c:	08009cc4 	.word	0x08009cc4
 8005820:	08009ccc 	.word	0x08009ccc
 8005824:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005826:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800582a:	4553      	cmp	r3, sl
 800582c:	bfa8      	it	ge
 800582e:	4653      	movge	r3, sl
 8005830:	2b00      	cmp	r3, #0
 8005832:	4699      	mov	r9, r3
 8005834:	dc36      	bgt.n	80058a4 <_printf_float+0x364>
 8005836:	f04f 0b00 	mov.w	fp, #0
 800583a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800583e:	f104 021a 	add.w	r2, r4, #26
 8005842:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005844:	930a      	str	r3, [sp, #40]	@ 0x28
 8005846:	eba3 0309 	sub.w	r3, r3, r9
 800584a:	455b      	cmp	r3, fp
 800584c:	dc31      	bgt.n	80058b2 <_printf_float+0x372>
 800584e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005850:	459a      	cmp	sl, r3
 8005852:	dc3a      	bgt.n	80058ca <_printf_float+0x38a>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	07da      	lsls	r2, r3, #31
 8005858:	d437      	bmi.n	80058ca <_printf_float+0x38a>
 800585a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800585c:	ebaa 0903 	sub.w	r9, sl, r3
 8005860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005862:	ebaa 0303 	sub.w	r3, sl, r3
 8005866:	4599      	cmp	r9, r3
 8005868:	bfa8      	it	ge
 800586a:	4699      	movge	r9, r3
 800586c:	f1b9 0f00 	cmp.w	r9, #0
 8005870:	dc33      	bgt.n	80058da <_printf_float+0x39a>
 8005872:	f04f 0800 	mov.w	r8, #0
 8005876:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800587a:	f104 0b1a 	add.w	fp, r4, #26
 800587e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005880:	ebaa 0303 	sub.w	r3, sl, r3
 8005884:	eba3 0309 	sub.w	r3, r3, r9
 8005888:	4543      	cmp	r3, r8
 800588a:	f77f af79 	ble.w	8005780 <_printf_float+0x240>
 800588e:	2301      	movs	r3, #1
 8005890:	465a      	mov	r2, fp
 8005892:	4631      	mov	r1, r6
 8005894:	4628      	mov	r0, r5
 8005896:	47b8      	blx	r7
 8005898:	3001      	adds	r0, #1
 800589a:	f43f aeac 	beq.w	80055f6 <_printf_float+0xb6>
 800589e:	f108 0801 	add.w	r8, r8, #1
 80058a2:	e7ec      	b.n	800587e <_printf_float+0x33e>
 80058a4:	4642      	mov	r2, r8
 80058a6:	4631      	mov	r1, r6
 80058a8:	4628      	mov	r0, r5
 80058aa:	47b8      	blx	r7
 80058ac:	3001      	adds	r0, #1
 80058ae:	d1c2      	bne.n	8005836 <_printf_float+0x2f6>
 80058b0:	e6a1      	b.n	80055f6 <_printf_float+0xb6>
 80058b2:	2301      	movs	r3, #1
 80058b4:	4631      	mov	r1, r6
 80058b6:	4628      	mov	r0, r5
 80058b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80058ba:	47b8      	blx	r7
 80058bc:	3001      	adds	r0, #1
 80058be:	f43f ae9a 	beq.w	80055f6 <_printf_float+0xb6>
 80058c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058c4:	f10b 0b01 	add.w	fp, fp, #1
 80058c8:	e7bb      	b.n	8005842 <_printf_float+0x302>
 80058ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058ce:	4631      	mov	r1, r6
 80058d0:	4628      	mov	r0, r5
 80058d2:	47b8      	blx	r7
 80058d4:	3001      	adds	r0, #1
 80058d6:	d1c0      	bne.n	800585a <_printf_float+0x31a>
 80058d8:	e68d      	b.n	80055f6 <_printf_float+0xb6>
 80058da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058dc:	464b      	mov	r3, r9
 80058de:	4442      	add	r2, r8
 80058e0:	4631      	mov	r1, r6
 80058e2:	4628      	mov	r0, r5
 80058e4:	47b8      	blx	r7
 80058e6:	3001      	adds	r0, #1
 80058e8:	d1c3      	bne.n	8005872 <_printf_float+0x332>
 80058ea:	e684      	b.n	80055f6 <_printf_float+0xb6>
 80058ec:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80058f0:	f1ba 0f01 	cmp.w	sl, #1
 80058f4:	dc01      	bgt.n	80058fa <_printf_float+0x3ba>
 80058f6:	07db      	lsls	r3, r3, #31
 80058f8:	d536      	bpl.n	8005968 <_printf_float+0x428>
 80058fa:	2301      	movs	r3, #1
 80058fc:	4642      	mov	r2, r8
 80058fe:	4631      	mov	r1, r6
 8005900:	4628      	mov	r0, r5
 8005902:	47b8      	blx	r7
 8005904:	3001      	adds	r0, #1
 8005906:	f43f ae76 	beq.w	80055f6 <_printf_float+0xb6>
 800590a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800590e:	4631      	mov	r1, r6
 8005910:	4628      	mov	r0, r5
 8005912:	47b8      	blx	r7
 8005914:	3001      	adds	r0, #1
 8005916:	f43f ae6e 	beq.w	80055f6 <_printf_float+0xb6>
 800591a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800591e:	2200      	movs	r2, #0
 8005920:	2300      	movs	r3, #0
 8005922:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005926:	f7fb f8ef 	bl	8000b08 <__aeabi_dcmpeq>
 800592a:	b9c0      	cbnz	r0, 800595e <_printf_float+0x41e>
 800592c:	4653      	mov	r3, sl
 800592e:	f108 0201 	add.w	r2, r8, #1
 8005932:	4631      	mov	r1, r6
 8005934:	4628      	mov	r0, r5
 8005936:	47b8      	blx	r7
 8005938:	3001      	adds	r0, #1
 800593a:	d10c      	bne.n	8005956 <_printf_float+0x416>
 800593c:	e65b      	b.n	80055f6 <_printf_float+0xb6>
 800593e:	2301      	movs	r3, #1
 8005940:	465a      	mov	r2, fp
 8005942:	4631      	mov	r1, r6
 8005944:	4628      	mov	r0, r5
 8005946:	47b8      	blx	r7
 8005948:	3001      	adds	r0, #1
 800594a:	f43f ae54 	beq.w	80055f6 <_printf_float+0xb6>
 800594e:	f108 0801 	add.w	r8, r8, #1
 8005952:	45d0      	cmp	r8, sl
 8005954:	dbf3      	blt.n	800593e <_printf_float+0x3fe>
 8005956:	464b      	mov	r3, r9
 8005958:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800595c:	e6df      	b.n	800571e <_printf_float+0x1de>
 800595e:	f04f 0800 	mov.w	r8, #0
 8005962:	f104 0b1a 	add.w	fp, r4, #26
 8005966:	e7f4      	b.n	8005952 <_printf_float+0x412>
 8005968:	2301      	movs	r3, #1
 800596a:	4642      	mov	r2, r8
 800596c:	e7e1      	b.n	8005932 <_printf_float+0x3f2>
 800596e:	2301      	movs	r3, #1
 8005970:	464a      	mov	r2, r9
 8005972:	4631      	mov	r1, r6
 8005974:	4628      	mov	r0, r5
 8005976:	47b8      	blx	r7
 8005978:	3001      	adds	r0, #1
 800597a:	f43f ae3c 	beq.w	80055f6 <_printf_float+0xb6>
 800597e:	f108 0801 	add.w	r8, r8, #1
 8005982:	68e3      	ldr	r3, [r4, #12]
 8005984:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005986:	1a5b      	subs	r3, r3, r1
 8005988:	4543      	cmp	r3, r8
 800598a:	dcf0      	bgt.n	800596e <_printf_float+0x42e>
 800598c:	e6fc      	b.n	8005788 <_printf_float+0x248>
 800598e:	f04f 0800 	mov.w	r8, #0
 8005992:	f104 0919 	add.w	r9, r4, #25
 8005996:	e7f4      	b.n	8005982 <_printf_float+0x442>

08005998 <_printf_common>:
 8005998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800599c:	4616      	mov	r6, r2
 800599e:	4698      	mov	r8, r3
 80059a0:	688a      	ldr	r2, [r1, #8]
 80059a2:	690b      	ldr	r3, [r1, #16]
 80059a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059a8:	4293      	cmp	r3, r2
 80059aa:	bfb8      	it	lt
 80059ac:	4613      	movlt	r3, r2
 80059ae:	6033      	str	r3, [r6, #0]
 80059b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059b4:	4607      	mov	r7, r0
 80059b6:	460c      	mov	r4, r1
 80059b8:	b10a      	cbz	r2, 80059be <_printf_common+0x26>
 80059ba:	3301      	adds	r3, #1
 80059bc:	6033      	str	r3, [r6, #0]
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	0699      	lsls	r1, r3, #26
 80059c2:	bf42      	ittt	mi
 80059c4:	6833      	ldrmi	r3, [r6, #0]
 80059c6:	3302      	addmi	r3, #2
 80059c8:	6033      	strmi	r3, [r6, #0]
 80059ca:	6825      	ldr	r5, [r4, #0]
 80059cc:	f015 0506 	ands.w	r5, r5, #6
 80059d0:	d106      	bne.n	80059e0 <_printf_common+0x48>
 80059d2:	f104 0a19 	add.w	sl, r4, #25
 80059d6:	68e3      	ldr	r3, [r4, #12]
 80059d8:	6832      	ldr	r2, [r6, #0]
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	42ab      	cmp	r3, r5
 80059de:	dc26      	bgt.n	8005a2e <_printf_common+0x96>
 80059e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059e4:	6822      	ldr	r2, [r4, #0]
 80059e6:	3b00      	subs	r3, #0
 80059e8:	bf18      	it	ne
 80059ea:	2301      	movne	r3, #1
 80059ec:	0692      	lsls	r2, r2, #26
 80059ee:	d42b      	bmi.n	8005a48 <_printf_common+0xb0>
 80059f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059f4:	4641      	mov	r1, r8
 80059f6:	4638      	mov	r0, r7
 80059f8:	47c8      	blx	r9
 80059fa:	3001      	adds	r0, #1
 80059fc:	d01e      	beq.n	8005a3c <_printf_common+0xa4>
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	6922      	ldr	r2, [r4, #16]
 8005a02:	f003 0306 	and.w	r3, r3, #6
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	bf02      	ittt	eq
 8005a0a:	68e5      	ldreq	r5, [r4, #12]
 8005a0c:	6833      	ldreq	r3, [r6, #0]
 8005a0e:	1aed      	subeq	r5, r5, r3
 8005a10:	68a3      	ldr	r3, [r4, #8]
 8005a12:	bf0c      	ite	eq
 8005a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a18:	2500      	movne	r5, #0
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	bfc4      	itt	gt
 8005a1e:	1a9b      	subgt	r3, r3, r2
 8005a20:	18ed      	addgt	r5, r5, r3
 8005a22:	2600      	movs	r6, #0
 8005a24:	341a      	adds	r4, #26
 8005a26:	42b5      	cmp	r5, r6
 8005a28:	d11a      	bne.n	8005a60 <_printf_common+0xc8>
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	e008      	b.n	8005a40 <_printf_common+0xa8>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	4652      	mov	r2, sl
 8005a32:	4641      	mov	r1, r8
 8005a34:	4638      	mov	r0, r7
 8005a36:	47c8      	blx	r9
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d103      	bne.n	8005a44 <_printf_common+0xac>
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a44:	3501      	adds	r5, #1
 8005a46:	e7c6      	b.n	80059d6 <_printf_common+0x3e>
 8005a48:	18e1      	adds	r1, r4, r3
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	2030      	movs	r0, #48	@ 0x30
 8005a4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a52:	4422      	add	r2, r4
 8005a54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a5c:	3302      	adds	r3, #2
 8005a5e:	e7c7      	b.n	80059f0 <_printf_common+0x58>
 8005a60:	2301      	movs	r3, #1
 8005a62:	4622      	mov	r2, r4
 8005a64:	4641      	mov	r1, r8
 8005a66:	4638      	mov	r0, r7
 8005a68:	47c8      	blx	r9
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d0e6      	beq.n	8005a3c <_printf_common+0xa4>
 8005a6e:	3601      	adds	r6, #1
 8005a70:	e7d9      	b.n	8005a26 <_printf_common+0x8e>
	...

08005a74 <_printf_i>:
 8005a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a78:	7e0f      	ldrb	r7, [r1, #24]
 8005a7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a7c:	2f78      	cmp	r7, #120	@ 0x78
 8005a7e:	4691      	mov	r9, r2
 8005a80:	4680      	mov	r8, r0
 8005a82:	460c      	mov	r4, r1
 8005a84:	469a      	mov	sl, r3
 8005a86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a8a:	d807      	bhi.n	8005a9c <_printf_i+0x28>
 8005a8c:	2f62      	cmp	r7, #98	@ 0x62
 8005a8e:	d80a      	bhi.n	8005aa6 <_printf_i+0x32>
 8005a90:	2f00      	cmp	r7, #0
 8005a92:	f000 80d1 	beq.w	8005c38 <_printf_i+0x1c4>
 8005a96:	2f58      	cmp	r7, #88	@ 0x58
 8005a98:	f000 80b8 	beq.w	8005c0c <_printf_i+0x198>
 8005a9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005aa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005aa4:	e03a      	b.n	8005b1c <_printf_i+0xa8>
 8005aa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005aaa:	2b15      	cmp	r3, #21
 8005aac:	d8f6      	bhi.n	8005a9c <_printf_i+0x28>
 8005aae:	a101      	add	r1, pc, #4	@ (adr r1, 8005ab4 <_printf_i+0x40>)
 8005ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ab4:	08005b0d 	.word	0x08005b0d
 8005ab8:	08005b21 	.word	0x08005b21
 8005abc:	08005a9d 	.word	0x08005a9d
 8005ac0:	08005a9d 	.word	0x08005a9d
 8005ac4:	08005a9d 	.word	0x08005a9d
 8005ac8:	08005a9d 	.word	0x08005a9d
 8005acc:	08005b21 	.word	0x08005b21
 8005ad0:	08005a9d 	.word	0x08005a9d
 8005ad4:	08005a9d 	.word	0x08005a9d
 8005ad8:	08005a9d 	.word	0x08005a9d
 8005adc:	08005a9d 	.word	0x08005a9d
 8005ae0:	08005c1f 	.word	0x08005c1f
 8005ae4:	08005b4b 	.word	0x08005b4b
 8005ae8:	08005bd9 	.word	0x08005bd9
 8005aec:	08005a9d 	.word	0x08005a9d
 8005af0:	08005a9d 	.word	0x08005a9d
 8005af4:	08005c41 	.word	0x08005c41
 8005af8:	08005a9d 	.word	0x08005a9d
 8005afc:	08005b4b 	.word	0x08005b4b
 8005b00:	08005a9d 	.word	0x08005a9d
 8005b04:	08005a9d 	.word	0x08005a9d
 8005b08:	08005be1 	.word	0x08005be1
 8005b0c:	6833      	ldr	r3, [r6, #0]
 8005b0e:	1d1a      	adds	r2, r3, #4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6032      	str	r2, [r6, #0]
 8005b14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e09c      	b.n	8005c5a <_printf_i+0x1e6>
 8005b20:	6833      	ldr	r3, [r6, #0]
 8005b22:	6820      	ldr	r0, [r4, #0]
 8005b24:	1d19      	adds	r1, r3, #4
 8005b26:	6031      	str	r1, [r6, #0]
 8005b28:	0606      	lsls	r6, r0, #24
 8005b2a:	d501      	bpl.n	8005b30 <_printf_i+0xbc>
 8005b2c:	681d      	ldr	r5, [r3, #0]
 8005b2e:	e003      	b.n	8005b38 <_printf_i+0xc4>
 8005b30:	0645      	lsls	r5, r0, #25
 8005b32:	d5fb      	bpl.n	8005b2c <_printf_i+0xb8>
 8005b34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b38:	2d00      	cmp	r5, #0
 8005b3a:	da03      	bge.n	8005b44 <_printf_i+0xd0>
 8005b3c:	232d      	movs	r3, #45	@ 0x2d
 8005b3e:	426d      	negs	r5, r5
 8005b40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b44:	4858      	ldr	r0, [pc, #352]	@ (8005ca8 <_printf_i+0x234>)
 8005b46:	230a      	movs	r3, #10
 8005b48:	e011      	b.n	8005b6e <_printf_i+0xfa>
 8005b4a:	6821      	ldr	r1, [r4, #0]
 8005b4c:	6833      	ldr	r3, [r6, #0]
 8005b4e:	0608      	lsls	r0, r1, #24
 8005b50:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b54:	d402      	bmi.n	8005b5c <_printf_i+0xe8>
 8005b56:	0649      	lsls	r1, r1, #25
 8005b58:	bf48      	it	mi
 8005b5a:	b2ad      	uxthmi	r5, r5
 8005b5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b5e:	4852      	ldr	r0, [pc, #328]	@ (8005ca8 <_printf_i+0x234>)
 8005b60:	6033      	str	r3, [r6, #0]
 8005b62:	bf14      	ite	ne
 8005b64:	230a      	movne	r3, #10
 8005b66:	2308      	moveq	r3, #8
 8005b68:	2100      	movs	r1, #0
 8005b6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b6e:	6866      	ldr	r6, [r4, #4]
 8005b70:	60a6      	str	r6, [r4, #8]
 8005b72:	2e00      	cmp	r6, #0
 8005b74:	db05      	blt.n	8005b82 <_printf_i+0x10e>
 8005b76:	6821      	ldr	r1, [r4, #0]
 8005b78:	432e      	orrs	r6, r5
 8005b7a:	f021 0104 	bic.w	r1, r1, #4
 8005b7e:	6021      	str	r1, [r4, #0]
 8005b80:	d04b      	beq.n	8005c1a <_printf_i+0x1a6>
 8005b82:	4616      	mov	r6, r2
 8005b84:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b88:	fb03 5711 	mls	r7, r3, r1, r5
 8005b8c:	5dc7      	ldrb	r7, [r0, r7]
 8005b8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b92:	462f      	mov	r7, r5
 8005b94:	42bb      	cmp	r3, r7
 8005b96:	460d      	mov	r5, r1
 8005b98:	d9f4      	bls.n	8005b84 <_printf_i+0x110>
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d10b      	bne.n	8005bb6 <_printf_i+0x142>
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	07df      	lsls	r7, r3, #31
 8005ba2:	d508      	bpl.n	8005bb6 <_printf_i+0x142>
 8005ba4:	6923      	ldr	r3, [r4, #16]
 8005ba6:	6861      	ldr	r1, [r4, #4]
 8005ba8:	4299      	cmp	r1, r3
 8005baa:	bfde      	ittt	le
 8005bac:	2330      	movle	r3, #48	@ 0x30
 8005bae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bb2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bb6:	1b92      	subs	r2, r2, r6
 8005bb8:	6122      	str	r2, [r4, #16]
 8005bba:	f8cd a000 	str.w	sl, [sp]
 8005bbe:	464b      	mov	r3, r9
 8005bc0:	aa03      	add	r2, sp, #12
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4640      	mov	r0, r8
 8005bc6:	f7ff fee7 	bl	8005998 <_printf_common>
 8005bca:	3001      	adds	r0, #1
 8005bcc:	d14a      	bne.n	8005c64 <_printf_i+0x1f0>
 8005bce:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd2:	b004      	add	sp, #16
 8005bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	f043 0320 	orr.w	r3, r3, #32
 8005bde:	6023      	str	r3, [r4, #0]
 8005be0:	4832      	ldr	r0, [pc, #200]	@ (8005cac <_printf_i+0x238>)
 8005be2:	2778      	movs	r7, #120	@ 0x78
 8005be4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	6831      	ldr	r1, [r6, #0]
 8005bec:	061f      	lsls	r7, r3, #24
 8005bee:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bf2:	d402      	bmi.n	8005bfa <_printf_i+0x186>
 8005bf4:	065f      	lsls	r7, r3, #25
 8005bf6:	bf48      	it	mi
 8005bf8:	b2ad      	uxthmi	r5, r5
 8005bfa:	6031      	str	r1, [r6, #0]
 8005bfc:	07d9      	lsls	r1, r3, #31
 8005bfe:	bf44      	itt	mi
 8005c00:	f043 0320 	orrmi.w	r3, r3, #32
 8005c04:	6023      	strmi	r3, [r4, #0]
 8005c06:	b11d      	cbz	r5, 8005c10 <_printf_i+0x19c>
 8005c08:	2310      	movs	r3, #16
 8005c0a:	e7ad      	b.n	8005b68 <_printf_i+0xf4>
 8005c0c:	4826      	ldr	r0, [pc, #152]	@ (8005ca8 <_printf_i+0x234>)
 8005c0e:	e7e9      	b.n	8005be4 <_printf_i+0x170>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	f023 0320 	bic.w	r3, r3, #32
 8005c16:	6023      	str	r3, [r4, #0]
 8005c18:	e7f6      	b.n	8005c08 <_printf_i+0x194>
 8005c1a:	4616      	mov	r6, r2
 8005c1c:	e7bd      	b.n	8005b9a <_printf_i+0x126>
 8005c1e:	6833      	ldr	r3, [r6, #0]
 8005c20:	6825      	ldr	r5, [r4, #0]
 8005c22:	6961      	ldr	r1, [r4, #20]
 8005c24:	1d18      	adds	r0, r3, #4
 8005c26:	6030      	str	r0, [r6, #0]
 8005c28:	062e      	lsls	r6, r5, #24
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	d501      	bpl.n	8005c32 <_printf_i+0x1be>
 8005c2e:	6019      	str	r1, [r3, #0]
 8005c30:	e002      	b.n	8005c38 <_printf_i+0x1c4>
 8005c32:	0668      	lsls	r0, r5, #25
 8005c34:	d5fb      	bpl.n	8005c2e <_printf_i+0x1ba>
 8005c36:	8019      	strh	r1, [r3, #0]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	6123      	str	r3, [r4, #16]
 8005c3c:	4616      	mov	r6, r2
 8005c3e:	e7bc      	b.n	8005bba <_printf_i+0x146>
 8005c40:	6833      	ldr	r3, [r6, #0]
 8005c42:	1d1a      	adds	r2, r3, #4
 8005c44:	6032      	str	r2, [r6, #0]
 8005c46:	681e      	ldr	r6, [r3, #0]
 8005c48:	6862      	ldr	r2, [r4, #4]
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f7fa fadf 	bl	8000210 <memchr>
 8005c52:	b108      	cbz	r0, 8005c58 <_printf_i+0x1e4>
 8005c54:	1b80      	subs	r0, r0, r6
 8005c56:	6060      	str	r0, [r4, #4]
 8005c58:	6863      	ldr	r3, [r4, #4]
 8005c5a:	6123      	str	r3, [r4, #16]
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c62:	e7aa      	b.n	8005bba <_printf_i+0x146>
 8005c64:	6923      	ldr	r3, [r4, #16]
 8005c66:	4632      	mov	r2, r6
 8005c68:	4649      	mov	r1, r9
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	47d0      	blx	sl
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d0ad      	beq.n	8005bce <_printf_i+0x15a>
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	079b      	lsls	r3, r3, #30
 8005c76:	d413      	bmi.n	8005ca0 <_printf_i+0x22c>
 8005c78:	68e0      	ldr	r0, [r4, #12]
 8005c7a:	9b03      	ldr	r3, [sp, #12]
 8005c7c:	4298      	cmp	r0, r3
 8005c7e:	bfb8      	it	lt
 8005c80:	4618      	movlt	r0, r3
 8005c82:	e7a6      	b.n	8005bd2 <_printf_i+0x15e>
 8005c84:	2301      	movs	r3, #1
 8005c86:	4632      	mov	r2, r6
 8005c88:	4649      	mov	r1, r9
 8005c8a:	4640      	mov	r0, r8
 8005c8c:	47d0      	blx	sl
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d09d      	beq.n	8005bce <_printf_i+0x15a>
 8005c92:	3501      	adds	r5, #1
 8005c94:	68e3      	ldr	r3, [r4, #12]
 8005c96:	9903      	ldr	r1, [sp, #12]
 8005c98:	1a5b      	subs	r3, r3, r1
 8005c9a:	42ab      	cmp	r3, r5
 8005c9c:	dcf2      	bgt.n	8005c84 <_printf_i+0x210>
 8005c9e:	e7eb      	b.n	8005c78 <_printf_i+0x204>
 8005ca0:	2500      	movs	r5, #0
 8005ca2:	f104 0619 	add.w	r6, r4, #25
 8005ca6:	e7f5      	b.n	8005c94 <_printf_i+0x220>
 8005ca8:	08009cce 	.word	0x08009cce
 8005cac:	08009cdf 	.word	0x08009cdf

08005cb0 <_scanf_float>:
 8005cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	b087      	sub	sp, #28
 8005cb6:	4691      	mov	r9, r2
 8005cb8:	9303      	str	r3, [sp, #12]
 8005cba:	688b      	ldr	r3, [r1, #8]
 8005cbc:	1e5a      	subs	r2, r3, #1
 8005cbe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005cc2:	bf81      	itttt	hi
 8005cc4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005cc8:	eb03 0b05 	addhi.w	fp, r3, r5
 8005ccc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005cd0:	608b      	strhi	r3, [r1, #8]
 8005cd2:	680b      	ldr	r3, [r1, #0]
 8005cd4:	460a      	mov	r2, r1
 8005cd6:	f04f 0500 	mov.w	r5, #0
 8005cda:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005cde:	f842 3b1c 	str.w	r3, [r2], #28
 8005ce2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005ce6:	4680      	mov	r8, r0
 8005ce8:	460c      	mov	r4, r1
 8005cea:	bf98      	it	ls
 8005cec:	f04f 0b00 	movls.w	fp, #0
 8005cf0:	9201      	str	r2, [sp, #4]
 8005cf2:	4616      	mov	r6, r2
 8005cf4:	46aa      	mov	sl, r5
 8005cf6:	462f      	mov	r7, r5
 8005cf8:	9502      	str	r5, [sp, #8]
 8005cfa:	68a2      	ldr	r2, [r4, #8]
 8005cfc:	b15a      	cbz	r2, 8005d16 <_scanf_float+0x66>
 8005cfe:	f8d9 3000 	ldr.w	r3, [r9]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b4e      	cmp	r3, #78	@ 0x4e
 8005d06:	d863      	bhi.n	8005dd0 <_scanf_float+0x120>
 8005d08:	2b40      	cmp	r3, #64	@ 0x40
 8005d0a:	d83b      	bhi.n	8005d84 <_scanf_float+0xd4>
 8005d0c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005d10:	b2c8      	uxtb	r0, r1
 8005d12:	280e      	cmp	r0, #14
 8005d14:	d939      	bls.n	8005d8a <_scanf_float+0xda>
 8005d16:	b11f      	cbz	r7, 8005d20 <_scanf_float+0x70>
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d1e:	6023      	str	r3, [r4, #0]
 8005d20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d24:	f1ba 0f01 	cmp.w	sl, #1
 8005d28:	f200 8114 	bhi.w	8005f54 <_scanf_float+0x2a4>
 8005d2c:	9b01      	ldr	r3, [sp, #4]
 8005d2e:	429e      	cmp	r6, r3
 8005d30:	f200 8105 	bhi.w	8005f3e <_scanf_float+0x28e>
 8005d34:	2001      	movs	r0, #1
 8005d36:	b007      	add	sp, #28
 8005d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005d40:	2a0d      	cmp	r2, #13
 8005d42:	d8e8      	bhi.n	8005d16 <_scanf_float+0x66>
 8005d44:	a101      	add	r1, pc, #4	@ (adr r1, 8005d4c <_scanf_float+0x9c>)
 8005d46:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005e95 	.word	0x08005e95
 8005d50:	08005d17 	.word	0x08005d17
 8005d54:	08005d17 	.word	0x08005d17
 8005d58:	08005d17 	.word	0x08005d17
 8005d5c:	08005ef1 	.word	0x08005ef1
 8005d60:	08005ecb 	.word	0x08005ecb
 8005d64:	08005d17 	.word	0x08005d17
 8005d68:	08005d17 	.word	0x08005d17
 8005d6c:	08005ea3 	.word	0x08005ea3
 8005d70:	08005d17 	.word	0x08005d17
 8005d74:	08005d17 	.word	0x08005d17
 8005d78:	08005d17 	.word	0x08005d17
 8005d7c:	08005d17 	.word	0x08005d17
 8005d80:	08005e5f 	.word	0x08005e5f
 8005d84:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005d88:	e7da      	b.n	8005d40 <_scanf_float+0x90>
 8005d8a:	290e      	cmp	r1, #14
 8005d8c:	d8c3      	bhi.n	8005d16 <_scanf_float+0x66>
 8005d8e:	a001      	add	r0, pc, #4	@ (adr r0, 8005d94 <_scanf_float+0xe4>)
 8005d90:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005d94:	08005e4f 	.word	0x08005e4f
 8005d98:	08005d17 	.word	0x08005d17
 8005d9c:	08005e4f 	.word	0x08005e4f
 8005da0:	08005edf 	.word	0x08005edf
 8005da4:	08005d17 	.word	0x08005d17
 8005da8:	08005df1 	.word	0x08005df1
 8005dac:	08005e35 	.word	0x08005e35
 8005db0:	08005e35 	.word	0x08005e35
 8005db4:	08005e35 	.word	0x08005e35
 8005db8:	08005e35 	.word	0x08005e35
 8005dbc:	08005e35 	.word	0x08005e35
 8005dc0:	08005e35 	.word	0x08005e35
 8005dc4:	08005e35 	.word	0x08005e35
 8005dc8:	08005e35 	.word	0x08005e35
 8005dcc:	08005e35 	.word	0x08005e35
 8005dd0:	2b6e      	cmp	r3, #110	@ 0x6e
 8005dd2:	d809      	bhi.n	8005de8 <_scanf_float+0x138>
 8005dd4:	2b60      	cmp	r3, #96	@ 0x60
 8005dd6:	d8b1      	bhi.n	8005d3c <_scanf_float+0x8c>
 8005dd8:	2b54      	cmp	r3, #84	@ 0x54
 8005dda:	d07b      	beq.n	8005ed4 <_scanf_float+0x224>
 8005ddc:	2b59      	cmp	r3, #89	@ 0x59
 8005dde:	d19a      	bne.n	8005d16 <_scanf_float+0x66>
 8005de0:	2d07      	cmp	r5, #7
 8005de2:	d198      	bne.n	8005d16 <_scanf_float+0x66>
 8005de4:	2508      	movs	r5, #8
 8005de6:	e02f      	b.n	8005e48 <_scanf_float+0x198>
 8005de8:	2b74      	cmp	r3, #116	@ 0x74
 8005dea:	d073      	beq.n	8005ed4 <_scanf_float+0x224>
 8005dec:	2b79      	cmp	r3, #121	@ 0x79
 8005dee:	e7f6      	b.n	8005dde <_scanf_float+0x12e>
 8005df0:	6821      	ldr	r1, [r4, #0]
 8005df2:	05c8      	lsls	r0, r1, #23
 8005df4:	d51e      	bpl.n	8005e34 <_scanf_float+0x184>
 8005df6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005dfa:	6021      	str	r1, [r4, #0]
 8005dfc:	3701      	adds	r7, #1
 8005dfe:	f1bb 0f00 	cmp.w	fp, #0
 8005e02:	d003      	beq.n	8005e0c <_scanf_float+0x15c>
 8005e04:	3201      	adds	r2, #1
 8005e06:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e0a:	60a2      	str	r2, [r4, #8]
 8005e0c:	68a3      	ldr	r3, [r4, #8]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	60a3      	str	r3, [r4, #8]
 8005e12:	6923      	ldr	r3, [r4, #16]
 8005e14:	3301      	adds	r3, #1
 8005e16:	6123      	str	r3, [r4, #16]
 8005e18:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f8c9 3004 	str.w	r3, [r9, #4]
 8005e24:	f340 8082 	ble.w	8005f2c <_scanf_float+0x27c>
 8005e28:	f8d9 3000 	ldr.w	r3, [r9]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	f8c9 3000 	str.w	r3, [r9]
 8005e32:	e762      	b.n	8005cfa <_scanf_float+0x4a>
 8005e34:	eb1a 0105 	adds.w	r1, sl, r5
 8005e38:	f47f af6d 	bne.w	8005d16 <_scanf_float+0x66>
 8005e3c:	6822      	ldr	r2, [r4, #0]
 8005e3e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005e42:	6022      	str	r2, [r4, #0]
 8005e44:	460d      	mov	r5, r1
 8005e46:	468a      	mov	sl, r1
 8005e48:	f806 3b01 	strb.w	r3, [r6], #1
 8005e4c:	e7de      	b.n	8005e0c <_scanf_float+0x15c>
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	0610      	lsls	r0, r2, #24
 8005e52:	f57f af60 	bpl.w	8005d16 <_scanf_float+0x66>
 8005e56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e5a:	6022      	str	r2, [r4, #0]
 8005e5c:	e7f4      	b.n	8005e48 <_scanf_float+0x198>
 8005e5e:	f1ba 0f00 	cmp.w	sl, #0
 8005e62:	d10c      	bne.n	8005e7e <_scanf_float+0x1ce>
 8005e64:	b977      	cbnz	r7, 8005e84 <_scanf_float+0x1d4>
 8005e66:	6822      	ldr	r2, [r4, #0]
 8005e68:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005e6c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005e70:	d108      	bne.n	8005e84 <_scanf_float+0x1d4>
 8005e72:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e76:	6022      	str	r2, [r4, #0]
 8005e78:	f04f 0a01 	mov.w	sl, #1
 8005e7c:	e7e4      	b.n	8005e48 <_scanf_float+0x198>
 8005e7e:	f1ba 0f02 	cmp.w	sl, #2
 8005e82:	d050      	beq.n	8005f26 <_scanf_float+0x276>
 8005e84:	2d01      	cmp	r5, #1
 8005e86:	d002      	beq.n	8005e8e <_scanf_float+0x1de>
 8005e88:	2d04      	cmp	r5, #4
 8005e8a:	f47f af44 	bne.w	8005d16 <_scanf_float+0x66>
 8005e8e:	3501      	adds	r5, #1
 8005e90:	b2ed      	uxtb	r5, r5
 8005e92:	e7d9      	b.n	8005e48 <_scanf_float+0x198>
 8005e94:	f1ba 0f01 	cmp.w	sl, #1
 8005e98:	f47f af3d 	bne.w	8005d16 <_scanf_float+0x66>
 8005e9c:	f04f 0a02 	mov.w	sl, #2
 8005ea0:	e7d2      	b.n	8005e48 <_scanf_float+0x198>
 8005ea2:	b975      	cbnz	r5, 8005ec2 <_scanf_float+0x212>
 8005ea4:	2f00      	cmp	r7, #0
 8005ea6:	f47f af37 	bne.w	8005d18 <_scanf_float+0x68>
 8005eaa:	6822      	ldr	r2, [r4, #0]
 8005eac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005eb0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005eb4:	f040 80fe 	bne.w	80060b4 <_scanf_float+0x404>
 8005eb8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005ebc:	6022      	str	r2, [r4, #0]
 8005ebe:	2501      	movs	r5, #1
 8005ec0:	e7c2      	b.n	8005e48 <_scanf_float+0x198>
 8005ec2:	2d03      	cmp	r5, #3
 8005ec4:	d0e3      	beq.n	8005e8e <_scanf_float+0x1de>
 8005ec6:	2d05      	cmp	r5, #5
 8005ec8:	e7df      	b.n	8005e8a <_scanf_float+0x1da>
 8005eca:	2d02      	cmp	r5, #2
 8005ecc:	f47f af23 	bne.w	8005d16 <_scanf_float+0x66>
 8005ed0:	2503      	movs	r5, #3
 8005ed2:	e7b9      	b.n	8005e48 <_scanf_float+0x198>
 8005ed4:	2d06      	cmp	r5, #6
 8005ed6:	f47f af1e 	bne.w	8005d16 <_scanf_float+0x66>
 8005eda:	2507      	movs	r5, #7
 8005edc:	e7b4      	b.n	8005e48 <_scanf_float+0x198>
 8005ede:	6822      	ldr	r2, [r4, #0]
 8005ee0:	0591      	lsls	r1, r2, #22
 8005ee2:	f57f af18 	bpl.w	8005d16 <_scanf_float+0x66>
 8005ee6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005eea:	6022      	str	r2, [r4, #0]
 8005eec:	9702      	str	r7, [sp, #8]
 8005eee:	e7ab      	b.n	8005e48 <_scanf_float+0x198>
 8005ef0:	6822      	ldr	r2, [r4, #0]
 8005ef2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005ef6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005efa:	d005      	beq.n	8005f08 <_scanf_float+0x258>
 8005efc:	0550      	lsls	r0, r2, #21
 8005efe:	f57f af0a 	bpl.w	8005d16 <_scanf_float+0x66>
 8005f02:	2f00      	cmp	r7, #0
 8005f04:	f000 80d6 	beq.w	80060b4 <_scanf_float+0x404>
 8005f08:	0591      	lsls	r1, r2, #22
 8005f0a:	bf58      	it	pl
 8005f0c:	9902      	ldrpl	r1, [sp, #8]
 8005f0e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005f12:	bf58      	it	pl
 8005f14:	1a79      	subpl	r1, r7, r1
 8005f16:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005f1a:	bf58      	it	pl
 8005f1c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005f20:	6022      	str	r2, [r4, #0]
 8005f22:	2700      	movs	r7, #0
 8005f24:	e790      	b.n	8005e48 <_scanf_float+0x198>
 8005f26:	f04f 0a03 	mov.w	sl, #3
 8005f2a:	e78d      	b.n	8005e48 <_scanf_float+0x198>
 8005f2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005f30:	4649      	mov	r1, r9
 8005f32:	4640      	mov	r0, r8
 8005f34:	4798      	blx	r3
 8005f36:	2800      	cmp	r0, #0
 8005f38:	f43f aedf 	beq.w	8005cfa <_scanf_float+0x4a>
 8005f3c:	e6eb      	b.n	8005d16 <_scanf_float+0x66>
 8005f3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f46:	464a      	mov	r2, r9
 8005f48:	4640      	mov	r0, r8
 8005f4a:	4798      	blx	r3
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	6123      	str	r3, [r4, #16]
 8005f52:	e6eb      	b.n	8005d2c <_scanf_float+0x7c>
 8005f54:	1e6b      	subs	r3, r5, #1
 8005f56:	2b06      	cmp	r3, #6
 8005f58:	d824      	bhi.n	8005fa4 <_scanf_float+0x2f4>
 8005f5a:	2d02      	cmp	r5, #2
 8005f5c:	d836      	bhi.n	8005fcc <_scanf_float+0x31c>
 8005f5e:	9b01      	ldr	r3, [sp, #4]
 8005f60:	429e      	cmp	r6, r3
 8005f62:	f67f aee7 	bls.w	8005d34 <_scanf_float+0x84>
 8005f66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f6e:	464a      	mov	r2, r9
 8005f70:	4640      	mov	r0, r8
 8005f72:	4798      	blx	r3
 8005f74:	6923      	ldr	r3, [r4, #16]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	6123      	str	r3, [r4, #16]
 8005f7a:	e7f0      	b.n	8005f5e <_scanf_float+0x2ae>
 8005f7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f80:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005f84:	464a      	mov	r2, r9
 8005f86:	4640      	mov	r0, r8
 8005f88:	4798      	blx	r3
 8005f8a:	6923      	ldr	r3, [r4, #16]
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	6123      	str	r3, [r4, #16]
 8005f90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f94:	fa5f fa8a 	uxtb.w	sl, sl
 8005f98:	f1ba 0f02 	cmp.w	sl, #2
 8005f9c:	d1ee      	bne.n	8005f7c <_scanf_float+0x2cc>
 8005f9e:	3d03      	subs	r5, #3
 8005fa0:	b2ed      	uxtb	r5, r5
 8005fa2:	1b76      	subs	r6, r6, r5
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	05da      	lsls	r2, r3, #23
 8005fa8:	d530      	bpl.n	800600c <_scanf_float+0x35c>
 8005faa:	055b      	lsls	r3, r3, #21
 8005fac:	d511      	bpl.n	8005fd2 <_scanf_float+0x322>
 8005fae:	9b01      	ldr	r3, [sp, #4]
 8005fb0:	429e      	cmp	r6, r3
 8005fb2:	f67f aebf 	bls.w	8005d34 <_scanf_float+0x84>
 8005fb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005fba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fbe:	464a      	mov	r2, r9
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	4798      	blx	r3
 8005fc4:	6923      	ldr	r3, [r4, #16]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	6123      	str	r3, [r4, #16]
 8005fca:	e7f0      	b.n	8005fae <_scanf_float+0x2fe>
 8005fcc:	46aa      	mov	sl, r5
 8005fce:	46b3      	mov	fp, r6
 8005fd0:	e7de      	b.n	8005f90 <_scanf_float+0x2e0>
 8005fd2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	2965      	cmp	r1, #101	@ 0x65
 8005fda:	f103 33ff 	add.w	r3, r3, #4294967295
 8005fde:	f106 35ff 	add.w	r5, r6, #4294967295
 8005fe2:	6123      	str	r3, [r4, #16]
 8005fe4:	d00c      	beq.n	8006000 <_scanf_float+0x350>
 8005fe6:	2945      	cmp	r1, #69	@ 0x45
 8005fe8:	d00a      	beq.n	8006000 <_scanf_float+0x350>
 8005fea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005fee:	464a      	mov	r2, r9
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	4798      	blx	r3
 8005ff4:	6923      	ldr	r3, [r4, #16]
 8005ff6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	1eb5      	subs	r5, r6, #2
 8005ffe:	6123      	str	r3, [r4, #16]
 8006000:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006004:	464a      	mov	r2, r9
 8006006:	4640      	mov	r0, r8
 8006008:	4798      	blx	r3
 800600a:	462e      	mov	r6, r5
 800600c:	6822      	ldr	r2, [r4, #0]
 800600e:	f012 0210 	ands.w	r2, r2, #16
 8006012:	d001      	beq.n	8006018 <_scanf_float+0x368>
 8006014:	2000      	movs	r0, #0
 8006016:	e68e      	b.n	8005d36 <_scanf_float+0x86>
 8006018:	7032      	strb	r2, [r6, #0]
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006024:	d125      	bne.n	8006072 <_scanf_float+0x3c2>
 8006026:	9b02      	ldr	r3, [sp, #8]
 8006028:	429f      	cmp	r7, r3
 800602a:	d00a      	beq.n	8006042 <_scanf_float+0x392>
 800602c:	1bda      	subs	r2, r3, r7
 800602e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006032:	429e      	cmp	r6, r3
 8006034:	bf28      	it	cs
 8006036:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800603a:	491f      	ldr	r1, [pc, #124]	@ (80060b8 <_scanf_float+0x408>)
 800603c:	4630      	mov	r0, r6
 800603e:	f000 f937 	bl	80062b0 <siprintf>
 8006042:	2200      	movs	r2, #0
 8006044:	9901      	ldr	r1, [sp, #4]
 8006046:	4640      	mov	r0, r8
 8006048:	f002 fc12 	bl	8008870 <_strtod_r>
 800604c:	9b03      	ldr	r3, [sp, #12]
 800604e:	6825      	ldr	r5, [r4, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f015 0f02 	tst.w	r5, #2
 8006056:	4606      	mov	r6, r0
 8006058:	460f      	mov	r7, r1
 800605a:	f103 0204 	add.w	r2, r3, #4
 800605e:	d015      	beq.n	800608c <_scanf_float+0x3dc>
 8006060:	9903      	ldr	r1, [sp, #12]
 8006062:	600a      	str	r2, [r1, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	e9c3 6700 	strd	r6, r7, [r3]
 800606a:	68e3      	ldr	r3, [r4, #12]
 800606c:	3301      	adds	r3, #1
 800606e:	60e3      	str	r3, [r4, #12]
 8006070:	e7d0      	b.n	8006014 <_scanf_float+0x364>
 8006072:	9b04      	ldr	r3, [sp, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0e4      	beq.n	8006042 <_scanf_float+0x392>
 8006078:	9905      	ldr	r1, [sp, #20]
 800607a:	230a      	movs	r3, #10
 800607c:	3101      	adds	r1, #1
 800607e:	4640      	mov	r0, r8
 8006080:	f002 fc76 	bl	8008970 <_strtol_r>
 8006084:	9b04      	ldr	r3, [sp, #16]
 8006086:	9e05      	ldr	r6, [sp, #20]
 8006088:	1ac2      	subs	r2, r0, r3
 800608a:	e7d0      	b.n	800602e <_scanf_float+0x37e>
 800608c:	076d      	lsls	r5, r5, #29
 800608e:	d4e7      	bmi.n	8006060 <_scanf_float+0x3b0>
 8006090:	9d03      	ldr	r5, [sp, #12]
 8006092:	602a      	str	r2, [r5, #0]
 8006094:	681d      	ldr	r5, [r3, #0]
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	f7fa fd67 	bl	8000b6c <__aeabi_dcmpun>
 800609e:	b120      	cbz	r0, 80060aa <_scanf_float+0x3fa>
 80060a0:	4806      	ldr	r0, [pc, #24]	@ (80060bc <_scanf_float+0x40c>)
 80060a2:	f000 f9eb 	bl	800647c <nanf>
 80060a6:	6028      	str	r0, [r5, #0]
 80060a8:	e7df      	b.n	800606a <_scanf_float+0x3ba>
 80060aa:	4630      	mov	r0, r6
 80060ac:	4639      	mov	r1, r7
 80060ae:	f7fa fdbb 	bl	8000c28 <__aeabi_d2f>
 80060b2:	e7f8      	b.n	80060a6 <_scanf_float+0x3f6>
 80060b4:	2700      	movs	r7, #0
 80060b6:	e633      	b.n	8005d20 <_scanf_float+0x70>
 80060b8:	08009cf0 	.word	0x08009cf0
 80060bc:	08009e31 	.word	0x08009e31

080060c0 <std>:
 80060c0:	2300      	movs	r3, #0
 80060c2:	b510      	push	{r4, lr}
 80060c4:	4604      	mov	r4, r0
 80060c6:	e9c0 3300 	strd	r3, r3, [r0]
 80060ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ce:	6083      	str	r3, [r0, #8]
 80060d0:	8181      	strh	r1, [r0, #12]
 80060d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80060d4:	81c2      	strh	r2, [r0, #14]
 80060d6:	6183      	str	r3, [r0, #24]
 80060d8:	4619      	mov	r1, r3
 80060da:	2208      	movs	r2, #8
 80060dc:	305c      	adds	r0, #92	@ 0x5c
 80060de:	f000 f94c 	bl	800637a <memset>
 80060e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006118 <std+0x58>)
 80060e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80060e6:	4b0d      	ldr	r3, [pc, #52]	@ (800611c <std+0x5c>)
 80060e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80060ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006120 <std+0x60>)
 80060ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006124 <std+0x64>)
 80060f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80060f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006128 <std+0x68>)
 80060f4:	6224      	str	r4, [r4, #32]
 80060f6:	429c      	cmp	r4, r3
 80060f8:	d006      	beq.n	8006108 <std+0x48>
 80060fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060fe:	4294      	cmp	r4, r2
 8006100:	d002      	beq.n	8006108 <std+0x48>
 8006102:	33d0      	adds	r3, #208	@ 0xd0
 8006104:	429c      	cmp	r4, r3
 8006106:	d105      	bne.n	8006114 <std+0x54>
 8006108:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800610c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006110:	f000 b9b0 	b.w	8006474 <__retarget_lock_init_recursive>
 8006114:	bd10      	pop	{r4, pc}
 8006116:	bf00      	nop
 8006118:	080062f5 	.word	0x080062f5
 800611c:	08006317 	.word	0x08006317
 8006120:	0800634f 	.word	0x0800634f
 8006124:	08006373 	.word	0x08006373
 8006128:	200003a8 	.word	0x200003a8

0800612c <stdio_exit_handler>:
 800612c:	4a02      	ldr	r2, [pc, #8]	@ (8006138 <stdio_exit_handler+0xc>)
 800612e:	4903      	ldr	r1, [pc, #12]	@ (800613c <stdio_exit_handler+0x10>)
 8006130:	4803      	ldr	r0, [pc, #12]	@ (8006140 <stdio_exit_handler+0x14>)
 8006132:	f000 b869 	b.w	8006208 <_fwalk_sglue>
 8006136:	bf00      	nop
 8006138:	2000000c 	.word	0x2000000c
 800613c:	08008d2d 	.word	0x08008d2d
 8006140:	2000001c 	.word	0x2000001c

08006144 <cleanup_stdio>:
 8006144:	6841      	ldr	r1, [r0, #4]
 8006146:	4b0c      	ldr	r3, [pc, #48]	@ (8006178 <cleanup_stdio+0x34>)
 8006148:	4299      	cmp	r1, r3
 800614a:	b510      	push	{r4, lr}
 800614c:	4604      	mov	r4, r0
 800614e:	d001      	beq.n	8006154 <cleanup_stdio+0x10>
 8006150:	f002 fdec 	bl	8008d2c <_fflush_r>
 8006154:	68a1      	ldr	r1, [r4, #8]
 8006156:	4b09      	ldr	r3, [pc, #36]	@ (800617c <cleanup_stdio+0x38>)
 8006158:	4299      	cmp	r1, r3
 800615a:	d002      	beq.n	8006162 <cleanup_stdio+0x1e>
 800615c:	4620      	mov	r0, r4
 800615e:	f002 fde5 	bl	8008d2c <_fflush_r>
 8006162:	68e1      	ldr	r1, [r4, #12]
 8006164:	4b06      	ldr	r3, [pc, #24]	@ (8006180 <cleanup_stdio+0x3c>)
 8006166:	4299      	cmp	r1, r3
 8006168:	d004      	beq.n	8006174 <cleanup_stdio+0x30>
 800616a:	4620      	mov	r0, r4
 800616c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006170:	f002 bddc 	b.w	8008d2c <_fflush_r>
 8006174:	bd10      	pop	{r4, pc}
 8006176:	bf00      	nop
 8006178:	200003a8 	.word	0x200003a8
 800617c:	20000410 	.word	0x20000410
 8006180:	20000478 	.word	0x20000478

08006184 <global_stdio_init.part.0>:
 8006184:	b510      	push	{r4, lr}
 8006186:	4b0b      	ldr	r3, [pc, #44]	@ (80061b4 <global_stdio_init.part.0+0x30>)
 8006188:	4c0b      	ldr	r4, [pc, #44]	@ (80061b8 <global_stdio_init.part.0+0x34>)
 800618a:	4a0c      	ldr	r2, [pc, #48]	@ (80061bc <global_stdio_init.part.0+0x38>)
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	4620      	mov	r0, r4
 8006190:	2200      	movs	r2, #0
 8006192:	2104      	movs	r1, #4
 8006194:	f7ff ff94 	bl	80060c0 <std>
 8006198:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800619c:	2201      	movs	r2, #1
 800619e:	2109      	movs	r1, #9
 80061a0:	f7ff ff8e 	bl	80060c0 <std>
 80061a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80061a8:	2202      	movs	r2, #2
 80061aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ae:	2112      	movs	r1, #18
 80061b0:	f7ff bf86 	b.w	80060c0 <std>
 80061b4:	200004e0 	.word	0x200004e0
 80061b8:	200003a8 	.word	0x200003a8
 80061bc:	0800612d 	.word	0x0800612d

080061c0 <__sfp_lock_acquire>:
 80061c0:	4801      	ldr	r0, [pc, #4]	@ (80061c8 <__sfp_lock_acquire+0x8>)
 80061c2:	f000 b958 	b.w	8006476 <__retarget_lock_acquire_recursive>
 80061c6:	bf00      	nop
 80061c8:	200004e9 	.word	0x200004e9

080061cc <__sfp_lock_release>:
 80061cc:	4801      	ldr	r0, [pc, #4]	@ (80061d4 <__sfp_lock_release+0x8>)
 80061ce:	f000 b953 	b.w	8006478 <__retarget_lock_release_recursive>
 80061d2:	bf00      	nop
 80061d4:	200004e9 	.word	0x200004e9

080061d8 <__sinit>:
 80061d8:	b510      	push	{r4, lr}
 80061da:	4604      	mov	r4, r0
 80061dc:	f7ff fff0 	bl	80061c0 <__sfp_lock_acquire>
 80061e0:	6a23      	ldr	r3, [r4, #32]
 80061e2:	b11b      	cbz	r3, 80061ec <__sinit+0x14>
 80061e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061e8:	f7ff bff0 	b.w	80061cc <__sfp_lock_release>
 80061ec:	4b04      	ldr	r3, [pc, #16]	@ (8006200 <__sinit+0x28>)
 80061ee:	6223      	str	r3, [r4, #32]
 80061f0:	4b04      	ldr	r3, [pc, #16]	@ (8006204 <__sinit+0x2c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f5      	bne.n	80061e4 <__sinit+0xc>
 80061f8:	f7ff ffc4 	bl	8006184 <global_stdio_init.part.0>
 80061fc:	e7f2      	b.n	80061e4 <__sinit+0xc>
 80061fe:	bf00      	nop
 8006200:	08006145 	.word	0x08006145
 8006204:	200004e0 	.word	0x200004e0

08006208 <_fwalk_sglue>:
 8006208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800620c:	4607      	mov	r7, r0
 800620e:	4688      	mov	r8, r1
 8006210:	4614      	mov	r4, r2
 8006212:	2600      	movs	r6, #0
 8006214:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006218:	f1b9 0901 	subs.w	r9, r9, #1
 800621c:	d505      	bpl.n	800622a <_fwalk_sglue+0x22>
 800621e:	6824      	ldr	r4, [r4, #0]
 8006220:	2c00      	cmp	r4, #0
 8006222:	d1f7      	bne.n	8006214 <_fwalk_sglue+0xc>
 8006224:	4630      	mov	r0, r6
 8006226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800622a:	89ab      	ldrh	r3, [r5, #12]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d907      	bls.n	8006240 <_fwalk_sglue+0x38>
 8006230:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006234:	3301      	adds	r3, #1
 8006236:	d003      	beq.n	8006240 <_fwalk_sglue+0x38>
 8006238:	4629      	mov	r1, r5
 800623a:	4638      	mov	r0, r7
 800623c:	47c0      	blx	r8
 800623e:	4306      	orrs	r6, r0
 8006240:	3568      	adds	r5, #104	@ 0x68
 8006242:	e7e9      	b.n	8006218 <_fwalk_sglue+0x10>

08006244 <sniprintf>:
 8006244:	b40c      	push	{r2, r3}
 8006246:	b530      	push	{r4, r5, lr}
 8006248:	4b18      	ldr	r3, [pc, #96]	@ (80062ac <sniprintf+0x68>)
 800624a:	1e0c      	subs	r4, r1, #0
 800624c:	681d      	ldr	r5, [r3, #0]
 800624e:	b09d      	sub	sp, #116	@ 0x74
 8006250:	da08      	bge.n	8006264 <sniprintf+0x20>
 8006252:	238b      	movs	r3, #139	@ 0x8b
 8006254:	602b      	str	r3, [r5, #0]
 8006256:	f04f 30ff 	mov.w	r0, #4294967295
 800625a:	b01d      	add	sp, #116	@ 0x74
 800625c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006260:	b002      	add	sp, #8
 8006262:	4770      	bx	lr
 8006264:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006268:	f8ad 3014 	strh.w	r3, [sp, #20]
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006272:	bf14      	ite	ne
 8006274:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006278:	4623      	moveq	r3, r4
 800627a:	9304      	str	r3, [sp, #16]
 800627c:	9307      	str	r3, [sp, #28]
 800627e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006282:	9002      	str	r0, [sp, #8]
 8006284:	9006      	str	r0, [sp, #24]
 8006286:	f8ad 3016 	strh.w	r3, [sp, #22]
 800628a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800628c:	ab21      	add	r3, sp, #132	@ 0x84
 800628e:	a902      	add	r1, sp, #8
 8006290:	4628      	mov	r0, r5
 8006292:	9301      	str	r3, [sp, #4]
 8006294:	f002 fbca 	bl	8008a2c <_svfiprintf_r>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	bfbc      	itt	lt
 800629c:	238b      	movlt	r3, #139	@ 0x8b
 800629e:	602b      	strlt	r3, [r5, #0]
 80062a0:	2c00      	cmp	r4, #0
 80062a2:	d0da      	beq.n	800625a <sniprintf+0x16>
 80062a4:	9b02      	ldr	r3, [sp, #8]
 80062a6:	2200      	movs	r2, #0
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	e7d6      	b.n	800625a <sniprintf+0x16>
 80062ac:	20000018 	.word	0x20000018

080062b0 <siprintf>:
 80062b0:	b40e      	push	{r1, r2, r3}
 80062b2:	b510      	push	{r4, lr}
 80062b4:	b09d      	sub	sp, #116	@ 0x74
 80062b6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80062b8:	9002      	str	r0, [sp, #8]
 80062ba:	9006      	str	r0, [sp, #24]
 80062bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80062c0:	480a      	ldr	r0, [pc, #40]	@ (80062ec <siprintf+0x3c>)
 80062c2:	9107      	str	r1, [sp, #28]
 80062c4:	9104      	str	r1, [sp, #16]
 80062c6:	490a      	ldr	r1, [pc, #40]	@ (80062f0 <siprintf+0x40>)
 80062c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80062cc:	9105      	str	r1, [sp, #20]
 80062ce:	2400      	movs	r4, #0
 80062d0:	a902      	add	r1, sp, #8
 80062d2:	6800      	ldr	r0, [r0, #0]
 80062d4:	9301      	str	r3, [sp, #4]
 80062d6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80062d8:	f002 fba8 	bl	8008a2c <_svfiprintf_r>
 80062dc:	9b02      	ldr	r3, [sp, #8]
 80062de:	701c      	strb	r4, [r3, #0]
 80062e0:	b01d      	add	sp, #116	@ 0x74
 80062e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062e6:	b003      	add	sp, #12
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	20000018 	.word	0x20000018
 80062f0:	ffff0208 	.word	0xffff0208

080062f4 <__sread>:
 80062f4:	b510      	push	{r4, lr}
 80062f6:	460c      	mov	r4, r1
 80062f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062fc:	f000 f86c 	bl	80063d8 <_read_r>
 8006300:	2800      	cmp	r0, #0
 8006302:	bfab      	itete	ge
 8006304:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006306:	89a3      	ldrhlt	r3, [r4, #12]
 8006308:	181b      	addge	r3, r3, r0
 800630a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800630e:	bfac      	ite	ge
 8006310:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006312:	81a3      	strhlt	r3, [r4, #12]
 8006314:	bd10      	pop	{r4, pc}

08006316 <__swrite>:
 8006316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631a:	461f      	mov	r7, r3
 800631c:	898b      	ldrh	r3, [r1, #12]
 800631e:	05db      	lsls	r3, r3, #23
 8006320:	4605      	mov	r5, r0
 8006322:	460c      	mov	r4, r1
 8006324:	4616      	mov	r6, r2
 8006326:	d505      	bpl.n	8006334 <__swrite+0x1e>
 8006328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800632c:	2302      	movs	r3, #2
 800632e:	2200      	movs	r2, #0
 8006330:	f000 f840 	bl	80063b4 <_lseek_r>
 8006334:	89a3      	ldrh	r3, [r4, #12]
 8006336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800633a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800633e:	81a3      	strh	r3, [r4, #12]
 8006340:	4632      	mov	r2, r6
 8006342:	463b      	mov	r3, r7
 8006344:	4628      	mov	r0, r5
 8006346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800634a:	f000 b857 	b.w	80063fc <_write_r>

0800634e <__sseek>:
 800634e:	b510      	push	{r4, lr}
 8006350:	460c      	mov	r4, r1
 8006352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006356:	f000 f82d 	bl	80063b4 <_lseek_r>
 800635a:	1c43      	adds	r3, r0, #1
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	bf15      	itete	ne
 8006360:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006362:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006366:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800636a:	81a3      	strheq	r3, [r4, #12]
 800636c:	bf18      	it	ne
 800636e:	81a3      	strhne	r3, [r4, #12]
 8006370:	bd10      	pop	{r4, pc}

08006372 <__sclose>:
 8006372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006376:	f000 b80d 	b.w	8006394 <_close_r>

0800637a <memset>:
 800637a:	4402      	add	r2, r0
 800637c:	4603      	mov	r3, r0
 800637e:	4293      	cmp	r3, r2
 8006380:	d100      	bne.n	8006384 <memset+0xa>
 8006382:	4770      	bx	lr
 8006384:	f803 1b01 	strb.w	r1, [r3], #1
 8006388:	e7f9      	b.n	800637e <memset+0x4>
	...

0800638c <_localeconv_r>:
 800638c:	4800      	ldr	r0, [pc, #0]	@ (8006390 <_localeconv_r+0x4>)
 800638e:	4770      	bx	lr
 8006390:	20000158 	.word	0x20000158

08006394 <_close_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4d06      	ldr	r5, [pc, #24]	@ (80063b0 <_close_r+0x1c>)
 8006398:	2300      	movs	r3, #0
 800639a:	4604      	mov	r4, r0
 800639c:	4608      	mov	r0, r1
 800639e:	602b      	str	r3, [r5, #0]
 80063a0:	f7fb ff4c 	bl	800223c <_close>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d102      	bne.n	80063ae <_close_r+0x1a>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	b103      	cbz	r3, 80063ae <_close_r+0x1a>
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	bd38      	pop	{r3, r4, r5, pc}
 80063b0:	200004e4 	.word	0x200004e4

080063b4 <_lseek_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4d07      	ldr	r5, [pc, #28]	@ (80063d4 <_lseek_r+0x20>)
 80063b8:	4604      	mov	r4, r0
 80063ba:	4608      	mov	r0, r1
 80063bc:	4611      	mov	r1, r2
 80063be:	2200      	movs	r2, #0
 80063c0:	602a      	str	r2, [r5, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	f7fb ff61 	bl	800228a <_lseek>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d102      	bne.n	80063d2 <_lseek_r+0x1e>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	b103      	cbz	r3, 80063d2 <_lseek_r+0x1e>
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	200004e4 	.word	0x200004e4

080063d8 <_read_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4d07      	ldr	r5, [pc, #28]	@ (80063f8 <_read_r+0x20>)
 80063dc:	4604      	mov	r4, r0
 80063de:	4608      	mov	r0, r1
 80063e0:	4611      	mov	r1, r2
 80063e2:	2200      	movs	r2, #0
 80063e4:	602a      	str	r2, [r5, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	f7fb ff0b 	bl	8002202 <_read>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d102      	bne.n	80063f6 <_read_r+0x1e>
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	b103      	cbz	r3, 80063f6 <_read_r+0x1e>
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	200004e4 	.word	0x200004e4

080063fc <_write_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4d07      	ldr	r5, [pc, #28]	@ (800641c <_write_r+0x20>)
 8006400:	4604      	mov	r4, r0
 8006402:	4608      	mov	r0, r1
 8006404:	4611      	mov	r1, r2
 8006406:	2200      	movs	r2, #0
 8006408:	602a      	str	r2, [r5, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	f7fb f906 	bl	800161c <_write>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d102      	bne.n	800641a <_write_r+0x1e>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	b103      	cbz	r3, 800641a <_write_r+0x1e>
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	200004e4 	.word	0x200004e4

08006420 <__errno>:
 8006420:	4b01      	ldr	r3, [pc, #4]	@ (8006428 <__errno+0x8>)
 8006422:	6818      	ldr	r0, [r3, #0]
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	20000018 	.word	0x20000018

0800642c <__libc_init_array>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	4d0d      	ldr	r5, [pc, #52]	@ (8006464 <__libc_init_array+0x38>)
 8006430:	4c0d      	ldr	r4, [pc, #52]	@ (8006468 <__libc_init_array+0x3c>)
 8006432:	1b64      	subs	r4, r4, r5
 8006434:	10a4      	asrs	r4, r4, #2
 8006436:	2600      	movs	r6, #0
 8006438:	42a6      	cmp	r6, r4
 800643a:	d109      	bne.n	8006450 <__libc_init_array+0x24>
 800643c:	4d0b      	ldr	r5, [pc, #44]	@ (800646c <__libc_init_array+0x40>)
 800643e:	4c0c      	ldr	r4, [pc, #48]	@ (8006470 <__libc_init_array+0x44>)
 8006440:	f003 fb62 	bl	8009b08 <_init>
 8006444:	1b64      	subs	r4, r4, r5
 8006446:	10a4      	asrs	r4, r4, #2
 8006448:	2600      	movs	r6, #0
 800644a:	42a6      	cmp	r6, r4
 800644c:	d105      	bne.n	800645a <__libc_init_array+0x2e>
 800644e:	bd70      	pop	{r4, r5, r6, pc}
 8006450:	f855 3b04 	ldr.w	r3, [r5], #4
 8006454:	4798      	blx	r3
 8006456:	3601      	adds	r6, #1
 8006458:	e7ee      	b.n	8006438 <__libc_init_array+0xc>
 800645a:	f855 3b04 	ldr.w	r3, [r5], #4
 800645e:	4798      	blx	r3
 8006460:	3601      	adds	r6, #1
 8006462:	e7f2      	b.n	800644a <__libc_init_array+0x1e>
 8006464:	0800a0ec 	.word	0x0800a0ec
 8006468:	0800a0ec 	.word	0x0800a0ec
 800646c:	0800a0ec 	.word	0x0800a0ec
 8006470:	0800a0f0 	.word	0x0800a0f0

08006474 <__retarget_lock_init_recursive>:
 8006474:	4770      	bx	lr

08006476 <__retarget_lock_acquire_recursive>:
 8006476:	4770      	bx	lr

08006478 <__retarget_lock_release_recursive>:
 8006478:	4770      	bx	lr
	...

0800647c <nanf>:
 800647c:	4800      	ldr	r0, [pc, #0]	@ (8006480 <nanf+0x4>)
 800647e:	4770      	bx	lr
 8006480:	7fc00000 	.word	0x7fc00000

08006484 <quorem>:
 8006484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006488:	6903      	ldr	r3, [r0, #16]
 800648a:	690c      	ldr	r4, [r1, #16]
 800648c:	42a3      	cmp	r3, r4
 800648e:	4607      	mov	r7, r0
 8006490:	db7e      	blt.n	8006590 <quorem+0x10c>
 8006492:	3c01      	subs	r4, #1
 8006494:	f101 0814 	add.w	r8, r1, #20
 8006498:	00a3      	lsls	r3, r4, #2
 800649a:	f100 0514 	add.w	r5, r0, #20
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064a4:	9301      	str	r3, [sp, #4]
 80064a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064ae:	3301      	adds	r3, #1
 80064b0:	429a      	cmp	r2, r3
 80064b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80064ba:	d32e      	bcc.n	800651a <quorem+0x96>
 80064bc:	f04f 0a00 	mov.w	sl, #0
 80064c0:	46c4      	mov	ip, r8
 80064c2:	46ae      	mov	lr, r5
 80064c4:	46d3      	mov	fp, sl
 80064c6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80064ca:	b298      	uxth	r0, r3
 80064cc:	fb06 a000 	mla	r0, r6, r0, sl
 80064d0:	0c02      	lsrs	r2, r0, #16
 80064d2:	0c1b      	lsrs	r3, r3, #16
 80064d4:	fb06 2303 	mla	r3, r6, r3, r2
 80064d8:	f8de 2000 	ldr.w	r2, [lr]
 80064dc:	b280      	uxth	r0, r0
 80064de:	b292      	uxth	r2, r2
 80064e0:	1a12      	subs	r2, r2, r0
 80064e2:	445a      	add	r2, fp
 80064e4:	f8de 0000 	ldr.w	r0, [lr]
 80064e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80064f2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80064f6:	b292      	uxth	r2, r2
 80064f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80064fc:	45e1      	cmp	r9, ip
 80064fe:	f84e 2b04 	str.w	r2, [lr], #4
 8006502:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006506:	d2de      	bcs.n	80064c6 <quorem+0x42>
 8006508:	9b00      	ldr	r3, [sp, #0]
 800650a:	58eb      	ldr	r3, [r5, r3]
 800650c:	b92b      	cbnz	r3, 800651a <quorem+0x96>
 800650e:	9b01      	ldr	r3, [sp, #4]
 8006510:	3b04      	subs	r3, #4
 8006512:	429d      	cmp	r5, r3
 8006514:	461a      	mov	r2, r3
 8006516:	d32f      	bcc.n	8006578 <quorem+0xf4>
 8006518:	613c      	str	r4, [r7, #16]
 800651a:	4638      	mov	r0, r7
 800651c:	f001 f9c8 	bl	80078b0 <__mcmp>
 8006520:	2800      	cmp	r0, #0
 8006522:	db25      	blt.n	8006570 <quorem+0xec>
 8006524:	4629      	mov	r1, r5
 8006526:	2000      	movs	r0, #0
 8006528:	f858 2b04 	ldr.w	r2, [r8], #4
 800652c:	f8d1 c000 	ldr.w	ip, [r1]
 8006530:	fa1f fe82 	uxth.w	lr, r2
 8006534:	fa1f f38c 	uxth.w	r3, ip
 8006538:	eba3 030e 	sub.w	r3, r3, lr
 800653c:	4403      	add	r3, r0
 800653e:	0c12      	lsrs	r2, r2, #16
 8006540:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006544:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006548:	b29b      	uxth	r3, r3
 800654a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800654e:	45c1      	cmp	r9, r8
 8006550:	f841 3b04 	str.w	r3, [r1], #4
 8006554:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006558:	d2e6      	bcs.n	8006528 <quorem+0xa4>
 800655a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800655e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006562:	b922      	cbnz	r2, 800656e <quorem+0xea>
 8006564:	3b04      	subs	r3, #4
 8006566:	429d      	cmp	r5, r3
 8006568:	461a      	mov	r2, r3
 800656a:	d30b      	bcc.n	8006584 <quorem+0x100>
 800656c:	613c      	str	r4, [r7, #16]
 800656e:	3601      	adds	r6, #1
 8006570:	4630      	mov	r0, r6
 8006572:	b003      	add	sp, #12
 8006574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	3b04      	subs	r3, #4
 800657c:	2a00      	cmp	r2, #0
 800657e:	d1cb      	bne.n	8006518 <quorem+0x94>
 8006580:	3c01      	subs	r4, #1
 8006582:	e7c6      	b.n	8006512 <quorem+0x8e>
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	3b04      	subs	r3, #4
 8006588:	2a00      	cmp	r2, #0
 800658a:	d1ef      	bne.n	800656c <quorem+0xe8>
 800658c:	3c01      	subs	r4, #1
 800658e:	e7ea      	b.n	8006566 <quorem+0xe2>
 8006590:	2000      	movs	r0, #0
 8006592:	e7ee      	b.n	8006572 <quorem+0xee>
 8006594:	0000      	movs	r0, r0
	...

08006598 <_dtoa_r>:
 8006598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659c:	69c7      	ldr	r7, [r0, #28]
 800659e:	b097      	sub	sp, #92	@ 0x5c
 80065a0:	4614      	mov	r4, r2
 80065a2:	461d      	mov	r5, r3
 80065a4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80065a8:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80065aa:	4681      	mov	r9, r0
 80065ac:	b97f      	cbnz	r7, 80065ce <_dtoa_r+0x36>
 80065ae:	2010      	movs	r0, #16
 80065b0:	f000 fe0c 	bl	80071cc <malloc>
 80065b4:	4602      	mov	r2, r0
 80065b6:	f8c9 001c 	str.w	r0, [r9, #28]
 80065ba:	b920      	cbnz	r0, 80065c6 <_dtoa_r+0x2e>
 80065bc:	4baa      	ldr	r3, [pc, #680]	@ (8006868 <_dtoa_r+0x2d0>)
 80065be:	21ef      	movs	r1, #239	@ 0xef
 80065c0:	48aa      	ldr	r0, [pc, #680]	@ (800686c <_dtoa_r+0x2d4>)
 80065c2:	f002 fc2b 	bl	8008e1c <__assert_func>
 80065c6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80065ca:	6007      	str	r7, [r0, #0]
 80065cc:	60c7      	str	r7, [r0, #12]
 80065ce:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80065d2:	6819      	ldr	r1, [r3, #0]
 80065d4:	b159      	cbz	r1, 80065ee <_dtoa_r+0x56>
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	604a      	str	r2, [r1, #4]
 80065da:	2301      	movs	r3, #1
 80065dc:	4093      	lsls	r3, r2
 80065de:	608b      	str	r3, [r1, #8]
 80065e0:	4648      	mov	r0, r9
 80065e2:	f000 fee9 	bl	80073b8 <_Bfree>
 80065e6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	1e2b      	subs	r3, r5, #0
 80065f0:	bfb9      	ittee	lt
 80065f2:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80065f6:	9307      	strlt	r3, [sp, #28]
 80065f8:	2300      	movge	r3, #0
 80065fa:	6033      	strge	r3, [r6, #0]
 80065fc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006600:	4b9b      	ldr	r3, [pc, #620]	@ (8006870 <_dtoa_r+0x2d8>)
 8006602:	bfbc      	itt	lt
 8006604:	2201      	movlt	r2, #1
 8006606:	6032      	strlt	r2, [r6, #0]
 8006608:	ea33 0308 	bics.w	r3, r3, r8
 800660c:	d112      	bne.n	8006634 <_dtoa_r+0x9c>
 800660e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006610:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800661a:	4323      	orrs	r3, r4
 800661c:	f000 855b 	beq.w	80070d6 <_dtoa_r+0xb3e>
 8006620:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006622:	f8df a260 	ldr.w	sl, [pc, #608]	@ 8006884 <_dtoa_r+0x2ec>
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 855d 	beq.w	80070e6 <_dtoa_r+0xb4e>
 800662c:	f10a 0303 	add.w	r3, sl, #3
 8006630:	f000 bd57 	b.w	80070e2 <_dtoa_r+0xb4a>
 8006634:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006638:	2200      	movs	r2, #0
 800663a:	ec51 0b17 	vmov	r0, r1, d7
 800663e:	2300      	movs	r3, #0
 8006640:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006644:	f7fa fa60 	bl	8000b08 <__aeabi_dcmpeq>
 8006648:	4607      	mov	r7, r0
 800664a:	b158      	cbz	r0, 8006664 <_dtoa_r+0xcc>
 800664c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800664e:	2301      	movs	r3, #1
 8006650:	6013      	str	r3, [r2, #0]
 8006652:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006654:	b113      	cbz	r3, 800665c <_dtoa_r+0xc4>
 8006656:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006658:	4b86      	ldr	r3, [pc, #536]	@ (8006874 <_dtoa_r+0x2dc>)
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006888 <_dtoa_r+0x2f0>
 8006660:	f000 bd41 	b.w	80070e6 <_dtoa_r+0xb4e>
 8006664:	ab14      	add	r3, sp, #80	@ 0x50
 8006666:	9301      	str	r3, [sp, #4]
 8006668:	ab15      	add	r3, sp, #84	@ 0x54
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	4648      	mov	r0, r9
 800666e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006672:	f001 fa37 	bl	8007ae4 <__d2b>
 8006676:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800667a:	9003      	str	r0, [sp, #12]
 800667c:	2e00      	cmp	r6, #0
 800667e:	d077      	beq.n	8006770 <_dtoa_r+0x1d8>
 8006680:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006682:	9712      	str	r7, [sp, #72]	@ 0x48
 8006684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800668c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006690:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006694:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006698:	4619      	mov	r1, r3
 800669a:	2200      	movs	r2, #0
 800669c:	4b76      	ldr	r3, [pc, #472]	@ (8006878 <_dtoa_r+0x2e0>)
 800669e:	f7f9 fe13 	bl	80002c8 <__aeabi_dsub>
 80066a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8006850 <_dtoa_r+0x2b8>)
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	f7f9 ffc6 	bl	8000638 <__aeabi_dmul>
 80066ac:	a36a      	add	r3, pc, #424	@ (adr r3, 8006858 <_dtoa_r+0x2c0>)
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f7f9 fe0b 	bl	80002cc <__adddf3>
 80066b6:	4604      	mov	r4, r0
 80066b8:	4630      	mov	r0, r6
 80066ba:	460d      	mov	r5, r1
 80066bc:	f7f9 ff52 	bl	8000564 <__aeabi_i2d>
 80066c0:	a367      	add	r3, pc, #412	@ (adr r3, 8006860 <_dtoa_r+0x2c8>)
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f7f9 ffb7 	bl	8000638 <__aeabi_dmul>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4620      	mov	r0, r4
 80066d0:	4629      	mov	r1, r5
 80066d2:	f7f9 fdfb 	bl	80002cc <__adddf3>
 80066d6:	4604      	mov	r4, r0
 80066d8:	460d      	mov	r5, r1
 80066da:	f7fa fa5d 	bl	8000b98 <__aeabi_d2iz>
 80066de:	2200      	movs	r2, #0
 80066e0:	4607      	mov	r7, r0
 80066e2:	2300      	movs	r3, #0
 80066e4:	4620      	mov	r0, r4
 80066e6:	4629      	mov	r1, r5
 80066e8:	f7fa fa18 	bl	8000b1c <__aeabi_dcmplt>
 80066ec:	b140      	cbz	r0, 8006700 <_dtoa_r+0x168>
 80066ee:	4638      	mov	r0, r7
 80066f0:	f7f9 ff38 	bl	8000564 <__aeabi_i2d>
 80066f4:	4622      	mov	r2, r4
 80066f6:	462b      	mov	r3, r5
 80066f8:	f7fa fa06 	bl	8000b08 <__aeabi_dcmpeq>
 80066fc:	b900      	cbnz	r0, 8006700 <_dtoa_r+0x168>
 80066fe:	3f01      	subs	r7, #1
 8006700:	2f16      	cmp	r7, #22
 8006702:	d853      	bhi.n	80067ac <_dtoa_r+0x214>
 8006704:	4b5d      	ldr	r3, [pc, #372]	@ (800687c <_dtoa_r+0x2e4>)
 8006706:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006712:	f7fa fa03 	bl	8000b1c <__aeabi_dcmplt>
 8006716:	2800      	cmp	r0, #0
 8006718:	d04a      	beq.n	80067b0 <_dtoa_r+0x218>
 800671a:	3f01      	subs	r7, #1
 800671c:	2300      	movs	r3, #0
 800671e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006720:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006722:	1b9b      	subs	r3, r3, r6
 8006724:	1e5a      	subs	r2, r3, #1
 8006726:	bf45      	ittet	mi
 8006728:	f1c3 0301 	rsbmi	r3, r3, #1
 800672c:	9304      	strmi	r3, [sp, #16]
 800672e:	2300      	movpl	r3, #0
 8006730:	2300      	movmi	r3, #0
 8006732:	9209      	str	r2, [sp, #36]	@ 0x24
 8006734:	bf54      	ite	pl
 8006736:	9304      	strpl	r3, [sp, #16]
 8006738:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800673a:	2f00      	cmp	r7, #0
 800673c:	db3a      	blt.n	80067b4 <_dtoa_r+0x21c>
 800673e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006740:	970e      	str	r7, [sp, #56]	@ 0x38
 8006742:	443b      	add	r3, r7
 8006744:	9309      	str	r3, [sp, #36]	@ 0x24
 8006746:	2300      	movs	r3, #0
 8006748:	930a      	str	r3, [sp, #40]	@ 0x28
 800674a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800674c:	2b09      	cmp	r3, #9
 800674e:	d864      	bhi.n	800681a <_dtoa_r+0x282>
 8006750:	2b05      	cmp	r3, #5
 8006752:	bfc4      	itt	gt
 8006754:	3b04      	subgt	r3, #4
 8006756:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006758:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800675a:	f1a3 0302 	sub.w	r3, r3, #2
 800675e:	bfcc      	ite	gt
 8006760:	2400      	movgt	r4, #0
 8006762:	2401      	movle	r4, #1
 8006764:	2b03      	cmp	r3, #3
 8006766:	d864      	bhi.n	8006832 <_dtoa_r+0x29a>
 8006768:	e8df f003 	tbb	[pc, r3]
 800676c:	2c385553 	.word	0x2c385553
 8006770:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006774:	441e      	add	r6, r3
 8006776:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800677a:	2b20      	cmp	r3, #32
 800677c:	bfc1      	itttt	gt
 800677e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006782:	fa08 f803 	lslgt.w	r8, r8, r3
 8006786:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800678a:	fa24 f303 	lsrgt.w	r3, r4, r3
 800678e:	bfd6      	itet	le
 8006790:	f1c3 0320 	rsble	r3, r3, #32
 8006794:	ea48 0003 	orrgt.w	r0, r8, r3
 8006798:	fa04 f003 	lslle.w	r0, r4, r3
 800679c:	f7f9 fed2 	bl	8000544 <__aeabi_ui2d>
 80067a0:	2201      	movs	r2, #1
 80067a2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80067a6:	3e01      	subs	r6, #1
 80067a8:	9212      	str	r2, [sp, #72]	@ 0x48
 80067aa:	e775      	b.n	8006698 <_dtoa_r+0x100>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e7b6      	b.n	800671e <_dtoa_r+0x186>
 80067b0:	900f      	str	r0, [sp, #60]	@ 0x3c
 80067b2:	e7b5      	b.n	8006720 <_dtoa_r+0x188>
 80067b4:	9b04      	ldr	r3, [sp, #16]
 80067b6:	1bdb      	subs	r3, r3, r7
 80067b8:	9304      	str	r3, [sp, #16]
 80067ba:	427b      	negs	r3, r7
 80067bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80067be:	2300      	movs	r3, #0
 80067c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80067c2:	e7c2      	b.n	800674a <_dtoa_r+0x1b2>
 80067c4:	2301      	movs	r3, #1
 80067c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067ca:	eb07 0b03 	add.w	fp, r7, r3
 80067ce:	f10b 0301 	add.w	r3, fp, #1
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	9308      	str	r3, [sp, #32]
 80067d6:	bfb8      	it	lt
 80067d8:	2301      	movlt	r3, #1
 80067da:	e006      	b.n	80067ea <_dtoa_r+0x252>
 80067dc:	2301      	movs	r3, #1
 80067de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	dd28      	ble.n	8006838 <_dtoa_r+0x2a0>
 80067e6:	469b      	mov	fp, r3
 80067e8:	9308      	str	r3, [sp, #32]
 80067ea:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80067ee:	2100      	movs	r1, #0
 80067f0:	2204      	movs	r2, #4
 80067f2:	f102 0514 	add.w	r5, r2, #20
 80067f6:	429d      	cmp	r5, r3
 80067f8:	d926      	bls.n	8006848 <_dtoa_r+0x2b0>
 80067fa:	6041      	str	r1, [r0, #4]
 80067fc:	4648      	mov	r0, r9
 80067fe:	f000 fd9b 	bl	8007338 <_Balloc>
 8006802:	4682      	mov	sl, r0
 8006804:	2800      	cmp	r0, #0
 8006806:	d141      	bne.n	800688c <_dtoa_r+0x2f4>
 8006808:	4b1d      	ldr	r3, [pc, #116]	@ (8006880 <_dtoa_r+0x2e8>)
 800680a:	4602      	mov	r2, r0
 800680c:	f240 11af 	movw	r1, #431	@ 0x1af
 8006810:	e6d6      	b.n	80065c0 <_dtoa_r+0x28>
 8006812:	2300      	movs	r3, #0
 8006814:	e7e3      	b.n	80067de <_dtoa_r+0x246>
 8006816:	2300      	movs	r3, #0
 8006818:	e7d5      	b.n	80067c6 <_dtoa_r+0x22e>
 800681a:	2401      	movs	r4, #1
 800681c:	2300      	movs	r3, #0
 800681e:	9320      	str	r3, [sp, #128]	@ 0x80
 8006820:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006822:	f04f 3bff 	mov.w	fp, #4294967295
 8006826:	2200      	movs	r2, #0
 8006828:	f8cd b020 	str.w	fp, [sp, #32]
 800682c:	2312      	movs	r3, #18
 800682e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006830:	e7db      	b.n	80067ea <_dtoa_r+0x252>
 8006832:	2301      	movs	r3, #1
 8006834:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006836:	e7f4      	b.n	8006822 <_dtoa_r+0x28a>
 8006838:	f04f 0b01 	mov.w	fp, #1
 800683c:	f8cd b020 	str.w	fp, [sp, #32]
 8006840:	465b      	mov	r3, fp
 8006842:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006846:	e7d0      	b.n	80067ea <_dtoa_r+0x252>
 8006848:	3101      	adds	r1, #1
 800684a:	0052      	lsls	r2, r2, #1
 800684c:	e7d1      	b.n	80067f2 <_dtoa_r+0x25a>
 800684e:	bf00      	nop
 8006850:	636f4361 	.word	0x636f4361
 8006854:	3fd287a7 	.word	0x3fd287a7
 8006858:	8b60c8b3 	.word	0x8b60c8b3
 800685c:	3fc68a28 	.word	0x3fc68a28
 8006860:	509f79fb 	.word	0x509f79fb
 8006864:	3fd34413 	.word	0x3fd34413
 8006868:	08009d02 	.word	0x08009d02
 800686c:	08009d19 	.word	0x08009d19
 8006870:	7ff00000 	.word	0x7ff00000
 8006874:	08009ccd 	.word	0x08009ccd
 8006878:	3ff80000 	.word	0x3ff80000
 800687c:	08009ec8 	.word	0x08009ec8
 8006880:	08009d71 	.word	0x08009d71
 8006884:	08009cfe 	.word	0x08009cfe
 8006888:	08009ccc 	.word	0x08009ccc
 800688c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006890:	6018      	str	r0, [r3, #0]
 8006892:	9b08      	ldr	r3, [sp, #32]
 8006894:	2b0e      	cmp	r3, #14
 8006896:	f200 80a1 	bhi.w	80069dc <_dtoa_r+0x444>
 800689a:	2c00      	cmp	r4, #0
 800689c:	f000 809e 	beq.w	80069dc <_dtoa_r+0x444>
 80068a0:	2f00      	cmp	r7, #0
 80068a2:	dd33      	ble.n	800690c <_dtoa_r+0x374>
 80068a4:	4b9c      	ldr	r3, [pc, #624]	@ (8006b18 <_dtoa_r+0x580>)
 80068a6:	f007 020f 	and.w	r2, r7, #15
 80068aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068ae:	ed93 7b00 	vldr	d7, [r3]
 80068b2:	05f8      	lsls	r0, r7, #23
 80068b4:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 80068b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80068bc:	d516      	bpl.n	80068ec <_dtoa_r+0x354>
 80068be:	4b97      	ldr	r3, [pc, #604]	@ (8006b1c <_dtoa_r+0x584>)
 80068c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068c8:	f7f9 ffe0 	bl	800088c <__aeabi_ddiv>
 80068cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80068d0:	f004 040f 	and.w	r4, r4, #15
 80068d4:	2603      	movs	r6, #3
 80068d6:	4d91      	ldr	r5, [pc, #580]	@ (8006b1c <_dtoa_r+0x584>)
 80068d8:	b954      	cbnz	r4, 80068f0 <_dtoa_r+0x358>
 80068da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80068de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068e2:	f7f9 ffd3 	bl	800088c <__aeabi_ddiv>
 80068e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80068ea:	e028      	b.n	800693e <_dtoa_r+0x3a6>
 80068ec:	2602      	movs	r6, #2
 80068ee:	e7f2      	b.n	80068d6 <_dtoa_r+0x33e>
 80068f0:	07e1      	lsls	r1, r4, #31
 80068f2:	d508      	bpl.n	8006906 <_dtoa_r+0x36e>
 80068f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80068f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068fc:	f7f9 fe9c 	bl	8000638 <__aeabi_dmul>
 8006900:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006904:	3601      	adds	r6, #1
 8006906:	1064      	asrs	r4, r4, #1
 8006908:	3508      	adds	r5, #8
 800690a:	e7e5      	b.n	80068d8 <_dtoa_r+0x340>
 800690c:	f000 80af 	beq.w	8006a6e <_dtoa_r+0x4d6>
 8006910:	427c      	negs	r4, r7
 8006912:	4b81      	ldr	r3, [pc, #516]	@ (8006b18 <_dtoa_r+0x580>)
 8006914:	4d81      	ldr	r5, [pc, #516]	@ (8006b1c <_dtoa_r+0x584>)
 8006916:	f004 020f 	and.w	r2, r4, #15
 800691a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006926:	f7f9 fe87 	bl	8000638 <__aeabi_dmul>
 800692a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800692e:	1124      	asrs	r4, r4, #4
 8006930:	2300      	movs	r3, #0
 8006932:	2602      	movs	r6, #2
 8006934:	2c00      	cmp	r4, #0
 8006936:	f040 808f 	bne.w	8006a58 <_dtoa_r+0x4c0>
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1d3      	bne.n	80068e6 <_dtoa_r+0x34e>
 800693e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006940:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8094 	beq.w	8006a72 <_dtoa_r+0x4da>
 800694a:	4b75      	ldr	r3, [pc, #468]	@ (8006b20 <_dtoa_r+0x588>)
 800694c:	2200      	movs	r2, #0
 800694e:	4620      	mov	r0, r4
 8006950:	4629      	mov	r1, r5
 8006952:	f7fa f8e3 	bl	8000b1c <__aeabi_dcmplt>
 8006956:	2800      	cmp	r0, #0
 8006958:	f000 808b 	beq.w	8006a72 <_dtoa_r+0x4da>
 800695c:	9b08      	ldr	r3, [sp, #32]
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 8087 	beq.w	8006a72 <_dtoa_r+0x4da>
 8006964:	f1bb 0f00 	cmp.w	fp, #0
 8006968:	dd34      	ble.n	80069d4 <_dtoa_r+0x43c>
 800696a:	4620      	mov	r0, r4
 800696c:	4b6d      	ldr	r3, [pc, #436]	@ (8006b24 <_dtoa_r+0x58c>)
 800696e:	2200      	movs	r2, #0
 8006970:	4629      	mov	r1, r5
 8006972:	f7f9 fe61 	bl	8000638 <__aeabi_dmul>
 8006976:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800697a:	f107 38ff 	add.w	r8, r7, #4294967295
 800697e:	3601      	adds	r6, #1
 8006980:	465c      	mov	r4, fp
 8006982:	4630      	mov	r0, r6
 8006984:	f7f9 fdee 	bl	8000564 <__aeabi_i2d>
 8006988:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800698c:	f7f9 fe54 	bl	8000638 <__aeabi_dmul>
 8006990:	4b65      	ldr	r3, [pc, #404]	@ (8006b28 <_dtoa_r+0x590>)
 8006992:	2200      	movs	r2, #0
 8006994:	f7f9 fc9a 	bl	80002cc <__adddf3>
 8006998:	4605      	mov	r5, r0
 800699a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800699e:	2c00      	cmp	r4, #0
 80069a0:	d16a      	bne.n	8006a78 <_dtoa_r+0x4e0>
 80069a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069a6:	4b61      	ldr	r3, [pc, #388]	@ (8006b2c <_dtoa_r+0x594>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	f7f9 fc8d 	bl	80002c8 <__aeabi_dsub>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80069b6:	462a      	mov	r2, r5
 80069b8:	4633      	mov	r3, r6
 80069ba:	f7fa f8cd 	bl	8000b58 <__aeabi_dcmpgt>
 80069be:	2800      	cmp	r0, #0
 80069c0:	f040 8298 	bne.w	8006ef4 <_dtoa_r+0x95c>
 80069c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069c8:	462a      	mov	r2, r5
 80069ca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80069ce:	f7fa f8a5 	bl	8000b1c <__aeabi_dcmplt>
 80069d2:	bb38      	cbnz	r0, 8006a24 <_dtoa_r+0x48c>
 80069d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80069d8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80069dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f2c0 8157 	blt.w	8006c92 <_dtoa_r+0x6fa>
 80069e4:	2f0e      	cmp	r7, #14
 80069e6:	f300 8154 	bgt.w	8006c92 <_dtoa_r+0x6fa>
 80069ea:	4b4b      	ldr	r3, [pc, #300]	@ (8006b18 <_dtoa_r+0x580>)
 80069ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80069f0:	ed93 7b00 	vldr	d7, [r3]
 80069f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80069fc:	f280 80e5 	bge.w	8006bca <_dtoa_r+0x632>
 8006a00:	9b08      	ldr	r3, [sp, #32]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f300 80e1 	bgt.w	8006bca <_dtoa_r+0x632>
 8006a08:	d10c      	bne.n	8006a24 <_dtoa_r+0x48c>
 8006a0a:	4b48      	ldr	r3, [pc, #288]	@ (8006b2c <_dtoa_r+0x594>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	ec51 0b17 	vmov	r0, r1, d7
 8006a12:	f7f9 fe11 	bl	8000638 <__aeabi_dmul>
 8006a16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a1a:	f7fa f893 	bl	8000b44 <__aeabi_dcmpge>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	f000 8266 	beq.w	8006ef0 <_dtoa_r+0x958>
 8006a24:	2400      	movs	r4, #0
 8006a26:	4625      	mov	r5, r4
 8006a28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a2a:	4656      	mov	r6, sl
 8006a2c:	ea6f 0803 	mvn.w	r8, r3
 8006a30:	2700      	movs	r7, #0
 8006a32:	4621      	mov	r1, r4
 8006a34:	4648      	mov	r0, r9
 8006a36:	f000 fcbf 	bl	80073b8 <_Bfree>
 8006a3a:	2d00      	cmp	r5, #0
 8006a3c:	f000 80bd 	beq.w	8006bba <_dtoa_r+0x622>
 8006a40:	b12f      	cbz	r7, 8006a4e <_dtoa_r+0x4b6>
 8006a42:	42af      	cmp	r7, r5
 8006a44:	d003      	beq.n	8006a4e <_dtoa_r+0x4b6>
 8006a46:	4639      	mov	r1, r7
 8006a48:	4648      	mov	r0, r9
 8006a4a:	f000 fcb5 	bl	80073b8 <_Bfree>
 8006a4e:	4629      	mov	r1, r5
 8006a50:	4648      	mov	r0, r9
 8006a52:	f000 fcb1 	bl	80073b8 <_Bfree>
 8006a56:	e0b0      	b.n	8006bba <_dtoa_r+0x622>
 8006a58:	07e2      	lsls	r2, r4, #31
 8006a5a:	d505      	bpl.n	8006a68 <_dtoa_r+0x4d0>
 8006a5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a60:	f7f9 fdea 	bl	8000638 <__aeabi_dmul>
 8006a64:	3601      	adds	r6, #1
 8006a66:	2301      	movs	r3, #1
 8006a68:	1064      	asrs	r4, r4, #1
 8006a6a:	3508      	adds	r5, #8
 8006a6c:	e762      	b.n	8006934 <_dtoa_r+0x39c>
 8006a6e:	2602      	movs	r6, #2
 8006a70:	e765      	b.n	800693e <_dtoa_r+0x3a6>
 8006a72:	9c08      	ldr	r4, [sp, #32]
 8006a74:	46b8      	mov	r8, r7
 8006a76:	e784      	b.n	8006982 <_dtoa_r+0x3ea>
 8006a78:	4b27      	ldr	r3, [pc, #156]	@ (8006b18 <_dtoa_r+0x580>)
 8006a7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a84:	4454      	add	r4, sl
 8006a86:	2900      	cmp	r1, #0
 8006a88:	d054      	beq.n	8006b34 <_dtoa_r+0x59c>
 8006a8a:	4929      	ldr	r1, [pc, #164]	@ (8006b30 <_dtoa_r+0x598>)
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	f7f9 fefd 	bl	800088c <__aeabi_ddiv>
 8006a92:	4633      	mov	r3, r6
 8006a94:	462a      	mov	r2, r5
 8006a96:	f7f9 fc17 	bl	80002c8 <__aeabi_dsub>
 8006a9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a9e:	4656      	mov	r6, sl
 8006aa0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aa4:	f7fa f878 	bl	8000b98 <__aeabi_d2iz>
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	f7f9 fd5b 	bl	8000564 <__aeabi_i2d>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ab6:	f7f9 fc07 	bl	80002c8 <__aeabi_dsub>
 8006aba:	3530      	adds	r5, #48	@ 0x30
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ac4:	f806 5b01 	strb.w	r5, [r6], #1
 8006ac8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006acc:	f7fa f826 	bl	8000b1c <__aeabi_dcmplt>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d172      	bne.n	8006bba <_dtoa_r+0x622>
 8006ad4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ad8:	4911      	ldr	r1, [pc, #68]	@ (8006b20 <_dtoa_r+0x588>)
 8006ada:	2000      	movs	r0, #0
 8006adc:	f7f9 fbf4 	bl	80002c8 <__aeabi_dsub>
 8006ae0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ae4:	f7fa f81a 	bl	8000b1c <__aeabi_dcmplt>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	f040 80b4 	bne.w	8006c56 <_dtoa_r+0x6be>
 8006aee:	42a6      	cmp	r6, r4
 8006af0:	f43f af70 	beq.w	80069d4 <_dtoa_r+0x43c>
 8006af4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006af8:	4b0a      	ldr	r3, [pc, #40]	@ (8006b24 <_dtoa_r+0x58c>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	f7f9 fd9c 	bl	8000638 <__aeabi_dmul>
 8006b00:	4b08      	ldr	r3, [pc, #32]	@ (8006b24 <_dtoa_r+0x58c>)
 8006b02:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b06:	2200      	movs	r2, #0
 8006b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b0c:	f7f9 fd94 	bl	8000638 <__aeabi_dmul>
 8006b10:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b14:	e7c4      	b.n	8006aa0 <_dtoa_r+0x508>
 8006b16:	bf00      	nop
 8006b18:	08009ec8 	.word	0x08009ec8
 8006b1c:	08009ea0 	.word	0x08009ea0
 8006b20:	3ff00000 	.word	0x3ff00000
 8006b24:	40240000 	.word	0x40240000
 8006b28:	401c0000 	.word	0x401c0000
 8006b2c:	40140000 	.word	0x40140000
 8006b30:	3fe00000 	.word	0x3fe00000
 8006b34:	4631      	mov	r1, r6
 8006b36:	4628      	mov	r0, r5
 8006b38:	f7f9 fd7e 	bl	8000638 <__aeabi_dmul>
 8006b3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b40:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006b42:	4656      	mov	r6, sl
 8006b44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b48:	f7fa f826 	bl	8000b98 <__aeabi_d2iz>
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	f7f9 fd09 	bl	8000564 <__aeabi_i2d>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b5a:	f7f9 fbb5 	bl	80002c8 <__aeabi_dsub>
 8006b5e:	3530      	adds	r5, #48	@ 0x30
 8006b60:	f806 5b01 	strb.w	r5, [r6], #1
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	42a6      	cmp	r6, r4
 8006b6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b6e:	f04f 0200 	mov.w	r2, #0
 8006b72:	d124      	bne.n	8006bbe <_dtoa_r+0x626>
 8006b74:	4baf      	ldr	r3, [pc, #700]	@ (8006e34 <_dtoa_r+0x89c>)
 8006b76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b7a:	f7f9 fba7 	bl	80002cc <__adddf3>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b86:	f7f9 ffe7 	bl	8000b58 <__aeabi_dcmpgt>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d163      	bne.n	8006c56 <_dtoa_r+0x6be>
 8006b8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b92:	49a8      	ldr	r1, [pc, #672]	@ (8006e34 <_dtoa_r+0x89c>)
 8006b94:	2000      	movs	r0, #0
 8006b96:	f7f9 fb97 	bl	80002c8 <__aeabi_dsub>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ba2:	f7f9 ffbb 	bl	8000b1c <__aeabi_dcmplt>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	f43f af14 	beq.w	80069d4 <_dtoa_r+0x43c>
 8006bac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006bae:	1e73      	subs	r3, r6, #1
 8006bb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006bb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006bb6:	2b30      	cmp	r3, #48	@ 0x30
 8006bb8:	d0f8      	beq.n	8006bac <_dtoa_r+0x614>
 8006bba:	4647      	mov	r7, r8
 8006bbc:	e03b      	b.n	8006c36 <_dtoa_r+0x69e>
 8006bbe:	4b9e      	ldr	r3, [pc, #632]	@ (8006e38 <_dtoa_r+0x8a0>)
 8006bc0:	f7f9 fd3a 	bl	8000638 <__aeabi_dmul>
 8006bc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006bc8:	e7bc      	b.n	8006b44 <_dtoa_r+0x5ac>
 8006bca:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006bce:	4656      	mov	r6, sl
 8006bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	f7f9 fe58 	bl	800088c <__aeabi_ddiv>
 8006bdc:	f7f9 ffdc 	bl	8000b98 <__aeabi_d2iz>
 8006be0:	4680      	mov	r8, r0
 8006be2:	f7f9 fcbf 	bl	8000564 <__aeabi_i2d>
 8006be6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bea:	f7f9 fd25 	bl	8000638 <__aeabi_dmul>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006bfa:	f7f9 fb65 	bl	80002c8 <__aeabi_dsub>
 8006bfe:	f806 4b01 	strb.w	r4, [r6], #1
 8006c02:	9d08      	ldr	r5, [sp, #32]
 8006c04:	eba6 040a 	sub.w	r4, r6, sl
 8006c08:	42a5      	cmp	r5, r4
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	d133      	bne.n	8006c78 <_dtoa_r+0x6e0>
 8006c10:	f7f9 fb5c 	bl	80002cc <__adddf3>
 8006c14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c18:	4604      	mov	r4, r0
 8006c1a:	460d      	mov	r5, r1
 8006c1c:	f7f9 ff9c 	bl	8000b58 <__aeabi_dcmpgt>
 8006c20:	b9c0      	cbnz	r0, 8006c54 <_dtoa_r+0x6bc>
 8006c22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c26:	4620      	mov	r0, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f7f9 ff6d 	bl	8000b08 <__aeabi_dcmpeq>
 8006c2e:	b110      	cbz	r0, 8006c36 <_dtoa_r+0x69e>
 8006c30:	f018 0f01 	tst.w	r8, #1
 8006c34:	d10e      	bne.n	8006c54 <_dtoa_r+0x6bc>
 8006c36:	9903      	ldr	r1, [sp, #12]
 8006c38:	4648      	mov	r0, r9
 8006c3a:	f000 fbbd 	bl	80073b8 <_Bfree>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	7033      	strb	r3, [r6, #0]
 8006c42:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006c44:	3701      	adds	r7, #1
 8006c46:	601f      	str	r7, [r3, #0]
 8006c48:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 824b 	beq.w	80070e6 <_dtoa_r+0xb4e>
 8006c50:	601e      	str	r6, [r3, #0]
 8006c52:	e248      	b.n	80070e6 <_dtoa_r+0xb4e>
 8006c54:	46b8      	mov	r8, r7
 8006c56:	4633      	mov	r3, r6
 8006c58:	461e      	mov	r6, r3
 8006c5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c5e:	2a39      	cmp	r2, #57	@ 0x39
 8006c60:	d106      	bne.n	8006c70 <_dtoa_r+0x6d8>
 8006c62:	459a      	cmp	sl, r3
 8006c64:	d1f8      	bne.n	8006c58 <_dtoa_r+0x6c0>
 8006c66:	2230      	movs	r2, #48	@ 0x30
 8006c68:	f108 0801 	add.w	r8, r8, #1
 8006c6c:	f88a 2000 	strb.w	r2, [sl]
 8006c70:	781a      	ldrb	r2, [r3, #0]
 8006c72:	3201      	adds	r2, #1
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	e7a0      	b.n	8006bba <_dtoa_r+0x622>
 8006c78:	4b6f      	ldr	r3, [pc, #444]	@ (8006e38 <_dtoa_r+0x8a0>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f7f9 fcdc 	bl	8000638 <__aeabi_dmul>
 8006c80:	2200      	movs	r2, #0
 8006c82:	2300      	movs	r3, #0
 8006c84:	4604      	mov	r4, r0
 8006c86:	460d      	mov	r5, r1
 8006c88:	f7f9 ff3e 	bl	8000b08 <__aeabi_dcmpeq>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d09f      	beq.n	8006bd0 <_dtoa_r+0x638>
 8006c90:	e7d1      	b.n	8006c36 <_dtoa_r+0x69e>
 8006c92:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c94:	2a00      	cmp	r2, #0
 8006c96:	f000 80ea 	beq.w	8006e6e <_dtoa_r+0x8d6>
 8006c9a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c9c:	2a01      	cmp	r2, #1
 8006c9e:	f300 80cd 	bgt.w	8006e3c <_dtoa_r+0x8a4>
 8006ca2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006ca4:	2a00      	cmp	r2, #0
 8006ca6:	f000 80c1 	beq.w	8006e2c <_dtoa_r+0x894>
 8006caa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006cae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006cb0:	9e04      	ldr	r6, [sp, #16]
 8006cb2:	9a04      	ldr	r2, [sp, #16]
 8006cb4:	441a      	add	r2, r3
 8006cb6:	9204      	str	r2, [sp, #16]
 8006cb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cba:	2101      	movs	r1, #1
 8006cbc:	441a      	add	r2, r3
 8006cbe:	4648      	mov	r0, r9
 8006cc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cc2:	f000 fc77 	bl	80075b4 <__i2b>
 8006cc6:	4605      	mov	r5, r0
 8006cc8:	b166      	cbz	r6, 8006ce4 <_dtoa_r+0x74c>
 8006cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dd09      	ble.n	8006ce4 <_dtoa_r+0x74c>
 8006cd0:	42b3      	cmp	r3, r6
 8006cd2:	9a04      	ldr	r2, [sp, #16]
 8006cd4:	bfa8      	it	ge
 8006cd6:	4633      	movge	r3, r6
 8006cd8:	1ad2      	subs	r2, r2, r3
 8006cda:	9204      	str	r2, [sp, #16]
 8006cdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cde:	1af6      	subs	r6, r6, r3
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ce4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ce6:	b30b      	cbz	r3, 8006d2c <_dtoa_r+0x794>
 8006ce8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 80c6 	beq.w	8006e7c <_dtoa_r+0x8e4>
 8006cf0:	2c00      	cmp	r4, #0
 8006cf2:	f000 80c0 	beq.w	8006e76 <_dtoa_r+0x8de>
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	4622      	mov	r2, r4
 8006cfa:	4648      	mov	r0, r9
 8006cfc:	f000 fd12 	bl	8007724 <__pow5mult>
 8006d00:	9a03      	ldr	r2, [sp, #12]
 8006d02:	4601      	mov	r1, r0
 8006d04:	4605      	mov	r5, r0
 8006d06:	4648      	mov	r0, r9
 8006d08:	f000 fc6a 	bl	80075e0 <__multiply>
 8006d0c:	9903      	ldr	r1, [sp, #12]
 8006d0e:	4680      	mov	r8, r0
 8006d10:	4648      	mov	r0, r9
 8006d12:	f000 fb51 	bl	80073b8 <_Bfree>
 8006d16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d18:	1b1b      	subs	r3, r3, r4
 8006d1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d1c:	f000 80b1 	beq.w	8006e82 <_dtoa_r+0x8ea>
 8006d20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d22:	4641      	mov	r1, r8
 8006d24:	4648      	mov	r0, r9
 8006d26:	f000 fcfd 	bl	8007724 <__pow5mult>
 8006d2a:	9003      	str	r0, [sp, #12]
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	4648      	mov	r0, r9
 8006d30:	f000 fc40 	bl	80075b4 <__i2b>
 8006d34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d36:	4604      	mov	r4, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 81d8 	beq.w	80070ee <_dtoa_r+0xb56>
 8006d3e:	461a      	mov	r2, r3
 8006d40:	4601      	mov	r1, r0
 8006d42:	4648      	mov	r0, r9
 8006d44:	f000 fcee 	bl	8007724 <__pow5mult>
 8006d48:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	f300 809f 	bgt.w	8006e90 <_dtoa_r+0x8f8>
 8006d52:	9b06      	ldr	r3, [sp, #24]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f040 8097 	bne.w	8006e88 <_dtoa_r+0x8f0>
 8006d5a:	9b07      	ldr	r3, [sp, #28]
 8006d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f040 8093 	bne.w	8006e8c <_dtoa_r+0x8f4>
 8006d66:	9b07      	ldr	r3, [sp, #28]
 8006d68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d6c:	0d1b      	lsrs	r3, r3, #20
 8006d6e:	051b      	lsls	r3, r3, #20
 8006d70:	b133      	cbz	r3, 8006d80 <_dtoa_r+0x7e8>
 8006d72:	9b04      	ldr	r3, [sp, #16]
 8006d74:	3301      	adds	r3, #1
 8006d76:	9304      	str	r3, [sp, #16]
 8006d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d7e:	2301      	movs	r3, #1
 8006d80:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 81b8 	beq.w	80070fa <_dtoa_r+0xb62>
 8006d8a:	6923      	ldr	r3, [r4, #16]
 8006d8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d90:	6918      	ldr	r0, [r3, #16]
 8006d92:	f000 fbc3 	bl	800751c <__hi0bits>
 8006d96:	f1c0 0020 	rsb	r0, r0, #32
 8006d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d9c:	4418      	add	r0, r3
 8006d9e:	f010 001f 	ands.w	r0, r0, #31
 8006da2:	f000 8082 	beq.w	8006eaa <_dtoa_r+0x912>
 8006da6:	f1c0 0320 	rsb	r3, r0, #32
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	dd73      	ble.n	8006e96 <_dtoa_r+0x8fe>
 8006dae:	9b04      	ldr	r3, [sp, #16]
 8006db0:	f1c0 001c 	rsb	r0, r0, #28
 8006db4:	4403      	add	r3, r0
 8006db6:	9304      	str	r3, [sp, #16]
 8006db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dba:	4403      	add	r3, r0
 8006dbc:	4406      	add	r6, r0
 8006dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dc0:	9b04      	ldr	r3, [sp, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	dd05      	ble.n	8006dd2 <_dtoa_r+0x83a>
 8006dc6:	9903      	ldr	r1, [sp, #12]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	4648      	mov	r0, r9
 8006dcc:	f000 fd04 	bl	80077d8 <__lshift>
 8006dd0:	9003      	str	r0, [sp, #12]
 8006dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	dd05      	ble.n	8006de4 <_dtoa_r+0x84c>
 8006dd8:	4621      	mov	r1, r4
 8006dda:	461a      	mov	r2, r3
 8006ddc:	4648      	mov	r0, r9
 8006dde:	f000 fcfb 	bl	80077d8 <__lshift>
 8006de2:	4604      	mov	r4, r0
 8006de4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d061      	beq.n	8006eae <_dtoa_r+0x916>
 8006dea:	9803      	ldr	r0, [sp, #12]
 8006dec:	4621      	mov	r1, r4
 8006dee:	f000 fd5f 	bl	80078b0 <__mcmp>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	da5b      	bge.n	8006eae <_dtoa_r+0x916>
 8006df6:	2300      	movs	r3, #0
 8006df8:	9903      	ldr	r1, [sp, #12]
 8006dfa:	220a      	movs	r2, #10
 8006dfc:	4648      	mov	r0, r9
 8006dfe:	f000 fafd 	bl	80073fc <__multadd>
 8006e02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e04:	9003      	str	r0, [sp, #12]
 8006e06:	f107 38ff 	add.w	r8, r7, #4294967295
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 8177 	beq.w	80070fe <_dtoa_r+0xb66>
 8006e10:	4629      	mov	r1, r5
 8006e12:	2300      	movs	r3, #0
 8006e14:	220a      	movs	r2, #10
 8006e16:	4648      	mov	r0, r9
 8006e18:	f000 faf0 	bl	80073fc <__multadd>
 8006e1c:	f1bb 0f00 	cmp.w	fp, #0
 8006e20:	4605      	mov	r5, r0
 8006e22:	dc6f      	bgt.n	8006f04 <_dtoa_r+0x96c>
 8006e24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	dc49      	bgt.n	8006ebe <_dtoa_r+0x926>
 8006e2a:	e06b      	b.n	8006f04 <_dtoa_r+0x96c>
 8006e2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006e32:	e73c      	b.n	8006cae <_dtoa_r+0x716>
 8006e34:	3fe00000 	.word	0x3fe00000
 8006e38:	40240000 	.word	0x40240000
 8006e3c:	9b08      	ldr	r3, [sp, #32]
 8006e3e:	1e5c      	subs	r4, r3, #1
 8006e40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e42:	42a3      	cmp	r3, r4
 8006e44:	db09      	blt.n	8006e5a <_dtoa_r+0x8c2>
 8006e46:	1b1c      	subs	r4, r3, r4
 8006e48:	9b08      	ldr	r3, [sp, #32]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f6bf af30 	bge.w	8006cb0 <_dtoa_r+0x718>
 8006e50:	9b04      	ldr	r3, [sp, #16]
 8006e52:	9a08      	ldr	r2, [sp, #32]
 8006e54:	1a9e      	subs	r6, r3, r2
 8006e56:	2300      	movs	r3, #0
 8006e58:	e72b      	b.n	8006cb2 <_dtoa_r+0x71a>
 8006e5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e5e:	940a      	str	r4, [sp, #40]	@ 0x28
 8006e60:	1ae3      	subs	r3, r4, r3
 8006e62:	441a      	add	r2, r3
 8006e64:	9e04      	ldr	r6, [sp, #16]
 8006e66:	9b08      	ldr	r3, [sp, #32]
 8006e68:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e6a:	2400      	movs	r4, #0
 8006e6c:	e721      	b.n	8006cb2 <_dtoa_r+0x71a>
 8006e6e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e70:	9e04      	ldr	r6, [sp, #16]
 8006e72:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006e74:	e728      	b.n	8006cc8 <_dtoa_r+0x730>
 8006e76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006e7a:	e751      	b.n	8006d20 <_dtoa_r+0x788>
 8006e7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e7e:	9903      	ldr	r1, [sp, #12]
 8006e80:	e750      	b.n	8006d24 <_dtoa_r+0x78c>
 8006e82:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e86:	e751      	b.n	8006d2c <_dtoa_r+0x794>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e779      	b.n	8006d80 <_dtoa_r+0x7e8>
 8006e8c:	9b06      	ldr	r3, [sp, #24]
 8006e8e:	e777      	b.n	8006d80 <_dtoa_r+0x7e8>
 8006e90:	2300      	movs	r3, #0
 8006e92:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e94:	e779      	b.n	8006d8a <_dtoa_r+0x7f2>
 8006e96:	d093      	beq.n	8006dc0 <_dtoa_r+0x828>
 8006e98:	9a04      	ldr	r2, [sp, #16]
 8006e9a:	331c      	adds	r3, #28
 8006e9c:	441a      	add	r2, r3
 8006e9e:	9204      	str	r2, [sp, #16]
 8006ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ea2:	441a      	add	r2, r3
 8006ea4:	441e      	add	r6, r3
 8006ea6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ea8:	e78a      	b.n	8006dc0 <_dtoa_r+0x828>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	e7f4      	b.n	8006e98 <_dtoa_r+0x900>
 8006eae:	9b08      	ldr	r3, [sp, #32]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	46b8      	mov	r8, r7
 8006eb4:	dc20      	bgt.n	8006ef8 <_dtoa_r+0x960>
 8006eb6:	469b      	mov	fp, r3
 8006eb8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	dd1e      	ble.n	8006efc <_dtoa_r+0x964>
 8006ebe:	f1bb 0f00 	cmp.w	fp, #0
 8006ec2:	f47f adb1 	bne.w	8006a28 <_dtoa_r+0x490>
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	465b      	mov	r3, fp
 8006eca:	2205      	movs	r2, #5
 8006ecc:	4648      	mov	r0, r9
 8006ece:	f000 fa95 	bl	80073fc <__multadd>
 8006ed2:	4601      	mov	r1, r0
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	9803      	ldr	r0, [sp, #12]
 8006ed8:	f000 fcea 	bl	80078b0 <__mcmp>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	f77f ada3 	ble.w	8006a28 <_dtoa_r+0x490>
 8006ee2:	4656      	mov	r6, sl
 8006ee4:	2331      	movs	r3, #49	@ 0x31
 8006ee6:	f806 3b01 	strb.w	r3, [r6], #1
 8006eea:	f108 0801 	add.w	r8, r8, #1
 8006eee:	e59f      	b.n	8006a30 <_dtoa_r+0x498>
 8006ef0:	9c08      	ldr	r4, [sp, #32]
 8006ef2:	46b8      	mov	r8, r7
 8006ef4:	4625      	mov	r5, r4
 8006ef6:	e7f4      	b.n	8006ee2 <_dtoa_r+0x94a>
 8006ef8:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006efc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 8101 	beq.w	8007106 <_dtoa_r+0xb6e>
 8006f04:	2e00      	cmp	r6, #0
 8006f06:	dd05      	ble.n	8006f14 <_dtoa_r+0x97c>
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4632      	mov	r2, r6
 8006f0c:	4648      	mov	r0, r9
 8006f0e:	f000 fc63 	bl	80077d8 <__lshift>
 8006f12:	4605      	mov	r5, r0
 8006f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d05c      	beq.n	8006fd4 <_dtoa_r+0xa3c>
 8006f1a:	6869      	ldr	r1, [r5, #4]
 8006f1c:	4648      	mov	r0, r9
 8006f1e:	f000 fa0b 	bl	8007338 <_Balloc>
 8006f22:	4606      	mov	r6, r0
 8006f24:	b928      	cbnz	r0, 8006f32 <_dtoa_r+0x99a>
 8006f26:	4b82      	ldr	r3, [pc, #520]	@ (8007130 <_dtoa_r+0xb98>)
 8006f28:	4602      	mov	r2, r0
 8006f2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006f2e:	f7ff bb47 	b.w	80065c0 <_dtoa_r+0x28>
 8006f32:	692a      	ldr	r2, [r5, #16]
 8006f34:	3202      	adds	r2, #2
 8006f36:	0092      	lsls	r2, r2, #2
 8006f38:	f105 010c 	add.w	r1, r5, #12
 8006f3c:	300c      	adds	r0, #12
 8006f3e:	f001 ff59 	bl	8008df4 <memcpy>
 8006f42:	2201      	movs	r2, #1
 8006f44:	4631      	mov	r1, r6
 8006f46:	4648      	mov	r0, r9
 8006f48:	f000 fc46 	bl	80077d8 <__lshift>
 8006f4c:	f10a 0301 	add.w	r3, sl, #1
 8006f50:	9304      	str	r3, [sp, #16]
 8006f52:	eb0a 030b 	add.w	r3, sl, fp
 8006f56:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f58:	9b06      	ldr	r3, [sp, #24]
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	462f      	mov	r7, r5
 8006f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f62:	4605      	mov	r5, r0
 8006f64:	9b04      	ldr	r3, [sp, #16]
 8006f66:	9803      	ldr	r0, [sp, #12]
 8006f68:	4621      	mov	r1, r4
 8006f6a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006f6e:	f7ff fa89 	bl	8006484 <quorem>
 8006f72:	4603      	mov	r3, r0
 8006f74:	3330      	adds	r3, #48	@ 0x30
 8006f76:	9008      	str	r0, [sp, #32]
 8006f78:	4639      	mov	r1, r7
 8006f7a:	9803      	ldr	r0, [sp, #12]
 8006f7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f7e:	f000 fc97 	bl	80078b0 <__mcmp>
 8006f82:	462a      	mov	r2, r5
 8006f84:	9006      	str	r0, [sp, #24]
 8006f86:	4621      	mov	r1, r4
 8006f88:	4648      	mov	r0, r9
 8006f8a:	f000 fcad 	bl	80078e8 <__mdiff>
 8006f8e:	68c2      	ldr	r2, [r0, #12]
 8006f90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f92:	4606      	mov	r6, r0
 8006f94:	bb02      	cbnz	r2, 8006fd8 <_dtoa_r+0xa40>
 8006f96:	4601      	mov	r1, r0
 8006f98:	9803      	ldr	r0, [sp, #12]
 8006f9a:	f000 fc89 	bl	80078b0 <__mcmp>
 8006f9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	4648      	mov	r0, r9
 8006fa6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006faa:	f000 fa05 	bl	80073b8 <_Bfree>
 8006fae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006fb0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006fb2:	9e04      	ldr	r6, [sp, #16]
 8006fb4:	ea42 0103 	orr.w	r1, r2, r3
 8006fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fba:	4319      	orrs	r1, r3
 8006fbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fbe:	d10d      	bne.n	8006fdc <_dtoa_r+0xa44>
 8006fc0:	2b39      	cmp	r3, #57	@ 0x39
 8006fc2:	d027      	beq.n	8007014 <_dtoa_r+0xa7c>
 8006fc4:	9a06      	ldr	r2, [sp, #24]
 8006fc6:	2a00      	cmp	r2, #0
 8006fc8:	dd01      	ble.n	8006fce <_dtoa_r+0xa36>
 8006fca:	9b08      	ldr	r3, [sp, #32]
 8006fcc:	3331      	adds	r3, #49	@ 0x31
 8006fce:	f88b 3000 	strb.w	r3, [fp]
 8006fd2:	e52e      	b.n	8006a32 <_dtoa_r+0x49a>
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	e7b9      	b.n	8006f4c <_dtoa_r+0x9b4>
 8006fd8:	2201      	movs	r2, #1
 8006fda:	e7e2      	b.n	8006fa2 <_dtoa_r+0xa0a>
 8006fdc:	9906      	ldr	r1, [sp, #24]
 8006fde:	2900      	cmp	r1, #0
 8006fe0:	db04      	blt.n	8006fec <_dtoa_r+0xa54>
 8006fe2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006fe4:	4301      	orrs	r1, r0
 8006fe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fe8:	4301      	orrs	r1, r0
 8006fea:	d120      	bne.n	800702e <_dtoa_r+0xa96>
 8006fec:	2a00      	cmp	r2, #0
 8006fee:	ddee      	ble.n	8006fce <_dtoa_r+0xa36>
 8006ff0:	9903      	ldr	r1, [sp, #12]
 8006ff2:	9304      	str	r3, [sp, #16]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	4648      	mov	r0, r9
 8006ff8:	f000 fbee 	bl	80077d8 <__lshift>
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	9003      	str	r0, [sp, #12]
 8007000:	f000 fc56 	bl	80078b0 <__mcmp>
 8007004:	2800      	cmp	r0, #0
 8007006:	9b04      	ldr	r3, [sp, #16]
 8007008:	dc02      	bgt.n	8007010 <_dtoa_r+0xa78>
 800700a:	d1e0      	bne.n	8006fce <_dtoa_r+0xa36>
 800700c:	07da      	lsls	r2, r3, #31
 800700e:	d5de      	bpl.n	8006fce <_dtoa_r+0xa36>
 8007010:	2b39      	cmp	r3, #57	@ 0x39
 8007012:	d1da      	bne.n	8006fca <_dtoa_r+0xa32>
 8007014:	2339      	movs	r3, #57	@ 0x39
 8007016:	f88b 3000 	strb.w	r3, [fp]
 800701a:	4633      	mov	r3, r6
 800701c:	461e      	mov	r6, r3
 800701e:	3b01      	subs	r3, #1
 8007020:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007024:	2a39      	cmp	r2, #57	@ 0x39
 8007026:	d04e      	beq.n	80070c6 <_dtoa_r+0xb2e>
 8007028:	3201      	adds	r2, #1
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	e501      	b.n	8006a32 <_dtoa_r+0x49a>
 800702e:	2a00      	cmp	r2, #0
 8007030:	dd03      	ble.n	800703a <_dtoa_r+0xaa2>
 8007032:	2b39      	cmp	r3, #57	@ 0x39
 8007034:	d0ee      	beq.n	8007014 <_dtoa_r+0xa7c>
 8007036:	3301      	adds	r3, #1
 8007038:	e7c9      	b.n	8006fce <_dtoa_r+0xa36>
 800703a:	9a04      	ldr	r2, [sp, #16]
 800703c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800703e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007042:	428a      	cmp	r2, r1
 8007044:	d028      	beq.n	8007098 <_dtoa_r+0xb00>
 8007046:	9903      	ldr	r1, [sp, #12]
 8007048:	2300      	movs	r3, #0
 800704a:	220a      	movs	r2, #10
 800704c:	4648      	mov	r0, r9
 800704e:	f000 f9d5 	bl	80073fc <__multadd>
 8007052:	42af      	cmp	r7, r5
 8007054:	9003      	str	r0, [sp, #12]
 8007056:	f04f 0300 	mov.w	r3, #0
 800705a:	f04f 020a 	mov.w	r2, #10
 800705e:	4639      	mov	r1, r7
 8007060:	4648      	mov	r0, r9
 8007062:	d107      	bne.n	8007074 <_dtoa_r+0xadc>
 8007064:	f000 f9ca 	bl	80073fc <__multadd>
 8007068:	4607      	mov	r7, r0
 800706a:	4605      	mov	r5, r0
 800706c:	9b04      	ldr	r3, [sp, #16]
 800706e:	3301      	adds	r3, #1
 8007070:	9304      	str	r3, [sp, #16]
 8007072:	e777      	b.n	8006f64 <_dtoa_r+0x9cc>
 8007074:	f000 f9c2 	bl	80073fc <__multadd>
 8007078:	4629      	mov	r1, r5
 800707a:	4607      	mov	r7, r0
 800707c:	2300      	movs	r3, #0
 800707e:	220a      	movs	r2, #10
 8007080:	4648      	mov	r0, r9
 8007082:	f000 f9bb 	bl	80073fc <__multadd>
 8007086:	4605      	mov	r5, r0
 8007088:	e7f0      	b.n	800706c <_dtoa_r+0xad4>
 800708a:	f1bb 0f00 	cmp.w	fp, #0
 800708e:	bfcc      	ite	gt
 8007090:	465e      	movgt	r6, fp
 8007092:	2601      	movle	r6, #1
 8007094:	4456      	add	r6, sl
 8007096:	2700      	movs	r7, #0
 8007098:	9903      	ldr	r1, [sp, #12]
 800709a:	9304      	str	r3, [sp, #16]
 800709c:	2201      	movs	r2, #1
 800709e:	4648      	mov	r0, r9
 80070a0:	f000 fb9a 	bl	80077d8 <__lshift>
 80070a4:	4621      	mov	r1, r4
 80070a6:	9003      	str	r0, [sp, #12]
 80070a8:	f000 fc02 	bl	80078b0 <__mcmp>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	dcb4      	bgt.n	800701a <_dtoa_r+0xa82>
 80070b0:	d102      	bne.n	80070b8 <_dtoa_r+0xb20>
 80070b2:	9b04      	ldr	r3, [sp, #16]
 80070b4:	07db      	lsls	r3, r3, #31
 80070b6:	d4b0      	bmi.n	800701a <_dtoa_r+0xa82>
 80070b8:	4633      	mov	r3, r6
 80070ba:	461e      	mov	r6, r3
 80070bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070c0:	2a30      	cmp	r2, #48	@ 0x30
 80070c2:	d0fa      	beq.n	80070ba <_dtoa_r+0xb22>
 80070c4:	e4b5      	b.n	8006a32 <_dtoa_r+0x49a>
 80070c6:	459a      	cmp	sl, r3
 80070c8:	d1a8      	bne.n	800701c <_dtoa_r+0xa84>
 80070ca:	2331      	movs	r3, #49	@ 0x31
 80070cc:	f108 0801 	add.w	r8, r8, #1
 80070d0:	f88a 3000 	strb.w	r3, [sl]
 80070d4:	e4ad      	b.n	8006a32 <_dtoa_r+0x49a>
 80070d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80070d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007134 <_dtoa_r+0xb9c>
 80070dc:	b11b      	cbz	r3, 80070e6 <_dtoa_r+0xb4e>
 80070de:	f10a 0308 	add.w	r3, sl, #8
 80070e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	4650      	mov	r0, sl
 80070e8:	b017      	add	sp, #92	@ 0x5c
 80070ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	f77f ae2e 	ble.w	8006d52 <_dtoa_r+0x7ba>
 80070f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80070fa:	2001      	movs	r0, #1
 80070fc:	e64d      	b.n	8006d9a <_dtoa_r+0x802>
 80070fe:	f1bb 0f00 	cmp.w	fp, #0
 8007102:	f77f aed9 	ble.w	8006eb8 <_dtoa_r+0x920>
 8007106:	4656      	mov	r6, sl
 8007108:	9803      	ldr	r0, [sp, #12]
 800710a:	4621      	mov	r1, r4
 800710c:	f7ff f9ba 	bl	8006484 <quorem>
 8007110:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007114:	f806 3b01 	strb.w	r3, [r6], #1
 8007118:	eba6 020a 	sub.w	r2, r6, sl
 800711c:	4593      	cmp	fp, r2
 800711e:	ddb4      	ble.n	800708a <_dtoa_r+0xaf2>
 8007120:	9903      	ldr	r1, [sp, #12]
 8007122:	2300      	movs	r3, #0
 8007124:	220a      	movs	r2, #10
 8007126:	4648      	mov	r0, r9
 8007128:	f000 f968 	bl	80073fc <__multadd>
 800712c:	9003      	str	r0, [sp, #12]
 800712e:	e7eb      	b.n	8007108 <_dtoa_r+0xb70>
 8007130:	08009d71 	.word	0x08009d71
 8007134:	08009cf5 	.word	0x08009cf5

08007138 <_free_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	4605      	mov	r5, r0
 800713c:	2900      	cmp	r1, #0
 800713e:	d041      	beq.n	80071c4 <_free_r+0x8c>
 8007140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007144:	1f0c      	subs	r4, r1, #4
 8007146:	2b00      	cmp	r3, #0
 8007148:	bfb8      	it	lt
 800714a:	18e4      	addlt	r4, r4, r3
 800714c:	f000 f8e8 	bl	8007320 <__malloc_lock>
 8007150:	4a1d      	ldr	r2, [pc, #116]	@ (80071c8 <_free_r+0x90>)
 8007152:	6813      	ldr	r3, [r2, #0]
 8007154:	b933      	cbnz	r3, 8007164 <_free_r+0x2c>
 8007156:	6063      	str	r3, [r4, #4]
 8007158:	6014      	str	r4, [r2, #0]
 800715a:	4628      	mov	r0, r5
 800715c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007160:	f000 b8e4 	b.w	800732c <__malloc_unlock>
 8007164:	42a3      	cmp	r3, r4
 8007166:	d908      	bls.n	800717a <_free_r+0x42>
 8007168:	6820      	ldr	r0, [r4, #0]
 800716a:	1821      	adds	r1, r4, r0
 800716c:	428b      	cmp	r3, r1
 800716e:	bf01      	itttt	eq
 8007170:	6819      	ldreq	r1, [r3, #0]
 8007172:	685b      	ldreq	r3, [r3, #4]
 8007174:	1809      	addeq	r1, r1, r0
 8007176:	6021      	streq	r1, [r4, #0]
 8007178:	e7ed      	b.n	8007156 <_free_r+0x1e>
 800717a:	461a      	mov	r2, r3
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	b10b      	cbz	r3, 8007184 <_free_r+0x4c>
 8007180:	42a3      	cmp	r3, r4
 8007182:	d9fa      	bls.n	800717a <_free_r+0x42>
 8007184:	6811      	ldr	r1, [r2, #0]
 8007186:	1850      	adds	r0, r2, r1
 8007188:	42a0      	cmp	r0, r4
 800718a:	d10b      	bne.n	80071a4 <_free_r+0x6c>
 800718c:	6820      	ldr	r0, [r4, #0]
 800718e:	4401      	add	r1, r0
 8007190:	1850      	adds	r0, r2, r1
 8007192:	4283      	cmp	r3, r0
 8007194:	6011      	str	r1, [r2, #0]
 8007196:	d1e0      	bne.n	800715a <_free_r+0x22>
 8007198:	6818      	ldr	r0, [r3, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	6053      	str	r3, [r2, #4]
 800719e:	4408      	add	r0, r1
 80071a0:	6010      	str	r0, [r2, #0]
 80071a2:	e7da      	b.n	800715a <_free_r+0x22>
 80071a4:	d902      	bls.n	80071ac <_free_r+0x74>
 80071a6:	230c      	movs	r3, #12
 80071a8:	602b      	str	r3, [r5, #0]
 80071aa:	e7d6      	b.n	800715a <_free_r+0x22>
 80071ac:	6820      	ldr	r0, [r4, #0]
 80071ae:	1821      	adds	r1, r4, r0
 80071b0:	428b      	cmp	r3, r1
 80071b2:	bf04      	itt	eq
 80071b4:	6819      	ldreq	r1, [r3, #0]
 80071b6:	685b      	ldreq	r3, [r3, #4]
 80071b8:	6063      	str	r3, [r4, #4]
 80071ba:	bf04      	itt	eq
 80071bc:	1809      	addeq	r1, r1, r0
 80071be:	6021      	streq	r1, [r4, #0]
 80071c0:	6054      	str	r4, [r2, #4]
 80071c2:	e7ca      	b.n	800715a <_free_r+0x22>
 80071c4:	bd38      	pop	{r3, r4, r5, pc}
 80071c6:	bf00      	nop
 80071c8:	200004f0 	.word	0x200004f0

080071cc <malloc>:
 80071cc:	4b02      	ldr	r3, [pc, #8]	@ (80071d8 <malloc+0xc>)
 80071ce:	4601      	mov	r1, r0
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	f000 b825 	b.w	8007220 <_malloc_r>
 80071d6:	bf00      	nop
 80071d8:	20000018 	.word	0x20000018

080071dc <sbrk_aligned>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	4e0f      	ldr	r6, [pc, #60]	@ (800721c <sbrk_aligned+0x40>)
 80071e0:	460c      	mov	r4, r1
 80071e2:	6831      	ldr	r1, [r6, #0]
 80071e4:	4605      	mov	r5, r0
 80071e6:	b911      	cbnz	r1, 80071ee <sbrk_aligned+0x12>
 80071e8:	f001 fdf4 	bl	8008dd4 <_sbrk_r>
 80071ec:	6030      	str	r0, [r6, #0]
 80071ee:	4621      	mov	r1, r4
 80071f0:	4628      	mov	r0, r5
 80071f2:	f001 fdef 	bl	8008dd4 <_sbrk_r>
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	d103      	bne.n	8007202 <sbrk_aligned+0x26>
 80071fa:	f04f 34ff 	mov.w	r4, #4294967295
 80071fe:	4620      	mov	r0, r4
 8007200:	bd70      	pop	{r4, r5, r6, pc}
 8007202:	1cc4      	adds	r4, r0, #3
 8007204:	f024 0403 	bic.w	r4, r4, #3
 8007208:	42a0      	cmp	r0, r4
 800720a:	d0f8      	beq.n	80071fe <sbrk_aligned+0x22>
 800720c:	1a21      	subs	r1, r4, r0
 800720e:	4628      	mov	r0, r5
 8007210:	f001 fde0 	bl	8008dd4 <_sbrk_r>
 8007214:	3001      	adds	r0, #1
 8007216:	d1f2      	bne.n	80071fe <sbrk_aligned+0x22>
 8007218:	e7ef      	b.n	80071fa <sbrk_aligned+0x1e>
 800721a:	bf00      	nop
 800721c:	200004ec 	.word	0x200004ec

08007220 <_malloc_r>:
 8007220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007224:	1ccd      	adds	r5, r1, #3
 8007226:	f025 0503 	bic.w	r5, r5, #3
 800722a:	3508      	adds	r5, #8
 800722c:	2d0c      	cmp	r5, #12
 800722e:	bf38      	it	cc
 8007230:	250c      	movcc	r5, #12
 8007232:	2d00      	cmp	r5, #0
 8007234:	4606      	mov	r6, r0
 8007236:	db01      	blt.n	800723c <_malloc_r+0x1c>
 8007238:	42a9      	cmp	r1, r5
 800723a:	d904      	bls.n	8007246 <_malloc_r+0x26>
 800723c:	230c      	movs	r3, #12
 800723e:	6033      	str	r3, [r6, #0]
 8007240:	2000      	movs	r0, #0
 8007242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007246:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800731c <_malloc_r+0xfc>
 800724a:	f000 f869 	bl	8007320 <__malloc_lock>
 800724e:	f8d8 3000 	ldr.w	r3, [r8]
 8007252:	461c      	mov	r4, r3
 8007254:	bb44      	cbnz	r4, 80072a8 <_malloc_r+0x88>
 8007256:	4629      	mov	r1, r5
 8007258:	4630      	mov	r0, r6
 800725a:	f7ff ffbf 	bl	80071dc <sbrk_aligned>
 800725e:	1c43      	adds	r3, r0, #1
 8007260:	4604      	mov	r4, r0
 8007262:	d158      	bne.n	8007316 <_malloc_r+0xf6>
 8007264:	f8d8 4000 	ldr.w	r4, [r8]
 8007268:	4627      	mov	r7, r4
 800726a:	2f00      	cmp	r7, #0
 800726c:	d143      	bne.n	80072f6 <_malloc_r+0xd6>
 800726e:	2c00      	cmp	r4, #0
 8007270:	d04b      	beq.n	800730a <_malloc_r+0xea>
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	4639      	mov	r1, r7
 8007276:	4630      	mov	r0, r6
 8007278:	eb04 0903 	add.w	r9, r4, r3
 800727c:	f001 fdaa 	bl	8008dd4 <_sbrk_r>
 8007280:	4581      	cmp	r9, r0
 8007282:	d142      	bne.n	800730a <_malloc_r+0xea>
 8007284:	6821      	ldr	r1, [r4, #0]
 8007286:	1a6d      	subs	r5, r5, r1
 8007288:	4629      	mov	r1, r5
 800728a:	4630      	mov	r0, r6
 800728c:	f7ff ffa6 	bl	80071dc <sbrk_aligned>
 8007290:	3001      	adds	r0, #1
 8007292:	d03a      	beq.n	800730a <_malloc_r+0xea>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	442b      	add	r3, r5
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	f8d8 3000 	ldr.w	r3, [r8]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	bb62      	cbnz	r2, 80072fc <_malloc_r+0xdc>
 80072a2:	f8c8 7000 	str.w	r7, [r8]
 80072a6:	e00f      	b.n	80072c8 <_malloc_r+0xa8>
 80072a8:	6822      	ldr	r2, [r4, #0]
 80072aa:	1b52      	subs	r2, r2, r5
 80072ac:	d420      	bmi.n	80072f0 <_malloc_r+0xd0>
 80072ae:	2a0b      	cmp	r2, #11
 80072b0:	d917      	bls.n	80072e2 <_malloc_r+0xc2>
 80072b2:	1961      	adds	r1, r4, r5
 80072b4:	42a3      	cmp	r3, r4
 80072b6:	6025      	str	r5, [r4, #0]
 80072b8:	bf18      	it	ne
 80072ba:	6059      	strne	r1, [r3, #4]
 80072bc:	6863      	ldr	r3, [r4, #4]
 80072be:	bf08      	it	eq
 80072c0:	f8c8 1000 	streq.w	r1, [r8]
 80072c4:	5162      	str	r2, [r4, r5]
 80072c6:	604b      	str	r3, [r1, #4]
 80072c8:	4630      	mov	r0, r6
 80072ca:	f000 f82f 	bl	800732c <__malloc_unlock>
 80072ce:	f104 000b 	add.w	r0, r4, #11
 80072d2:	1d23      	adds	r3, r4, #4
 80072d4:	f020 0007 	bic.w	r0, r0, #7
 80072d8:	1ac2      	subs	r2, r0, r3
 80072da:	bf1c      	itt	ne
 80072dc:	1a1b      	subne	r3, r3, r0
 80072de:	50a3      	strne	r3, [r4, r2]
 80072e0:	e7af      	b.n	8007242 <_malloc_r+0x22>
 80072e2:	6862      	ldr	r2, [r4, #4]
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	bf0c      	ite	eq
 80072e8:	f8c8 2000 	streq.w	r2, [r8]
 80072ec:	605a      	strne	r2, [r3, #4]
 80072ee:	e7eb      	b.n	80072c8 <_malloc_r+0xa8>
 80072f0:	4623      	mov	r3, r4
 80072f2:	6864      	ldr	r4, [r4, #4]
 80072f4:	e7ae      	b.n	8007254 <_malloc_r+0x34>
 80072f6:	463c      	mov	r4, r7
 80072f8:	687f      	ldr	r7, [r7, #4]
 80072fa:	e7b6      	b.n	800726a <_malloc_r+0x4a>
 80072fc:	461a      	mov	r2, r3
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	42a3      	cmp	r3, r4
 8007302:	d1fb      	bne.n	80072fc <_malloc_r+0xdc>
 8007304:	2300      	movs	r3, #0
 8007306:	6053      	str	r3, [r2, #4]
 8007308:	e7de      	b.n	80072c8 <_malloc_r+0xa8>
 800730a:	230c      	movs	r3, #12
 800730c:	6033      	str	r3, [r6, #0]
 800730e:	4630      	mov	r0, r6
 8007310:	f000 f80c 	bl	800732c <__malloc_unlock>
 8007314:	e794      	b.n	8007240 <_malloc_r+0x20>
 8007316:	6005      	str	r5, [r0, #0]
 8007318:	e7d6      	b.n	80072c8 <_malloc_r+0xa8>
 800731a:	bf00      	nop
 800731c:	200004f0 	.word	0x200004f0

08007320 <__malloc_lock>:
 8007320:	4801      	ldr	r0, [pc, #4]	@ (8007328 <__malloc_lock+0x8>)
 8007322:	f7ff b8a8 	b.w	8006476 <__retarget_lock_acquire_recursive>
 8007326:	bf00      	nop
 8007328:	200004e8 	.word	0x200004e8

0800732c <__malloc_unlock>:
 800732c:	4801      	ldr	r0, [pc, #4]	@ (8007334 <__malloc_unlock+0x8>)
 800732e:	f7ff b8a3 	b.w	8006478 <__retarget_lock_release_recursive>
 8007332:	bf00      	nop
 8007334:	200004e8 	.word	0x200004e8

08007338 <_Balloc>:
 8007338:	b570      	push	{r4, r5, r6, lr}
 800733a:	69c6      	ldr	r6, [r0, #28]
 800733c:	4604      	mov	r4, r0
 800733e:	460d      	mov	r5, r1
 8007340:	b976      	cbnz	r6, 8007360 <_Balloc+0x28>
 8007342:	2010      	movs	r0, #16
 8007344:	f7ff ff42 	bl	80071cc <malloc>
 8007348:	4602      	mov	r2, r0
 800734a:	61e0      	str	r0, [r4, #28]
 800734c:	b920      	cbnz	r0, 8007358 <_Balloc+0x20>
 800734e:	4b18      	ldr	r3, [pc, #96]	@ (80073b0 <_Balloc+0x78>)
 8007350:	4818      	ldr	r0, [pc, #96]	@ (80073b4 <_Balloc+0x7c>)
 8007352:	216b      	movs	r1, #107	@ 0x6b
 8007354:	f001 fd62 	bl	8008e1c <__assert_func>
 8007358:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800735c:	6006      	str	r6, [r0, #0]
 800735e:	60c6      	str	r6, [r0, #12]
 8007360:	69e6      	ldr	r6, [r4, #28]
 8007362:	68f3      	ldr	r3, [r6, #12]
 8007364:	b183      	cbz	r3, 8007388 <_Balloc+0x50>
 8007366:	69e3      	ldr	r3, [r4, #28]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800736e:	b9b8      	cbnz	r0, 80073a0 <_Balloc+0x68>
 8007370:	2101      	movs	r1, #1
 8007372:	fa01 f605 	lsl.w	r6, r1, r5
 8007376:	1d72      	adds	r2, r6, #5
 8007378:	0092      	lsls	r2, r2, #2
 800737a:	4620      	mov	r0, r4
 800737c:	f001 fd6c 	bl	8008e58 <_calloc_r>
 8007380:	b160      	cbz	r0, 800739c <_Balloc+0x64>
 8007382:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007386:	e00e      	b.n	80073a6 <_Balloc+0x6e>
 8007388:	2221      	movs	r2, #33	@ 0x21
 800738a:	2104      	movs	r1, #4
 800738c:	4620      	mov	r0, r4
 800738e:	f001 fd63 	bl	8008e58 <_calloc_r>
 8007392:	69e3      	ldr	r3, [r4, #28]
 8007394:	60f0      	str	r0, [r6, #12]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e4      	bne.n	8007366 <_Balloc+0x2e>
 800739c:	2000      	movs	r0, #0
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	6802      	ldr	r2, [r0, #0]
 80073a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073a6:	2300      	movs	r3, #0
 80073a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073ac:	e7f7      	b.n	800739e <_Balloc+0x66>
 80073ae:	bf00      	nop
 80073b0:	08009d02 	.word	0x08009d02
 80073b4:	08009d82 	.word	0x08009d82

080073b8 <_Bfree>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	69c6      	ldr	r6, [r0, #28]
 80073bc:	4605      	mov	r5, r0
 80073be:	460c      	mov	r4, r1
 80073c0:	b976      	cbnz	r6, 80073e0 <_Bfree+0x28>
 80073c2:	2010      	movs	r0, #16
 80073c4:	f7ff ff02 	bl	80071cc <malloc>
 80073c8:	4602      	mov	r2, r0
 80073ca:	61e8      	str	r0, [r5, #28]
 80073cc:	b920      	cbnz	r0, 80073d8 <_Bfree+0x20>
 80073ce:	4b09      	ldr	r3, [pc, #36]	@ (80073f4 <_Bfree+0x3c>)
 80073d0:	4809      	ldr	r0, [pc, #36]	@ (80073f8 <_Bfree+0x40>)
 80073d2:	218f      	movs	r1, #143	@ 0x8f
 80073d4:	f001 fd22 	bl	8008e1c <__assert_func>
 80073d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073dc:	6006      	str	r6, [r0, #0]
 80073de:	60c6      	str	r6, [r0, #12]
 80073e0:	b13c      	cbz	r4, 80073f2 <_Bfree+0x3a>
 80073e2:	69eb      	ldr	r3, [r5, #28]
 80073e4:	6862      	ldr	r2, [r4, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073ec:	6021      	str	r1, [r4, #0]
 80073ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	08009d02 	.word	0x08009d02
 80073f8:	08009d82 	.word	0x08009d82

080073fc <__multadd>:
 80073fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007400:	690d      	ldr	r5, [r1, #16]
 8007402:	4607      	mov	r7, r0
 8007404:	460c      	mov	r4, r1
 8007406:	461e      	mov	r6, r3
 8007408:	f101 0c14 	add.w	ip, r1, #20
 800740c:	2000      	movs	r0, #0
 800740e:	f8dc 3000 	ldr.w	r3, [ip]
 8007412:	b299      	uxth	r1, r3
 8007414:	fb02 6101 	mla	r1, r2, r1, r6
 8007418:	0c1e      	lsrs	r6, r3, #16
 800741a:	0c0b      	lsrs	r3, r1, #16
 800741c:	fb02 3306 	mla	r3, r2, r6, r3
 8007420:	b289      	uxth	r1, r1
 8007422:	3001      	adds	r0, #1
 8007424:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007428:	4285      	cmp	r5, r0
 800742a:	f84c 1b04 	str.w	r1, [ip], #4
 800742e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007432:	dcec      	bgt.n	800740e <__multadd+0x12>
 8007434:	b30e      	cbz	r6, 800747a <__multadd+0x7e>
 8007436:	68a3      	ldr	r3, [r4, #8]
 8007438:	42ab      	cmp	r3, r5
 800743a:	dc19      	bgt.n	8007470 <__multadd+0x74>
 800743c:	6861      	ldr	r1, [r4, #4]
 800743e:	4638      	mov	r0, r7
 8007440:	3101      	adds	r1, #1
 8007442:	f7ff ff79 	bl	8007338 <_Balloc>
 8007446:	4680      	mov	r8, r0
 8007448:	b928      	cbnz	r0, 8007456 <__multadd+0x5a>
 800744a:	4602      	mov	r2, r0
 800744c:	4b0c      	ldr	r3, [pc, #48]	@ (8007480 <__multadd+0x84>)
 800744e:	480d      	ldr	r0, [pc, #52]	@ (8007484 <__multadd+0x88>)
 8007450:	21ba      	movs	r1, #186	@ 0xba
 8007452:	f001 fce3 	bl	8008e1c <__assert_func>
 8007456:	6922      	ldr	r2, [r4, #16]
 8007458:	3202      	adds	r2, #2
 800745a:	f104 010c 	add.w	r1, r4, #12
 800745e:	0092      	lsls	r2, r2, #2
 8007460:	300c      	adds	r0, #12
 8007462:	f001 fcc7 	bl	8008df4 <memcpy>
 8007466:	4621      	mov	r1, r4
 8007468:	4638      	mov	r0, r7
 800746a:	f7ff ffa5 	bl	80073b8 <_Bfree>
 800746e:	4644      	mov	r4, r8
 8007470:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007474:	3501      	adds	r5, #1
 8007476:	615e      	str	r6, [r3, #20]
 8007478:	6125      	str	r5, [r4, #16]
 800747a:	4620      	mov	r0, r4
 800747c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007480:	08009d71 	.word	0x08009d71
 8007484:	08009d82 	.word	0x08009d82

08007488 <__s2b>:
 8007488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800748c:	460c      	mov	r4, r1
 800748e:	4615      	mov	r5, r2
 8007490:	461f      	mov	r7, r3
 8007492:	2209      	movs	r2, #9
 8007494:	3308      	adds	r3, #8
 8007496:	4606      	mov	r6, r0
 8007498:	fb93 f3f2 	sdiv	r3, r3, r2
 800749c:	2100      	movs	r1, #0
 800749e:	2201      	movs	r2, #1
 80074a0:	429a      	cmp	r2, r3
 80074a2:	db09      	blt.n	80074b8 <__s2b+0x30>
 80074a4:	4630      	mov	r0, r6
 80074a6:	f7ff ff47 	bl	8007338 <_Balloc>
 80074aa:	b940      	cbnz	r0, 80074be <__s2b+0x36>
 80074ac:	4602      	mov	r2, r0
 80074ae:	4b19      	ldr	r3, [pc, #100]	@ (8007514 <__s2b+0x8c>)
 80074b0:	4819      	ldr	r0, [pc, #100]	@ (8007518 <__s2b+0x90>)
 80074b2:	21d3      	movs	r1, #211	@ 0xd3
 80074b4:	f001 fcb2 	bl	8008e1c <__assert_func>
 80074b8:	0052      	lsls	r2, r2, #1
 80074ba:	3101      	adds	r1, #1
 80074bc:	e7f0      	b.n	80074a0 <__s2b+0x18>
 80074be:	9b08      	ldr	r3, [sp, #32]
 80074c0:	6143      	str	r3, [r0, #20]
 80074c2:	2d09      	cmp	r5, #9
 80074c4:	f04f 0301 	mov.w	r3, #1
 80074c8:	6103      	str	r3, [r0, #16]
 80074ca:	dd16      	ble.n	80074fa <__s2b+0x72>
 80074cc:	f104 0909 	add.w	r9, r4, #9
 80074d0:	46c8      	mov	r8, r9
 80074d2:	442c      	add	r4, r5
 80074d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80074d8:	4601      	mov	r1, r0
 80074da:	3b30      	subs	r3, #48	@ 0x30
 80074dc:	220a      	movs	r2, #10
 80074de:	4630      	mov	r0, r6
 80074e0:	f7ff ff8c 	bl	80073fc <__multadd>
 80074e4:	45a0      	cmp	r8, r4
 80074e6:	d1f5      	bne.n	80074d4 <__s2b+0x4c>
 80074e8:	f1a5 0408 	sub.w	r4, r5, #8
 80074ec:	444c      	add	r4, r9
 80074ee:	1b2d      	subs	r5, r5, r4
 80074f0:	1963      	adds	r3, r4, r5
 80074f2:	42bb      	cmp	r3, r7
 80074f4:	db04      	blt.n	8007500 <__s2b+0x78>
 80074f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074fa:	340a      	adds	r4, #10
 80074fc:	2509      	movs	r5, #9
 80074fe:	e7f6      	b.n	80074ee <__s2b+0x66>
 8007500:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007504:	4601      	mov	r1, r0
 8007506:	3b30      	subs	r3, #48	@ 0x30
 8007508:	220a      	movs	r2, #10
 800750a:	4630      	mov	r0, r6
 800750c:	f7ff ff76 	bl	80073fc <__multadd>
 8007510:	e7ee      	b.n	80074f0 <__s2b+0x68>
 8007512:	bf00      	nop
 8007514:	08009d71 	.word	0x08009d71
 8007518:	08009d82 	.word	0x08009d82

0800751c <__hi0bits>:
 800751c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007520:	4603      	mov	r3, r0
 8007522:	bf36      	itet	cc
 8007524:	0403      	lslcc	r3, r0, #16
 8007526:	2000      	movcs	r0, #0
 8007528:	2010      	movcc	r0, #16
 800752a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800752e:	bf3c      	itt	cc
 8007530:	021b      	lslcc	r3, r3, #8
 8007532:	3008      	addcc	r0, #8
 8007534:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007538:	bf3c      	itt	cc
 800753a:	011b      	lslcc	r3, r3, #4
 800753c:	3004      	addcc	r0, #4
 800753e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007542:	bf3c      	itt	cc
 8007544:	009b      	lslcc	r3, r3, #2
 8007546:	3002      	addcc	r0, #2
 8007548:	2b00      	cmp	r3, #0
 800754a:	db05      	blt.n	8007558 <__hi0bits+0x3c>
 800754c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007550:	f100 0001 	add.w	r0, r0, #1
 8007554:	bf08      	it	eq
 8007556:	2020      	moveq	r0, #32
 8007558:	4770      	bx	lr

0800755a <__lo0bits>:
 800755a:	6803      	ldr	r3, [r0, #0]
 800755c:	4602      	mov	r2, r0
 800755e:	f013 0007 	ands.w	r0, r3, #7
 8007562:	d00b      	beq.n	800757c <__lo0bits+0x22>
 8007564:	07d9      	lsls	r1, r3, #31
 8007566:	d421      	bmi.n	80075ac <__lo0bits+0x52>
 8007568:	0798      	lsls	r0, r3, #30
 800756a:	bf49      	itett	mi
 800756c:	085b      	lsrmi	r3, r3, #1
 800756e:	089b      	lsrpl	r3, r3, #2
 8007570:	2001      	movmi	r0, #1
 8007572:	6013      	strmi	r3, [r2, #0]
 8007574:	bf5c      	itt	pl
 8007576:	6013      	strpl	r3, [r2, #0]
 8007578:	2002      	movpl	r0, #2
 800757a:	4770      	bx	lr
 800757c:	b299      	uxth	r1, r3
 800757e:	b909      	cbnz	r1, 8007584 <__lo0bits+0x2a>
 8007580:	0c1b      	lsrs	r3, r3, #16
 8007582:	2010      	movs	r0, #16
 8007584:	b2d9      	uxtb	r1, r3
 8007586:	b909      	cbnz	r1, 800758c <__lo0bits+0x32>
 8007588:	3008      	adds	r0, #8
 800758a:	0a1b      	lsrs	r3, r3, #8
 800758c:	0719      	lsls	r1, r3, #28
 800758e:	bf04      	itt	eq
 8007590:	091b      	lsreq	r3, r3, #4
 8007592:	3004      	addeq	r0, #4
 8007594:	0799      	lsls	r1, r3, #30
 8007596:	bf04      	itt	eq
 8007598:	089b      	lsreq	r3, r3, #2
 800759a:	3002      	addeq	r0, #2
 800759c:	07d9      	lsls	r1, r3, #31
 800759e:	d403      	bmi.n	80075a8 <__lo0bits+0x4e>
 80075a0:	085b      	lsrs	r3, r3, #1
 80075a2:	f100 0001 	add.w	r0, r0, #1
 80075a6:	d003      	beq.n	80075b0 <__lo0bits+0x56>
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	4770      	bx	lr
 80075ac:	2000      	movs	r0, #0
 80075ae:	4770      	bx	lr
 80075b0:	2020      	movs	r0, #32
 80075b2:	4770      	bx	lr

080075b4 <__i2b>:
 80075b4:	b510      	push	{r4, lr}
 80075b6:	460c      	mov	r4, r1
 80075b8:	2101      	movs	r1, #1
 80075ba:	f7ff febd 	bl	8007338 <_Balloc>
 80075be:	4602      	mov	r2, r0
 80075c0:	b928      	cbnz	r0, 80075ce <__i2b+0x1a>
 80075c2:	4b05      	ldr	r3, [pc, #20]	@ (80075d8 <__i2b+0x24>)
 80075c4:	4805      	ldr	r0, [pc, #20]	@ (80075dc <__i2b+0x28>)
 80075c6:	f240 1145 	movw	r1, #325	@ 0x145
 80075ca:	f001 fc27 	bl	8008e1c <__assert_func>
 80075ce:	2301      	movs	r3, #1
 80075d0:	6144      	str	r4, [r0, #20]
 80075d2:	6103      	str	r3, [r0, #16]
 80075d4:	bd10      	pop	{r4, pc}
 80075d6:	bf00      	nop
 80075d8:	08009d71 	.word	0x08009d71
 80075dc:	08009d82 	.word	0x08009d82

080075e0 <__multiply>:
 80075e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e4:	4617      	mov	r7, r2
 80075e6:	690a      	ldr	r2, [r1, #16]
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	bfa8      	it	ge
 80075ee:	463b      	movge	r3, r7
 80075f0:	4689      	mov	r9, r1
 80075f2:	bfa4      	itt	ge
 80075f4:	460f      	movge	r7, r1
 80075f6:	4699      	movge	r9, r3
 80075f8:	693d      	ldr	r5, [r7, #16]
 80075fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	6879      	ldr	r1, [r7, #4]
 8007602:	eb05 060a 	add.w	r6, r5, sl
 8007606:	42b3      	cmp	r3, r6
 8007608:	b085      	sub	sp, #20
 800760a:	bfb8      	it	lt
 800760c:	3101      	addlt	r1, #1
 800760e:	f7ff fe93 	bl	8007338 <_Balloc>
 8007612:	b930      	cbnz	r0, 8007622 <__multiply+0x42>
 8007614:	4602      	mov	r2, r0
 8007616:	4b41      	ldr	r3, [pc, #260]	@ (800771c <__multiply+0x13c>)
 8007618:	4841      	ldr	r0, [pc, #260]	@ (8007720 <__multiply+0x140>)
 800761a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800761e:	f001 fbfd 	bl	8008e1c <__assert_func>
 8007622:	f100 0414 	add.w	r4, r0, #20
 8007626:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800762a:	4623      	mov	r3, r4
 800762c:	2200      	movs	r2, #0
 800762e:	4573      	cmp	r3, lr
 8007630:	d320      	bcc.n	8007674 <__multiply+0x94>
 8007632:	f107 0814 	add.w	r8, r7, #20
 8007636:	f109 0114 	add.w	r1, r9, #20
 800763a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800763e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007642:	9302      	str	r3, [sp, #8]
 8007644:	1beb      	subs	r3, r5, r7
 8007646:	3b15      	subs	r3, #21
 8007648:	f023 0303 	bic.w	r3, r3, #3
 800764c:	3304      	adds	r3, #4
 800764e:	3715      	adds	r7, #21
 8007650:	42bd      	cmp	r5, r7
 8007652:	bf38      	it	cc
 8007654:	2304      	movcc	r3, #4
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	9b02      	ldr	r3, [sp, #8]
 800765a:	9103      	str	r1, [sp, #12]
 800765c:	428b      	cmp	r3, r1
 800765e:	d80c      	bhi.n	800767a <__multiply+0x9a>
 8007660:	2e00      	cmp	r6, #0
 8007662:	dd03      	ble.n	800766c <__multiply+0x8c>
 8007664:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007668:	2b00      	cmp	r3, #0
 800766a:	d055      	beq.n	8007718 <__multiply+0x138>
 800766c:	6106      	str	r6, [r0, #16]
 800766e:	b005      	add	sp, #20
 8007670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007674:	f843 2b04 	str.w	r2, [r3], #4
 8007678:	e7d9      	b.n	800762e <__multiply+0x4e>
 800767a:	f8b1 a000 	ldrh.w	sl, [r1]
 800767e:	f1ba 0f00 	cmp.w	sl, #0
 8007682:	d01f      	beq.n	80076c4 <__multiply+0xe4>
 8007684:	46c4      	mov	ip, r8
 8007686:	46a1      	mov	r9, r4
 8007688:	2700      	movs	r7, #0
 800768a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800768e:	f8d9 3000 	ldr.w	r3, [r9]
 8007692:	fa1f fb82 	uxth.w	fp, r2
 8007696:	b29b      	uxth	r3, r3
 8007698:	fb0a 330b 	mla	r3, sl, fp, r3
 800769c:	443b      	add	r3, r7
 800769e:	f8d9 7000 	ldr.w	r7, [r9]
 80076a2:	0c12      	lsrs	r2, r2, #16
 80076a4:	0c3f      	lsrs	r7, r7, #16
 80076a6:	fb0a 7202 	mla	r2, sl, r2, r7
 80076aa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076b4:	4565      	cmp	r5, ip
 80076b6:	f849 3b04 	str.w	r3, [r9], #4
 80076ba:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80076be:	d8e4      	bhi.n	800768a <__multiply+0xaa>
 80076c0:	9b01      	ldr	r3, [sp, #4]
 80076c2:	50e7      	str	r7, [r4, r3]
 80076c4:	9b03      	ldr	r3, [sp, #12]
 80076c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80076ca:	3104      	adds	r1, #4
 80076cc:	f1b9 0f00 	cmp.w	r9, #0
 80076d0:	d020      	beq.n	8007714 <__multiply+0x134>
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	4647      	mov	r7, r8
 80076d6:	46a4      	mov	ip, r4
 80076d8:	f04f 0a00 	mov.w	sl, #0
 80076dc:	f8b7 b000 	ldrh.w	fp, [r7]
 80076e0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80076e4:	fb09 220b 	mla	r2, r9, fp, r2
 80076e8:	4452      	add	r2, sl
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076f0:	f84c 3b04 	str.w	r3, [ip], #4
 80076f4:	f857 3b04 	ldr.w	r3, [r7], #4
 80076f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076fc:	f8bc 3000 	ldrh.w	r3, [ip]
 8007700:	fb09 330a 	mla	r3, r9, sl, r3
 8007704:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007708:	42bd      	cmp	r5, r7
 800770a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800770e:	d8e5      	bhi.n	80076dc <__multiply+0xfc>
 8007710:	9a01      	ldr	r2, [sp, #4]
 8007712:	50a3      	str	r3, [r4, r2]
 8007714:	3404      	adds	r4, #4
 8007716:	e79f      	b.n	8007658 <__multiply+0x78>
 8007718:	3e01      	subs	r6, #1
 800771a:	e7a1      	b.n	8007660 <__multiply+0x80>
 800771c:	08009d71 	.word	0x08009d71
 8007720:	08009d82 	.word	0x08009d82

08007724 <__pow5mult>:
 8007724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007728:	4615      	mov	r5, r2
 800772a:	f012 0203 	ands.w	r2, r2, #3
 800772e:	4607      	mov	r7, r0
 8007730:	460e      	mov	r6, r1
 8007732:	d007      	beq.n	8007744 <__pow5mult+0x20>
 8007734:	4c25      	ldr	r4, [pc, #148]	@ (80077cc <__pow5mult+0xa8>)
 8007736:	3a01      	subs	r2, #1
 8007738:	2300      	movs	r3, #0
 800773a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800773e:	f7ff fe5d 	bl	80073fc <__multadd>
 8007742:	4606      	mov	r6, r0
 8007744:	10ad      	asrs	r5, r5, #2
 8007746:	d03d      	beq.n	80077c4 <__pow5mult+0xa0>
 8007748:	69fc      	ldr	r4, [r7, #28]
 800774a:	b97c      	cbnz	r4, 800776c <__pow5mult+0x48>
 800774c:	2010      	movs	r0, #16
 800774e:	f7ff fd3d 	bl	80071cc <malloc>
 8007752:	4602      	mov	r2, r0
 8007754:	61f8      	str	r0, [r7, #28]
 8007756:	b928      	cbnz	r0, 8007764 <__pow5mult+0x40>
 8007758:	4b1d      	ldr	r3, [pc, #116]	@ (80077d0 <__pow5mult+0xac>)
 800775a:	481e      	ldr	r0, [pc, #120]	@ (80077d4 <__pow5mult+0xb0>)
 800775c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007760:	f001 fb5c 	bl	8008e1c <__assert_func>
 8007764:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007768:	6004      	str	r4, [r0, #0]
 800776a:	60c4      	str	r4, [r0, #12]
 800776c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007770:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007774:	b94c      	cbnz	r4, 800778a <__pow5mult+0x66>
 8007776:	f240 2171 	movw	r1, #625	@ 0x271
 800777a:	4638      	mov	r0, r7
 800777c:	f7ff ff1a 	bl	80075b4 <__i2b>
 8007780:	2300      	movs	r3, #0
 8007782:	f8c8 0008 	str.w	r0, [r8, #8]
 8007786:	4604      	mov	r4, r0
 8007788:	6003      	str	r3, [r0, #0]
 800778a:	f04f 0900 	mov.w	r9, #0
 800778e:	07eb      	lsls	r3, r5, #31
 8007790:	d50a      	bpl.n	80077a8 <__pow5mult+0x84>
 8007792:	4631      	mov	r1, r6
 8007794:	4622      	mov	r2, r4
 8007796:	4638      	mov	r0, r7
 8007798:	f7ff ff22 	bl	80075e0 <__multiply>
 800779c:	4631      	mov	r1, r6
 800779e:	4680      	mov	r8, r0
 80077a0:	4638      	mov	r0, r7
 80077a2:	f7ff fe09 	bl	80073b8 <_Bfree>
 80077a6:	4646      	mov	r6, r8
 80077a8:	106d      	asrs	r5, r5, #1
 80077aa:	d00b      	beq.n	80077c4 <__pow5mult+0xa0>
 80077ac:	6820      	ldr	r0, [r4, #0]
 80077ae:	b938      	cbnz	r0, 80077c0 <__pow5mult+0x9c>
 80077b0:	4622      	mov	r2, r4
 80077b2:	4621      	mov	r1, r4
 80077b4:	4638      	mov	r0, r7
 80077b6:	f7ff ff13 	bl	80075e0 <__multiply>
 80077ba:	6020      	str	r0, [r4, #0]
 80077bc:	f8c0 9000 	str.w	r9, [r0]
 80077c0:	4604      	mov	r4, r0
 80077c2:	e7e4      	b.n	800778e <__pow5mult+0x6a>
 80077c4:	4630      	mov	r0, r6
 80077c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ca:	bf00      	nop
 80077cc:	08009e94 	.word	0x08009e94
 80077d0:	08009d02 	.word	0x08009d02
 80077d4:	08009d82 	.word	0x08009d82

080077d8 <__lshift>:
 80077d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077dc:	460c      	mov	r4, r1
 80077de:	6849      	ldr	r1, [r1, #4]
 80077e0:	6923      	ldr	r3, [r4, #16]
 80077e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077e6:	68a3      	ldr	r3, [r4, #8]
 80077e8:	4607      	mov	r7, r0
 80077ea:	4691      	mov	r9, r2
 80077ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077f0:	f108 0601 	add.w	r6, r8, #1
 80077f4:	42b3      	cmp	r3, r6
 80077f6:	db0b      	blt.n	8007810 <__lshift+0x38>
 80077f8:	4638      	mov	r0, r7
 80077fa:	f7ff fd9d 	bl	8007338 <_Balloc>
 80077fe:	4605      	mov	r5, r0
 8007800:	b948      	cbnz	r0, 8007816 <__lshift+0x3e>
 8007802:	4602      	mov	r2, r0
 8007804:	4b28      	ldr	r3, [pc, #160]	@ (80078a8 <__lshift+0xd0>)
 8007806:	4829      	ldr	r0, [pc, #164]	@ (80078ac <__lshift+0xd4>)
 8007808:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800780c:	f001 fb06 	bl	8008e1c <__assert_func>
 8007810:	3101      	adds	r1, #1
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	e7ee      	b.n	80077f4 <__lshift+0x1c>
 8007816:	2300      	movs	r3, #0
 8007818:	f100 0114 	add.w	r1, r0, #20
 800781c:	f100 0210 	add.w	r2, r0, #16
 8007820:	4618      	mov	r0, r3
 8007822:	4553      	cmp	r3, sl
 8007824:	db33      	blt.n	800788e <__lshift+0xb6>
 8007826:	6920      	ldr	r0, [r4, #16]
 8007828:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800782c:	f104 0314 	add.w	r3, r4, #20
 8007830:	f019 091f 	ands.w	r9, r9, #31
 8007834:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007838:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800783c:	d02b      	beq.n	8007896 <__lshift+0xbe>
 800783e:	f1c9 0e20 	rsb	lr, r9, #32
 8007842:	468a      	mov	sl, r1
 8007844:	2200      	movs	r2, #0
 8007846:	6818      	ldr	r0, [r3, #0]
 8007848:	fa00 f009 	lsl.w	r0, r0, r9
 800784c:	4310      	orrs	r0, r2
 800784e:	f84a 0b04 	str.w	r0, [sl], #4
 8007852:	f853 2b04 	ldr.w	r2, [r3], #4
 8007856:	459c      	cmp	ip, r3
 8007858:	fa22 f20e 	lsr.w	r2, r2, lr
 800785c:	d8f3      	bhi.n	8007846 <__lshift+0x6e>
 800785e:	ebac 0304 	sub.w	r3, ip, r4
 8007862:	3b15      	subs	r3, #21
 8007864:	f023 0303 	bic.w	r3, r3, #3
 8007868:	3304      	adds	r3, #4
 800786a:	f104 0015 	add.w	r0, r4, #21
 800786e:	4560      	cmp	r0, ip
 8007870:	bf88      	it	hi
 8007872:	2304      	movhi	r3, #4
 8007874:	50ca      	str	r2, [r1, r3]
 8007876:	b10a      	cbz	r2, 800787c <__lshift+0xa4>
 8007878:	f108 0602 	add.w	r6, r8, #2
 800787c:	3e01      	subs	r6, #1
 800787e:	4638      	mov	r0, r7
 8007880:	612e      	str	r6, [r5, #16]
 8007882:	4621      	mov	r1, r4
 8007884:	f7ff fd98 	bl	80073b8 <_Bfree>
 8007888:	4628      	mov	r0, r5
 800788a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800788e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007892:	3301      	adds	r3, #1
 8007894:	e7c5      	b.n	8007822 <__lshift+0x4a>
 8007896:	3904      	subs	r1, #4
 8007898:	f853 2b04 	ldr.w	r2, [r3], #4
 800789c:	f841 2f04 	str.w	r2, [r1, #4]!
 80078a0:	459c      	cmp	ip, r3
 80078a2:	d8f9      	bhi.n	8007898 <__lshift+0xc0>
 80078a4:	e7ea      	b.n	800787c <__lshift+0xa4>
 80078a6:	bf00      	nop
 80078a8:	08009d71 	.word	0x08009d71
 80078ac:	08009d82 	.word	0x08009d82

080078b0 <__mcmp>:
 80078b0:	690a      	ldr	r2, [r1, #16]
 80078b2:	4603      	mov	r3, r0
 80078b4:	6900      	ldr	r0, [r0, #16]
 80078b6:	1a80      	subs	r0, r0, r2
 80078b8:	b530      	push	{r4, r5, lr}
 80078ba:	d10e      	bne.n	80078da <__mcmp+0x2a>
 80078bc:	3314      	adds	r3, #20
 80078be:	3114      	adds	r1, #20
 80078c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80078c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80078c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80078d0:	4295      	cmp	r5, r2
 80078d2:	d003      	beq.n	80078dc <__mcmp+0x2c>
 80078d4:	d205      	bcs.n	80078e2 <__mcmp+0x32>
 80078d6:	f04f 30ff 	mov.w	r0, #4294967295
 80078da:	bd30      	pop	{r4, r5, pc}
 80078dc:	42a3      	cmp	r3, r4
 80078de:	d3f3      	bcc.n	80078c8 <__mcmp+0x18>
 80078e0:	e7fb      	b.n	80078da <__mcmp+0x2a>
 80078e2:	2001      	movs	r0, #1
 80078e4:	e7f9      	b.n	80078da <__mcmp+0x2a>
	...

080078e8 <__mdiff>:
 80078e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	4689      	mov	r9, r1
 80078ee:	4606      	mov	r6, r0
 80078f0:	4611      	mov	r1, r2
 80078f2:	4648      	mov	r0, r9
 80078f4:	4614      	mov	r4, r2
 80078f6:	f7ff ffdb 	bl	80078b0 <__mcmp>
 80078fa:	1e05      	subs	r5, r0, #0
 80078fc:	d112      	bne.n	8007924 <__mdiff+0x3c>
 80078fe:	4629      	mov	r1, r5
 8007900:	4630      	mov	r0, r6
 8007902:	f7ff fd19 	bl	8007338 <_Balloc>
 8007906:	4602      	mov	r2, r0
 8007908:	b928      	cbnz	r0, 8007916 <__mdiff+0x2e>
 800790a:	4b3f      	ldr	r3, [pc, #252]	@ (8007a08 <__mdiff+0x120>)
 800790c:	f240 2137 	movw	r1, #567	@ 0x237
 8007910:	483e      	ldr	r0, [pc, #248]	@ (8007a0c <__mdiff+0x124>)
 8007912:	f001 fa83 	bl	8008e1c <__assert_func>
 8007916:	2301      	movs	r3, #1
 8007918:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800791c:	4610      	mov	r0, r2
 800791e:	b003      	add	sp, #12
 8007920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007924:	bfbc      	itt	lt
 8007926:	464b      	movlt	r3, r9
 8007928:	46a1      	movlt	r9, r4
 800792a:	4630      	mov	r0, r6
 800792c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007930:	bfba      	itte	lt
 8007932:	461c      	movlt	r4, r3
 8007934:	2501      	movlt	r5, #1
 8007936:	2500      	movge	r5, #0
 8007938:	f7ff fcfe 	bl	8007338 <_Balloc>
 800793c:	4602      	mov	r2, r0
 800793e:	b918      	cbnz	r0, 8007948 <__mdiff+0x60>
 8007940:	4b31      	ldr	r3, [pc, #196]	@ (8007a08 <__mdiff+0x120>)
 8007942:	f240 2145 	movw	r1, #581	@ 0x245
 8007946:	e7e3      	b.n	8007910 <__mdiff+0x28>
 8007948:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800794c:	6926      	ldr	r6, [r4, #16]
 800794e:	60c5      	str	r5, [r0, #12]
 8007950:	f109 0310 	add.w	r3, r9, #16
 8007954:	f109 0514 	add.w	r5, r9, #20
 8007958:	f104 0e14 	add.w	lr, r4, #20
 800795c:	f100 0b14 	add.w	fp, r0, #20
 8007960:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007964:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	46d9      	mov	r9, fp
 800796c:	f04f 0c00 	mov.w	ip, #0
 8007970:	9b01      	ldr	r3, [sp, #4]
 8007972:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007976:	f853 af04 	ldr.w	sl, [r3, #4]!
 800797a:	9301      	str	r3, [sp, #4]
 800797c:	fa1f f38a 	uxth.w	r3, sl
 8007980:	4619      	mov	r1, r3
 8007982:	b283      	uxth	r3, r0
 8007984:	1acb      	subs	r3, r1, r3
 8007986:	0c00      	lsrs	r0, r0, #16
 8007988:	4463      	add	r3, ip
 800798a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800798e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007992:	b29b      	uxth	r3, r3
 8007994:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007998:	4576      	cmp	r6, lr
 800799a:	f849 3b04 	str.w	r3, [r9], #4
 800799e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80079a2:	d8e5      	bhi.n	8007970 <__mdiff+0x88>
 80079a4:	1b33      	subs	r3, r6, r4
 80079a6:	3b15      	subs	r3, #21
 80079a8:	f023 0303 	bic.w	r3, r3, #3
 80079ac:	3415      	adds	r4, #21
 80079ae:	3304      	adds	r3, #4
 80079b0:	42a6      	cmp	r6, r4
 80079b2:	bf38      	it	cc
 80079b4:	2304      	movcc	r3, #4
 80079b6:	441d      	add	r5, r3
 80079b8:	445b      	add	r3, fp
 80079ba:	461e      	mov	r6, r3
 80079bc:	462c      	mov	r4, r5
 80079be:	4544      	cmp	r4, r8
 80079c0:	d30e      	bcc.n	80079e0 <__mdiff+0xf8>
 80079c2:	f108 0103 	add.w	r1, r8, #3
 80079c6:	1b49      	subs	r1, r1, r5
 80079c8:	f021 0103 	bic.w	r1, r1, #3
 80079cc:	3d03      	subs	r5, #3
 80079ce:	45a8      	cmp	r8, r5
 80079d0:	bf38      	it	cc
 80079d2:	2100      	movcc	r1, #0
 80079d4:	440b      	add	r3, r1
 80079d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079da:	b191      	cbz	r1, 8007a02 <__mdiff+0x11a>
 80079dc:	6117      	str	r7, [r2, #16]
 80079de:	e79d      	b.n	800791c <__mdiff+0x34>
 80079e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80079e4:	46e6      	mov	lr, ip
 80079e6:	0c08      	lsrs	r0, r1, #16
 80079e8:	fa1c fc81 	uxtah	ip, ip, r1
 80079ec:	4471      	add	r1, lr
 80079ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80079f2:	b289      	uxth	r1, r1
 80079f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80079f8:	f846 1b04 	str.w	r1, [r6], #4
 80079fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a00:	e7dd      	b.n	80079be <__mdiff+0xd6>
 8007a02:	3f01      	subs	r7, #1
 8007a04:	e7e7      	b.n	80079d6 <__mdiff+0xee>
 8007a06:	bf00      	nop
 8007a08:	08009d71 	.word	0x08009d71
 8007a0c:	08009d82 	.word	0x08009d82

08007a10 <__ulp>:
 8007a10:	4b0e      	ldr	r3, [pc, #56]	@ (8007a4c <__ulp+0x3c>)
 8007a12:	400b      	ands	r3, r1
 8007a14:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	dc08      	bgt.n	8007a2e <__ulp+0x1e>
 8007a1c:	425b      	negs	r3, r3
 8007a1e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007a22:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a26:	da04      	bge.n	8007a32 <__ulp+0x22>
 8007a28:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007a2c:	4113      	asrs	r3, r2
 8007a2e:	2200      	movs	r2, #0
 8007a30:	e008      	b.n	8007a44 <__ulp+0x34>
 8007a32:	f1a2 0314 	sub.w	r3, r2, #20
 8007a36:	2b1e      	cmp	r3, #30
 8007a38:	bfda      	itte	le
 8007a3a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007a3e:	40da      	lsrle	r2, r3
 8007a40:	2201      	movgt	r2, #1
 8007a42:	2300      	movs	r3, #0
 8007a44:	4619      	mov	r1, r3
 8007a46:	4610      	mov	r0, r2
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	7ff00000 	.word	0x7ff00000

08007a50 <__b2d>:
 8007a50:	6902      	ldr	r2, [r0, #16]
 8007a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a54:	f100 0614 	add.w	r6, r0, #20
 8007a58:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007a5c:	4f20      	ldr	r7, [pc, #128]	@ (8007ae0 <__b2d+0x90>)
 8007a5e:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007a62:	4620      	mov	r0, r4
 8007a64:	f7ff fd5a 	bl	800751c <__hi0bits>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b0a      	cmp	r3, #10
 8007a6c:	f1c0 0020 	rsb	r0, r0, #32
 8007a70:	f1a2 0504 	sub.w	r5, r2, #4
 8007a74:	6008      	str	r0, [r1, #0]
 8007a76:	dc13      	bgt.n	8007aa0 <__b2d+0x50>
 8007a78:	42ae      	cmp	r6, r5
 8007a7a:	bf38      	it	cc
 8007a7c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007a80:	f1c3 0c0b 	rsb	ip, r3, #11
 8007a84:	bf28      	it	cs
 8007a86:	2200      	movcs	r2, #0
 8007a88:	3315      	adds	r3, #21
 8007a8a:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007a8e:	fa04 f303 	lsl.w	r3, r4, r3
 8007a92:	fa22 f20c 	lsr.w	r2, r2, ip
 8007a96:	ea4e 0107 	orr.w	r1, lr, r7
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aa0:	42ae      	cmp	r6, r5
 8007aa2:	bf36      	itet	cc
 8007aa4:	f1a2 0508 	subcc.w	r5, r2, #8
 8007aa8:	2200      	movcs	r2, #0
 8007aaa:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007aae:	3b0b      	subs	r3, #11
 8007ab0:	d012      	beq.n	8007ad8 <__b2d+0x88>
 8007ab2:	f1c3 0720 	rsb	r7, r3, #32
 8007ab6:	fa22 f107 	lsr.w	r1, r2, r7
 8007aba:	409c      	lsls	r4, r3
 8007abc:	430c      	orrs	r4, r1
 8007abe:	42b5      	cmp	r5, r6
 8007ac0:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007ac4:	bf8c      	ite	hi
 8007ac6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007aca:	2400      	movls	r4, #0
 8007acc:	409a      	lsls	r2, r3
 8007ace:	40fc      	lsrs	r4, r7
 8007ad0:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007ad4:	4322      	orrs	r2, r4
 8007ad6:	e7e1      	b.n	8007a9c <__b2d+0x4c>
 8007ad8:	ea44 0107 	orr.w	r1, r4, r7
 8007adc:	e7de      	b.n	8007a9c <__b2d+0x4c>
 8007ade:	bf00      	nop
 8007ae0:	3ff00000 	.word	0x3ff00000

08007ae4 <__d2b>:
 8007ae4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007ae8:	2101      	movs	r1, #1
 8007aea:	9e08      	ldr	r6, [sp, #32]
 8007aec:	4690      	mov	r8, r2
 8007aee:	4699      	mov	r9, r3
 8007af0:	f7ff fc22 	bl	8007338 <_Balloc>
 8007af4:	4604      	mov	r4, r0
 8007af6:	b930      	cbnz	r0, 8007b06 <__d2b+0x22>
 8007af8:	4602      	mov	r2, r0
 8007afa:	4b24      	ldr	r3, [pc, #144]	@ (8007b8c <__d2b+0xa8>)
 8007afc:	4824      	ldr	r0, [pc, #144]	@ (8007b90 <__d2b+0xac>)
 8007afe:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b02:	f001 f98b 	bl	8008e1c <__assert_func>
 8007b06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b0e:	b10d      	cbz	r5, 8007b14 <__d2b+0x30>
 8007b10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b14:	9301      	str	r3, [sp, #4]
 8007b16:	f1b8 0300 	subs.w	r3, r8, #0
 8007b1a:	d024      	beq.n	8007b66 <__d2b+0x82>
 8007b1c:	4668      	mov	r0, sp
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	f7ff fd1b 	bl	800755a <__lo0bits>
 8007b24:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b28:	b1d8      	cbz	r0, 8007b62 <__d2b+0x7e>
 8007b2a:	f1c0 0320 	rsb	r3, r0, #32
 8007b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b32:	430b      	orrs	r3, r1
 8007b34:	40c2      	lsrs	r2, r0
 8007b36:	6163      	str	r3, [r4, #20]
 8007b38:	9201      	str	r2, [sp, #4]
 8007b3a:	9b01      	ldr	r3, [sp, #4]
 8007b3c:	61a3      	str	r3, [r4, #24]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bf0c      	ite	eq
 8007b42:	2201      	moveq	r2, #1
 8007b44:	2202      	movne	r2, #2
 8007b46:	6122      	str	r2, [r4, #16]
 8007b48:	b1ad      	cbz	r5, 8007b76 <__d2b+0x92>
 8007b4a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b4e:	4405      	add	r5, r0
 8007b50:	6035      	str	r5, [r6, #0]
 8007b52:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b58:	6018      	str	r0, [r3, #0]
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	b002      	add	sp, #8
 8007b5e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007b62:	6161      	str	r1, [r4, #20]
 8007b64:	e7e9      	b.n	8007b3a <__d2b+0x56>
 8007b66:	a801      	add	r0, sp, #4
 8007b68:	f7ff fcf7 	bl	800755a <__lo0bits>
 8007b6c:	9b01      	ldr	r3, [sp, #4]
 8007b6e:	6163      	str	r3, [r4, #20]
 8007b70:	3020      	adds	r0, #32
 8007b72:	2201      	movs	r2, #1
 8007b74:	e7e7      	b.n	8007b46 <__d2b+0x62>
 8007b76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007b7e:	6030      	str	r0, [r6, #0]
 8007b80:	6918      	ldr	r0, [r3, #16]
 8007b82:	f7ff fccb 	bl	800751c <__hi0bits>
 8007b86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b8a:	e7e4      	b.n	8007b56 <__d2b+0x72>
 8007b8c:	08009d71 	.word	0x08009d71
 8007b90:	08009d82 	.word	0x08009d82

08007b94 <__ratio>:
 8007b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b98:	b085      	sub	sp, #20
 8007b9a:	e9cd 1000 	strd	r1, r0, [sp]
 8007b9e:	a902      	add	r1, sp, #8
 8007ba0:	f7ff ff56 	bl	8007a50 <__b2d>
 8007ba4:	468b      	mov	fp, r1
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	460f      	mov	r7, r1
 8007baa:	9800      	ldr	r0, [sp, #0]
 8007bac:	a903      	add	r1, sp, #12
 8007bae:	f7ff ff4f 	bl	8007a50 <__b2d>
 8007bb2:	9b01      	ldr	r3, [sp, #4]
 8007bb4:	4689      	mov	r9, r1
 8007bb6:	460d      	mov	r5, r1
 8007bb8:	6919      	ldr	r1, [r3, #16]
 8007bba:	9b00      	ldr	r3, [sp, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	1ac9      	subs	r1, r1, r3
 8007bc0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007bc4:	1a9b      	subs	r3, r3, r2
 8007bc6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	bfcd      	iteet	gt
 8007bce:	463a      	movgt	r2, r7
 8007bd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007bd4:	462a      	movle	r2, r5
 8007bd6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007bda:	bfd8      	it	le
 8007bdc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007be0:	4604      	mov	r4, r0
 8007be2:	4622      	mov	r2, r4
 8007be4:	464b      	mov	r3, r9
 8007be6:	4630      	mov	r0, r6
 8007be8:	4659      	mov	r1, fp
 8007bea:	f7f8 fe4f 	bl	800088c <__aeabi_ddiv>
 8007bee:	b005      	add	sp, #20
 8007bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bf4 <__copybits>:
 8007bf4:	3901      	subs	r1, #1
 8007bf6:	b570      	push	{r4, r5, r6, lr}
 8007bf8:	1149      	asrs	r1, r1, #5
 8007bfa:	6914      	ldr	r4, [r2, #16]
 8007bfc:	3101      	adds	r1, #1
 8007bfe:	f102 0314 	add.w	r3, r2, #20
 8007c02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007c0a:	1f05      	subs	r5, r0, #4
 8007c0c:	42a3      	cmp	r3, r4
 8007c0e:	d30c      	bcc.n	8007c2a <__copybits+0x36>
 8007c10:	1aa3      	subs	r3, r4, r2
 8007c12:	3b11      	subs	r3, #17
 8007c14:	f023 0303 	bic.w	r3, r3, #3
 8007c18:	3211      	adds	r2, #17
 8007c1a:	42a2      	cmp	r2, r4
 8007c1c:	bf88      	it	hi
 8007c1e:	2300      	movhi	r3, #0
 8007c20:	4418      	add	r0, r3
 8007c22:	2300      	movs	r3, #0
 8007c24:	4288      	cmp	r0, r1
 8007c26:	d305      	bcc.n	8007c34 <__copybits+0x40>
 8007c28:	bd70      	pop	{r4, r5, r6, pc}
 8007c2a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c2e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c32:	e7eb      	b.n	8007c0c <__copybits+0x18>
 8007c34:	f840 3b04 	str.w	r3, [r0], #4
 8007c38:	e7f4      	b.n	8007c24 <__copybits+0x30>

08007c3a <__any_on>:
 8007c3a:	f100 0214 	add.w	r2, r0, #20
 8007c3e:	6900      	ldr	r0, [r0, #16]
 8007c40:	114b      	asrs	r3, r1, #5
 8007c42:	4298      	cmp	r0, r3
 8007c44:	b510      	push	{r4, lr}
 8007c46:	db11      	blt.n	8007c6c <__any_on+0x32>
 8007c48:	dd0a      	ble.n	8007c60 <__any_on+0x26>
 8007c4a:	f011 011f 	ands.w	r1, r1, #31
 8007c4e:	d007      	beq.n	8007c60 <__any_on+0x26>
 8007c50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007c54:	fa24 f001 	lsr.w	r0, r4, r1
 8007c58:	fa00 f101 	lsl.w	r1, r0, r1
 8007c5c:	428c      	cmp	r4, r1
 8007c5e:	d10b      	bne.n	8007c78 <__any_on+0x3e>
 8007c60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d803      	bhi.n	8007c70 <__any_on+0x36>
 8007c68:	2000      	movs	r0, #0
 8007c6a:	bd10      	pop	{r4, pc}
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	e7f7      	b.n	8007c60 <__any_on+0x26>
 8007c70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c74:	2900      	cmp	r1, #0
 8007c76:	d0f5      	beq.n	8007c64 <__any_on+0x2a>
 8007c78:	2001      	movs	r0, #1
 8007c7a:	e7f6      	b.n	8007c6a <__any_on+0x30>

08007c7c <sulp>:
 8007c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c80:	460f      	mov	r7, r1
 8007c82:	4690      	mov	r8, r2
 8007c84:	f7ff fec4 	bl	8007a10 <__ulp>
 8007c88:	4604      	mov	r4, r0
 8007c8a:	460d      	mov	r5, r1
 8007c8c:	f1b8 0f00 	cmp.w	r8, #0
 8007c90:	d011      	beq.n	8007cb6 <sulp+0x3a>
 8007c92:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007c96:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	dd0b      	ble.n	8007cb6 <sulp+0x3a>
 8007c9e:	051b      	lsls	r3, r3, #20
 8007ca0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007ca4:	2400      	movs	r4, #0
 8007ca6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007caa:	4622      	mov	r2, r4
 8007cac:	462b      	mov	r3, r5
 8007cae:	f7f8 fcc3 	bl	8000638 <__aeabi_dmul>
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	460d      	mov	r5, r1
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	4629      	mov	r1, r5
 8007cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007cc0 <_strtod_l>:
 8007cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	b09f      	sub	sp, #124	@ 0x7c
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007cca:	2200      	movs	r2, #0
 8007ccc:	921a      	str	r2, [sp, #104]	@ 0x68
 8007cce:	9005      	str	r0, [sp, #20]
 8007cd0:	f04f 0a00 	mov.w	sl, #0
 8007cd4:	f04f 0b00 	mov.w	fp, #0
 8007cd8:	460a      	mov	r2, r1
 8007cda:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cdc:	7811      	ldrb	r1, [r2, #0]
 8007cde:	292b      	cmp	r1, #43	@ 0x2b
 8007ce0:	d048      	beq.n	8007d74 <_strtod_l+0xb4>
 8007ce2:	d836      	bhi.n	8007d52 <_strtod_l+0x92>
 8007ce4:	290d      	cmp	r1, #13
 8007ce6:	d830      	bhi.n	8007d4a <_strtod_l+0x8a>
 8007ce8:	2908      	cmp	r1, #8
 8007cea:	d830      	bhi.n	8007d4e <_strtod_l+0x8e>
 8007cec:	2900      	cmp	r1, #0
 8007cee:	d039      	beq.n	8007d64 <_strtod_l+0xa4>
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cf4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007cf6:	782a      	ldrb	r2, [r5, #0]
 8007cf8:	2a30      	cmp	r2, #48	@ 0x30
 8007cfa:	f040 80b0 	bne.w	8007e5e <_strtod_l+0x19e>
 8007cfe:	786a      	ldrb	r2, [r5, #1]
 8007d00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007d04:	2a58      	cmp	r2, #88	@ 0x58
 8007d06:	d16c      	bne.n	8007de2 <_strtod_l+0x122>
 8007d08:	9302      	str	r3, [sp, #8]
 8007d0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d0c:	9301      	str	r3, [sp, #4]
 8007d0e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	4a8e      	ldr	r2, [pc, #568]	@ (8007f4c <_strtod_l+0x28c>)
 8007d14:	9805      	ldr	r0, [sp, #20]
 8007d16:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007d18:	a919      	add	r1, sp, #100	@ 0x64
 8007d1a:	f001 f919 	bl	8008f50 <__gethex>
 8007d1e:	f010 060f 	ands.w	r6, r0, #15
 8007d22:	4604      	mov	r4, r0
 8007d24:	d005      	beq.n	8007d32 <_strtod_l+0x72>
 8007d26:	2e06      	cmp	r6, #6
 8007d28:	d126      	bne.n	8007d78 <_strtod_l+0xb8>
 8007d2a:	3501      	adds	r5, #1
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007d30:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f040 8584 	bne.w	8008842 <_strtod_l+0xb82>
 8007d3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d3c:	b1bb      	cbz	r3, 8007d6e <_strtod_l+0xae>
 8007d3e:	4650      	mov	r0, sl
 8007d40:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007d44:	b01f      	add	sp, #124	@ 0x7c
 8007d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4a:	2920      	cmp	r1, #32
 8007d4c:	d1d0      	bne.n	8007cf0 <_strtod_l+0x30>
 8007d4e:	3201      	adds	r2, #1
 8007d50:	e7c3      	b.n	8007cda <_strtod_l+0x1a>
 8007d52:	292d      	cmp	r1, #45	@ 0x2d
 8007d54:	d1cc      	bne.n	8007cf0 <_strtod_l+0x30>
 8007d56:	2101      	movs	r1, #1
 8007d58:	910e      	str	r1, [sp, #56]	@ 0x38
 8007d5a:	1c51      	adds	r1, r2, #1
 8007d5c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007d5e:	7852      	ldrb	r2, [r2, #1]
 8007d60:	2a00      	cmp	r2, #0
 8007d62:	d1c7      	bne.n	8007cf4 <_strtod_l+0x34>
 8007d64:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d66:	9419      	str	r4, [sp, #100]	@ 0x64
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f040 8568 	bne.w	800883e <_strtod_l+0xb7e>
 8007d6e:	4650      	mov	r0, sl
 8007d70:	4659      	mov	r1, fp
 8007d72:	e7e7      	b.n	8007d44 <_strtod_l+0x84>
 8007d74:	2100      	movs	r1, #0
 8007d76:	e7ef      	b.n	8007d58 <_strtod_l+0x98>
 8007d78:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007d7a:	b13a      	cbz	r2, 8007d8c <_strtod_l+0xcc>
 8007d7c:	2135      	movs	r1, #53	@ 0x35
 8007d7e:	a81c      	add	r0, sp, #112	@ 0x70
 8007d80:	f7ff ff38 	bl	8007bf4 <__copybits>
 8007d84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d86:	9805      	ldr	r0, [sp, #20]
 8007d88:	f7ff fb16 	bl	80073b8 <_Bfree>
 8007d8c:	3e01      	subs	r6, #1
 8007d8e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007d90:	2e04      	cmp	r6, #4
 8007d92:	d806      	bhi.n	8007da2 <_strtod_l+0xe2>
 8007d94:	e8df f006 	tbb	[pc, r6]
 8007d98:	201d0314 	.word	0x201d0314
 8007d9c:	14          	.byte	0x14
 8007d9d:	00          	.byte	0x00
 8007d9e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007da2:	05e1      	lsls	r1, r4, #23
 8007da4:	bf48      	it	mi
 8007da6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007daa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007dae:	0d1b      	lsrs	r3, r3, #20
 8007db0:	051b      	lsls	r3, r3, #20
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1bd      	bne.n	8007d32 <_strtod_l+0x72>
 8007db6:	f7fe fb33 	bl	8006420 <__errno>
 8007dba:	2322      	movs	r3, #34	@ 0x22
 8007dbc:	6003      	str	r3, [r0, #0]
 8007dbe:	e7b8      	b.n	8007d32 <_strtod_l+0x72>
 8007dc0:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007dc4:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007dc8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007dcc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007dd0:	e7e7      	b.n	8007da2 <_strtod_l+0xe2>
 8007dd2:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007f54 <_strtod_l+0x294>
 8007dd6:	e7e4      	b.n	8007da2 <_strtod_l+0xe2>
 8007dd8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007ddc:	f04f 3aff 	mov.w	sl, #4294967295
 8007de0:	e7df      	b.n	8007da2 <_strtod_l+0xe2>
 8007de2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	9219      	str	r2, [sp, #100]	@ 0x64
 8007de8:	785b      	ldrb	r3, [r3, #1]
 8007dea:	2b30      	cmp	r3, #48	@ 0x30
 8007dec:	d0f9      	beq.n	8007de2 <_strtod_l+0x122>
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d09f      	beq.n	8007d32 <_strtod_l+0x72>
 8007df2:	2301      	movs	r3, #1
 8007df4:	2700      	movs	r7, #0
 8007df6:	9308      	str	r3, [sp, #32]
 8007df8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dfa:	930c      	str	r3, [sp, #48]	@ 0x30
 8007dfc:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007dfe:	46b9      	mov	r9, r7
 8007e00:	220a      	movs	r2, #10
 8007e02:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007e04:	7805      	ldrb	r5, [r0, #0]
 8007e06:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007e0a:	b2d9      	uxtb	r1, r3
 8007e0c:	2909      	cmp	r1, #9
 8007e0e:	d928      	bls.n	8007e62 <_strtod_l+0x1a2>
 8007e10:	494f      	ldr	r1, [pc, #316]	@ (8007f50 <_strtod_l+0x290>)
 8007e12:	2201      	movs	r2, #1
 8007e14:	f000 ffcc 	bl	8008db0 <strncmp>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d032      	beq.n	8007e82 <_strtod_l+0x1c2>
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	462a      	mov	r2, r5
 8007e20:	900a      	str	r0, [sp, #40]	@ 0x28
 8007e22:	464d      	mov	r5, r9
 8007e24:	4603      	mov	r3, r0
 8007e26:	2a65      	cmp	r2, #101	@ 0x65
 8007e28:	d001      	beq.n	8007e2e <_strtod_l+0x16e>
 8007e2a:	2a45      	cmp	r2, #69	@ 0x45
 8007e2c:	d114      	bne.n	8007e58 <_strtod_l+0x198>
 8007e2e:	b91d      	cbnz	r5, 8007e38 <_strtod_l+0x178>
 8007e30:	9a08      	ldr	r2, [sp, #32]
 8007e32:	4302      	orrs	r2, r0
 8007e34:	d096      	beq.n	8007d64 <_strtod_l+0xa4>
 8007e36:	2500      	movs	r5, #0
 8007e38:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007e3a:	1c62      	adds	r2, r4, #1
 8007e3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e3e:	7862      	ldrb	r2, [r4, #1]
 8007e40:	2a2b      	cmp	r2, #43	@ 0x2b
 8007e42:	d07a      	beq.n	8007f3a <_strtod_l+0x27a>
 8007e44:	2a2d      	cmp	r2, #45	@ 0x2d
 8007e46:	d07e      	beq.n	8007f46 <_strtod_l+0x286>
 8007e48:	f04f 0c00 	mov.w	ip, #0
 8007e4c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007e50:	2909      	cmp	r1, #9
 8007e52:	f240 8085 	bls.w	8007f60 <_strtod_l+0x2a0>
 8007e56:	9419      	str	r4, [sp, #100]	@ 0x64
 8007e58:	f04f 0800 	mov.w	r8, #0
 8007e5c:	e0a5      	b.n	8007faa <_strtod_l+0x2ea>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e7c8      	b.n	8007df4 <_strtod_l+0x134>
 8007e62:	f1b9 0f08 	cmp.w	r9, #8
 8007e66:	bfd8      	it	le
 8007e68:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007e6a:	f100 0001 	add.w	r0, r0, #1
 8007e6e:	bfda      	itte	le
 8007e70:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e74:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007e76:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007e7a:	f109 0901 	add.w	r9, r9, #1
 8007e7e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007e80:	e7bf      	b.n	8007e02 <_strtod_l+0x142>
 8007e82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e88:	785a      	ldrb	r2, [r3, #1]
 8007e8a:	f1b9 0f00 	cmp.w	r9, #0
 8007e8e:	d03b      	beq.n	8007f08 <_strtod_l+0x248>
 8007e90:	900a      	str	r0, [sp, #40]	@ 0x28
 8007e92:	464d      	mov	r5, r9
 8007e94:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007e98:	2b09      	cmp	r3, #9
 8007e9a:	d912      	bls.n	8007ec2 <_strtod_l+0x202>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e7c2      	b.n	8007e26 <_strtod_l+0x166>
 8007ea0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ea6:	785a      	ldrb	r2, [r3, #1]
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	2a30      	cmp	r2, #48	@ 0x30
 8007eac:	d0f8      	beq.n	8007ea0 <_strtod_l+0x1e0>
 8007eae:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007eb2:	2b08      	cmp	r3, #8
 8007eb4:	f200 84ca 	bhi.w	800884c <_strtod_l+0xb8c>
 8007eb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007eba:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	930c      	str	r3, [sp, #48]	@ 0x30
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	3a30      	subs	r2, #48	@ 0x30
 8007ec4:	f100 0301 	add.w	r3, r0, #1
 8007ec8:	d018      	beq.n	8007efc <_strtod_l+0x23c>
 8007eca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ecc:	4419      	add	r1, r3
 8007ece:	910a      	str	r1, [sp, #40]	@ 0x28
 8007ed0:	462e      	mov	r6, r5
 8007ed2:	f04f 0e0a 	mov.w	lr, #10
 8007ed6:	1c71      	adds	r1, r6, #1
 8007ed8:	eba1 0c05 	sub.w	ip, r1, r5
 8007edc:	4563      	cmp	r3, ip
 8007ede:	dc15      	bgt.n	8007f0c <_strtod_l+0x24c>
 8007ee0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007ee4:	182b      	adds	r3, r5, r0
 8007ee6:	2b08      	cmp	r3, #8
 8007ee8:	f105 0501 	add.w	r5, r5, #1
 8007eec:	4405      	add	r5, r0
 8007eee:	dc1a      	bgt.n	8007f26 <_strtod_l+0x266>
 8007ef0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ef2:	230a      	movs	r3, #10
 8007ef4:	fb03 2301 	mla	r3, r3, r1, r2
 8007ef8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007efa:	2300      	movs	r3, #0
 8007efc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007efe:	1c51      	adds	r1, r2, #1
 8007f00:	9119      	str	r1, [sp, #100]	@ 0x64
 8007f02:	7852      	ldrb	r2, [r2, #1]
 8007f04:	4618      	mov	r0, r3
 8007f06:	e7c5      	b.n	8007e94 <_strtod_l+0x1d4>
 8007f08:	4648      	mov	r0, r9
 8007f0a:	e7ce      	b.n	8007eaa <_strtod_l+0x1ea>
 8007f0c:	2e08      	cmp	r6, #8
 8007f0e:	dc05      	bgt.n	8007f1c <_strtod_l+0x25c>
 8007f10:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007f12:	fb0e f606 	mul.w	r6, lr, r6
 8007f16:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007f18:	460e      	mov	r6, r1
 8007f1a:	e7dc      	b.n	8007ed6 <_strtod_l+0x216>
 8007f1c:	2910      	cmp	r1, #16
 8007f1e:	bfd8      	it	le
 8007f20:	fb0e f707 	mulle.w	r7, lr, r7
 8007f24:	e7f8      	b.n	8007f18 <_strtod_l+0x258>
 8007f26:	2b0f      	cmp	r3, #15
 8007f28:	bfdc      	itt	le
 8007f2a:	230a      	movle	r3, #10
 8007f2c:	fb03 2707 	mlale	r7, r3, r7, r2
 8007f30:	e7e3      	b.n	8007efa <_strtod_l+0x23a>
 8007f32:	2300      	movs	r3, #0
 8007f34:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f36:	2301      	movs	r3, #1
 8007f38:	e77a      	b.n	8007e30 <_strtod_l+0x170>
 8007f3a:	f04f 0c00 	mov.w	ip, #0
 8007f3e:	1ca2      	adds	r2, r4, #2
 8007f40:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f42:	78a2      	ldrb	r2, [r4, #2]
 8007f44:	e782      	b.n	8007e4c <_strtod_l+0x18c>
 8007f46:	f04f 0c01 	mov.w	ip, #1
 8007f4a:	e7f8      	b.n	8007f3e <_strtod_l+0x27e>
 8007f4c:	08009fa4 	.word	0x08009fa4
 8007f50:	08009ddb 	.word	0x08009ddb
 8007f54:	7ff00000 	.word	0x7ff00000
 8007f58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f5a:	1c51      	adds	r1, r2, #1
 8007f5c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007f5e:	7852      	ldrb	r2, [r2, #1]
 8007f60:	2a30      	cmp	r2, #48	@ 0x30
 8007f62:	d0f9      	beq.n	8007f58 <_strtod_l+0x298>
 8007f64:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007f68:	2908      	cmp	r1, #8
 8007f6a:	f63f af75 	bhi.w	8007e58 <_strtod_l+0x198>
 8007f6e:	3a30      	subs	r2, #48	@ 0x30
 8007f70:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f74:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007f76:	f04f 080a 	mov.w	r8, #10
 8007f7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f7c:	1c56      	adds	r6, r2, #1
 8007f7e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007f80:	7852      	ldrb	r2, [r2, #1]
 8007f82:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007f86:	f1be 0f09 	cmp.w	lr, #9
 8007f8a:	d939      	bls.n	8008000 <_strtod_l+0x340>
 8007f8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007f8e:	1a76      	subs	r6, r6, r1
 8007f90:	2e08      	cmp	r6, #8
 8007f92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007f96:	dc03      	bgt.n	8007fa0 <_strtod_l+0x2e0>
 8007f98:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f9a:	4588      	cmp	r8, r1
 8007f9c:	bfa8      	it	ge
 8007f9e:	4688      	movge	r8, r1
 8007fa0:	f1bc 0f00 	cmp.w	ip, #0
 8007fa4:	d001      	beq.n	8007faa <_strtod_l+0x2ea>
 8007fa6:	f1c8 0800 	rsb	r8, r8, #0
 8007faa:	2d00      	cmp	r5, #0
 8007fac:	d14e      	bne.n	800804c <_strtod_l+0x38c>
 8007fae:	9908      	ldr	r1, [sp, #32]
 8007fb0:	4308      	orrs	r0, r1
 8007fb2:	f47f aebe 	bne.w	8007d32 <_strtod_l+0x72>
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f47f aed4 	bne.w	8007d64 <_strtod_l+0xa4>
 8007fbc:	2a69      	cmp	r2, #105	@ 0x69
 8007fbe:	d028      	beq.n	8008012 <_strtod_l+0x352>
 8007fc0:	dc25      	bgt.n	800800e <_strtod_l+0x34e>
 8007fc2:	2a49      	cmp	r2, #73	@ 0x49
 8007fc4:	d025      	beq.n	8008012 <_strtod_l+0x352>
 8007fc6:	2a4e      	cmp	r2, #78	@ 0x4e
 8007fc8:	f47f aecc 	bne.w	8007d64 <_strtod_l+0xa4>
 8007fcc:	4999      	ldr	r1, [pc, #612]	@ (8008234 <_strtod_l+0x574>)
 8007fce:	a819      	add	r0, sp, #100	@ 0x64
 8007fd0:	f001 f9e0 	bl	8009394 <__match>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f43f aec5 	beq.w	8007d64 <_strtod_l+0xa4>
 8007fda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	2b28      	cmp	r3, #40	@ 0x28
 8007fe0:	d12e      	bne.n	8008040 <_strtod_l+0x380>
 8007fe2:	4995      	ldr	r1, [pc, #596]	@ (8008238 <_strtod_l+0x578>)
 8007fe4:	aa1c      	add	r2, sp, #112	@ 0x70
 8007fe6:	a819      	add	r0, sp, #100	@ 0x64
 8007fe8:	f001 f9e8 	bl	80093bc <__hexnan>
 8007fec:	2805      	cmp	r0, #5
 8007fee:	d127      	bne.n	8008040 <_strtod_l+0x380>
 8007ff0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007ff2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007ff6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007ffa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007ffe:	e698      	b.n	8007d32 <_strtod_l+0x72>
 8008000:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008002:	fb08 2101 	mla	r1, r8, r1, r2
 8008006:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800800a:	9209      	str	r2, [sp, #36]	@ 0x24
 800800c:	e7b5      	b.n	8007f7a <_strtod_l+0x2ba>
 800800e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008010:	e7da      	b.n	8007fc8 <_strtod_l+0x308>
 8008012:	498a      	ldr	r1, [pc, #552]	@ (800823c <_strtod_l+0x57c>)
 8008014:	a819      	add	r0, sp, #100	@ 0x64
 8008016:	f001 f9bd 	bl	8009394 <__match>
 800801a:	2800      	cmp	r0, #0
 800801c:	f43f aea2 	beq.w	8007d64 <_strtod_l+0xa4>
 8008020:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008022:	4987      	ldr	r1, [pc, #540]	@ (8008240 <_strtod_l+0x580>)
 8008024:	3b01      	subs	r3, #1
 8008026:	a819      	add	r0, sp, #100	@ 0x64
 8008028:	9319      	str	r3, [sp, #100]	@ 0x64
 800802a:	f001 f9b3 	bl	8009394 <__match>
 800802e:	b910      	cbnz	r0, 8008036 <_strtod_l+0x376>
 8008030:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008032:	3301      	adds	r3, #1
 8008034:	9319      	str	r3, [sp, #100]	@ 0x64
 8008036:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8008250 <_strtod_l+0x590>
 800803a:	f04f 0a00 	mov.w	sl, #0
 800803e:	e678      	b.n	8007d32 <_strtod_l+0x72>
 8008040:	4880      	ldr	r0, [pc, #512]	@ (8008244 <_strtod_l+0x584>)
 8008042:	f000 fee5 	bl	8008e10 <nan>
 8008046:	4682      	mov	sl, r0
 8008048:	468b      	mov	fp, r1
 800804a:	e672      	b.n	8007d32 <_strtod_l+0x72>
 800804c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800804e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008050:	eba8 0303 	sub.w	r3, r8, r3
 8008054:	f1b9 0f00 	cmp.w	r9, #0
 8008058:	bf08      	it	eq
 800805a:	46a9      	moveq	r9, r5
 800805c:	2d10      	cmp	r5, #16
 800805e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008060:	462c      	mov	r4, r5
 8008062:	bfa8      	it	ge
 8008064:	2410      	movge	r4, #16
 8008066:	f7f8 fa6d 	bl	8000544 <__aeabi_ui2d>
 800806a:	2d09      	cmp	r5, #9
 800806c:	4682      	mov	sl, r0
 800806e:	468b      	mov	fp, r1
 8008070:	dc11      	bgt.n	8008096 <_strtod_l+0x3d6>
 8008072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008074:	2b00      	cmp	r3, #0
 8008076:	f43f ae5c 	beq.w	8007d32 <_strtod_l+0x72>
 800807a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800807c:	dd76      	ble.n	800816c <_strtod_l+0x4ac>
 800807e:	2b16      	cmp	r3, #22
 8008080:	dc5d      	bgt.n	800813e <_strtod_l+0x47e>
 8008082:	4971      	ldr	r1, [pc, #452]	@ (8008248 <_strtod_l+0x588>)
 8008084:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800808c:	4652      	mov	r2, sl
 800808e:	465b      	mov	r3, fp
 8008090:	f7f8 fad2 	bl	8000638 <__aeabi_dmul>
 8008094:	e7d7      	b.n	8008046 <_strtod_l+0x386>
 8008096:	4b6c      	ldr	r3, [pc, #432]	@ (8008248 <_strtod_l+0x588>)
 8008098:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800809c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80080a0:	f7f8 faca 	bl	8000638 <__aeabi_dmul>
 80080a4:	4682      	mov	sl, r0
 80080a6:	4638      	mov	r0, r7
 80080a8:	468b      	mov	fp, r1
 80080aa:	f7f8 fa4b 	bl	8000544 <__aeabi_ui2d>
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	4650      	mov	r0, sl
 80080b4:	4659      	mov	r1, fp
 80080b6:	f7f8 f909 	bl	80002cc <__adddf3>
 80080ba:	2d0f      	cmp	r5, #15
 80080bc:	4682      	mov	sl, r0
 80080be:	468b      	mov	fp, r1
 80080c0:	ddd7      	ble.n	8008072 <_strtod_l+0x3b2>
 80080c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c4:	1b2c      	subs	r4, r5, r4
 80080c6:	441c      	add	r4, r3
 80080c8:	2c00      	cmp	r4, #0
 80080ca:	f340 8093 	ble.w	80081f4 <_strtod_l+0x534>
 80080ce:	f014 030f 	ands.w	r3, r4, #15
 80080d2:	d00a      	beq.n	80080ea <_strtod_l+0x42a>
 80080d4:	495c      	ldr	r1, [pc, #368]	@ (8008248 <_strtod_l+0x588>)
 80080d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080da:	4652      	mov	r2, sl
 80080dc:	465b      	mov	r3, fp
 80080de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080e2:	f7f8 faa9 	bl	8000638 <__aeabi_dmul>
 80080e6:	4682      	mov	sl, r0
 80080e8:	468b      	mov	fp, r1
 80080ea:	f034 040f 	bics.w	r4, r4, #15
 80080ee:	d073      	beq.n	80081d8 <_strtod_l+0x518>
 80080f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80080f4:	dd49      	ble.n	800818a <_strtod_l+0x4ca>
 80080f6:	2400      	movs	r4, #0
 80080f8:	46a0      	mov	r8, r4
 80080fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80080fc:	46a1      	mov	r9, r4
 80080fe:	9a05      	ldr	r2, [sp, #20]
 8008100:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008250 <_strtod_l+0x590>
 8008104:	2322      	movs	r3, #34	@ 0x22
 8008106:	6013      	str	r3, [r2, #0]
 8008108:	f04f 0a00 	mov.w	sl, #0
 800810c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800810e:	2b00      	cmp	r3, #0
 8008110:	f43f ae0f 	beq.w	8007d32 <_strtod_l+0x72>
 8008114:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008116:	9805      	ldr	r0, [sp, #20]
 8008118:	f7ff f94e 	bl	80073b8 <_Bfree>
 800811c:	9805      	ldr	r0, [sp, #20]
 800811e:	4649      	mov	r1, r9
 8008120:	f7ff f94a 	bl	80073b8 <_Bfree>
 8008124:	9805      	ldr	r0, [sp, #20]
 8008126:	4641      	mov	r1, r8
 8008128:	f7ff f946 	bl	80073b8 <_Bfree>
 800812c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800812e:	9805      	ldr	r0, [sp, #20]
 8008130:	f7ff f942 	bl	80073b8 <_Bfree>
 8008134:	9805      	ldr	r0, [sp, #20]
 8008136:	4621      	mov	r1, r4
 8008138:	f7ff f93e 	bl	80073b8 <_Bfree>
 800813c:	e5f9      	b.n	8007d32 <_strtod_l+0x72>
 800813e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008140:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008144:	4293      	cmp	r3, r2
 8008146:	dbbc      	blt.n	80080c2 <_strtod_l+0x402>
 8008148:	4c3f      	ldr	r4, [pc, #252]	@ (8008248 <_strtod_l+0x588>)
 800814a:	f1c5 050f 	rsb	r5, r5, #15
 800814e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008152:	4652      	mov	r2, sl
 8008154:	465b      	mov	r3, fp
 8008156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800815a:	f7f8 fa6d 	bl	8000638 <__aeabi_dmul>
 800815e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008160:	1b5d      	subs	r5, r3, r5
 8008162:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008166:	e9d4 2300 	ldrd	r2, r3, [r4]
 800816a:	e791      	b.n	8008090 <_strtod_l+0x3d0>
 800816c:	3316      	adds	r3, #22
 800816e:	dba8      	blt.n	80080c2 <_strtod_l+0x402>
 8008170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008172:	eba3 0808 	sub.w	r8, r3, r8
 8008176:	4b34      	ldr	r3, [pc, #208]	@ (8008248 <_strtod_l+0x588>)
 8008178:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800817c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008180:	4650      	mov	r0, sl
 8008182:	4659      	mov	r1, fp
 8008184:	f7f8 fb82 	bl	800088c <__aeabi_ddiv>
 8008188:	e75d      	b.n	8008046 <_strtod_l+0x386>
 800818a:	2300      	movs	r3, #0
 800818c:	4f2f      	ldr	r7, [pc, #188]	@ (800824c <_strtod_l+0x58c>)
 800818e:	1124      	asrs	r4, r4, #4
 8008190:	4650      	mov	r0, sl
 8008192:	4659      	mov	r1, fp
 8008194:	461e      	mov	r6, r3
 8008196:	2c01      	cmp	r4, #1
 8008198:	dc21      	bgt.n	80081de <_strtod_l+0x51e>
 800819a:	b10b      	cbz	r3, 80081a0 <_strtod_l+0x4e0>
 800819c:	4682      	mov	sl, r0
 800819e:	468b      	mov	fp, r1
 80081a0:	492a      	ldr	r1, [pc, #168]	@ (800824c <_strtod_l+0x58c>)
 80081a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80081a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80081aa:	4652      	mov	r2, sl
 80081ac:	465b      	mov	r3, fp
 80081ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081b2:	f7f8 fa41 	bl	8000638 <__aeabi_dmul>
 80081b6:	4b26      	ldr	r3, [pc, #152]	@ (8008250 <_strtod_l+0x590>)
 80081b8:	460a      	mov	r2, r1
 80081ba:	400b      	ands	r3, r1
 80081bc:	4925      	ldr	r1, [pc, #148]	@ (8008254 <_strtod_l+0x594>)
 80081be:	428b      	cmp	r3, r1
 80081c0:	4682      	mov	sl, r0
 80081c2:	d898      	bhi.n	80080f6 <_strtod_l+0x436>
 80081c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80081c8:	428b      	cmp	r3, r1
 80081ca:	bf86      	itte	hi
 80081cc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008258 <_strtod_l+0x598>
 80081d0:	f04f 3aff 	movhi.w	sl, #4294967295
 80081d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80081d8:	2300      	movs	r3, #0
 80081da:	9308      	str	r3, [sp, #32]
 80081dc:	e076      	b.n	80082cc <_strtod_l+0x60c>
 80081de:	07e2      	lsls	r2, r4, #31
 80081e0:	d504      	bpl.n	80081ec <_strtod_l+0x52c>
 80081e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e6:	f7f8 fa27 	bl	8000638 <__aeabi_dmul>
 80081ea:	2301      	movs	r3, #1
 80081ec:	3601      	adds	r6, #1
 80081ee:	1064      	asrs	r4, r4, #1
 80081f0:	3708      	adds	r7, #8
 80081f2:	e7d0      	b.n	8008196 <_strtod_l+0x4d6>
 80081f4:	d0f0      	beq.n	80081d8 <_strtod_l+0x518>
 80081f6:	4264      	negs	r4, r4
 80081f8:	f014 020f 	ands.w	r2, r4, #15
 80081fc:	d00a      	beq.n	8008214 <_strtod_l+0x554>
 80081fe:	4b12      	ldr	r3, [pc, #72]	@ (8008248 <_strtod_l+0x588>)
 8008200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008204:	4650      	mov	r0, sl
 8008206:	4659      	mov	r1, fp
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f7f8 fb3e 	bl	800088c <__aeabi_ddiv>
 8008210:	4682      	mov	sl, r0
 8008212:	468b      	mov	fp, r1
 8008214:	1124      	asrs	r4, r4, #4
 8008216:	d0df      	beq.n	80081d8 <_strtod_l+0x518>
 8008218:	2c1f      	cmp	r4, #31
 800821a:	dd1f      	ble.n	800825c <_strtod_l+0x59c>
 800821c:	2400      	movs	r4, #0
 800821e:	46a0      	mov	r8, r4
 8008220:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008222:	46a1      	mov	r9, r4
 8008224:	9a05      	ldr	r2, [sp, #20]
 8008226:	2322      	movs	r3, #34	@ 0x22
 8008228:	f04f 0a00 	mov.w	sl, #0
 800822c:	f04f 0b00 	mov.w	fp, #0
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	e76b      	b.n	800810c <_strtod_l+0x44c>
 8008234:	08009cc9 	.word	0x08009cc9
 8008238:	08009f90 	.word	0x08009f90
 800823c:	08009cc1 	.word	0x08009cc1
 8008240:	08009cf8 	.word	0x08009cf8
 8008244:	08009e31 	.word	0x08009e31
 8008248:	08009ec8 	.word	0x08009ec8
 800824c:	08009ea0 	.word	0x08009ea0
 8008250:	7ff00000 	.word	0x7ff00000
 8008254:	7ca00000 	.word	0x7ca00000
 8008258:	7fefffff 	.word	0x7fefffff
 800825c:	f014 0310 	ands.w	r3, r4, #16
 8008260:	bf18      	it	ne
 8008262:	236a      	movne	r3, #106	@ 0x6a
 8008264:	4e78      	ldr	r6, [pc, #480]	@ (8008448 <_strtod_l+0x788>)
 8008266:	9308      	str	r3, [sp, #32]
 8008268:	4650      	mov	r0, sl
 800826a:	4659      	mov	r1, fp
 800826c:	2300      	movs	r3, #0
 800826e:	07e7      	lsls	r7, r4, #31
 8008270:	d504      	bpl.n	800827c <_strtod_l+0x5bc>
 8008272:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008276:	f7f8 f9df 	bl	8000638 <__aeabi_dmul>
 800827a:	2301      	movs	r3, #1
 800827c:	1064      	asrs	r4, r4, #1
 800827e:	f106 0608 	add.w	r6, r6, #8
 8008282:	d1f4      	bne.n	800826e <_strtod_l+0x5ae>
 8008284:	b10b      	cbz	r3, 800828a <_strtod_l+0x5ca>
 8008286:	4682      	mov	sl, r0
 8008288:	468b      	mov	fp, r1
 800828a:	9b08      	ldr	r3, [sp, #32]
 800828c:	b1b3      	cbz	r3, 80082bc <_strtod_l+0x5fc>
 800828e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008292:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008296:	2b00      	cmp	r3, #0
 8008298:	4659      	mov	r1, fp
 800829a:	dd0f      	ble.n	80082bc <_strtod_l+0x5fc>
 800829c:	2b1f      	cmp	r3, #31
 800829e:	dd58      	ble.n	8008352 <_strtod_l+0x692>
 80082a0:	2b34      	cmp	r3, #52	@ 0x34
 80082a2:	bfde      	ittt	le
 80082a4:	f04f 33ff 	movle.w	r3, #4294967295
 80082a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80082ac:	4093      	lslle	r3, r2
 80082ae:	f04f 0a00 	mov.w	sl, #0
 80082b2:	bfcc      	ite	gt
 80082b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80082b8:	ea03 0b01 	andle.w	fp, r3, r1
 80082bc:	2200      	movs	r2, #0
 80082be:	2300      	movs	r3, #0
 80082c0:	4650      	mov	r0, sl
 80082c2:	4659      	mov	r1, fp
 80082c4:	f7f8 fc20 	bl	8000b08 <__aeabi_dcmpeq>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	d1a7      	bne.n	800821c <_strtod_l+0x55c>
 80082cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80082d2:	9805      	ldr	r0, [sp, #20]
 80082d4:	462b      	mov	r3, r5
 80082d6:	464a      	mov	r2, r9
 80082d8:	f7ff f8d6 	bl	8007488 <__s2b>
 80082dc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80082de:	2800      	cmp	r0, #0
 80082e0:	f43f af09 	beq.w	80080f6 <_strtod_l+0x436>
 80082e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082e8:	2a00      	cmp	r2, #0
 80082ea:	eba3 0308 	sub.w	r3, r3, r8
 80082ee:	bfa8      	it	ge
 80082f0:	2300      	movge	r3, #0
 80082f2:	9312      	str	r3, [sp, #72]	@ 0x48
 80082f4:	2400      	movs	r4, #0
 80082f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80082fa:	9316      	str	r3, [sp, #88]	@ 0x58
 80082fc:	46a0      	mov	r8, r4
 80082fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008300:	9805      	ldr	r0, [sp, #20]
 8008302:	6859      	ldr	r1, [r3, #4]
 8008304:	f7ff f818 	bl	8007338 <_Balloc>
 8008308:	4681      	mov	r9, r0
 800830a:	2800      	cmp	r0, #0
 800830c:	f43f aef7 	beq.w	80080fe <_strtod_l+0x43e>
 8008310:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008312:	691a      	ldr	r2, [r3, #16]
 8008314:	3202      	adds	r2, #2
 8008316:	f103 010c 	add.w	r1, r3, #12
 800831a:	0092      	lsls	r2, r2, #2
 800831c:	300c      	adds	r0, #12
 800831e:	f000 fd69 	bl	8008df4 <memcpy>
 8008322:	ab1c      	add	r3, sp, #112	@ 0x70
 8008324:	9301      	str	r3, [sp, #4]
 8008326:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	9805      	ldr	r0, [sp, #20]
 800832c:	4652      	mov	r2, sl
 800832e:	465b      	mov	r3, fp
 8008330:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008334:	f7ff fbd6 	bl	8007ae4 <__d2b>
 8008338:	901a      	str	r0, [sp, #104]	@ 0x68
 800833a:	2800      	cmp	r0, #0
 800833c:	f43f aedf 	beq.w	80080fe <_strtod_l+0x43e>
 8008340:	9805      	ldr	r0, [sp, #20]
 8008342:	2101      	movs	r1, #1
 8008344:	f7ff f936 	bl	80075b4 <__i2b>
 8008348:	4680      	mov	r8, r0
 800834a:	b948      	cbnz	r0, 8008360 <_strtod_l+0x6a0>
 800834c:	f04f 0800 	mov.w	r8, #0
 8008350:	e6d5      	b.n	80080fe <_strtod_l+0x43e>
 8008352:	f04f 32ff 	mov.w	r2, #4294967295
 8008356:	fa02 f303 	lsl.w	r3, r2, r3
 800835a:	ea03 0a0a 	and.w	sl, r3, sl
 800835e:	e7ad      	b.n	80082bc <_strtod_l+0x5fc>
 8008360:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008362:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008364:	2d00      	cmp	r5, #0
 8008366:	bfab      	itete	ge
 8008368:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800836a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800836c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800836e:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008370:	bfac      	ite	ge
 8008372:	18ef      	addge	r7, r5, r3
 8008374:	1b5e      	sublt	r6, r3, r5
 8008376:	9b08      	ldr	r3, [sp, #32]
 8008378:	1aed      	subs	r5, r5, r3
 800837a:	4415      	add	r5, r2
 800837c:	4b33      	ldr	r3, [pc, #204]	@ (800844c <_strtod_l+0x78c>)
 800837e:	3d01      	subs	r5, #1
 8008380:	429d      	cmp	r5, r3
 8008382:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008386:	da50      	bge.n	800842a <_strtod_l+0x76a>
 8008388:	1b5b      	subs	r3, r3, r5
 800838a:	2b1f      	cmp	r3, #31
 800838c:	eba2 0203 	sub.w	r2, r2, r3
 8008390:	f04f 0101 	mov.w	r1, #1
 8008394:	dc3d      	bgt.n	8008412 <_strtod_l+0x752>
 8008396:	fa01 f303 	lsl.w	r3, r1, r3
 800839a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800839c:	2300      	movs	r3, #0
 800839e:	9310      	str	r3, [sp, #64]	@ 0x40
 80083a0:	18bd      	adds	r5, r7, r2
 80083a2:	9b08      	ldr	r3, [sp, #32]
 80083a4:	42af      	cmp	r7, r5
 80083a6:	4416      	add	r6, r2
 80083a8:	441e      	add	r6, r3
 80083aa:	463b      	mov	r3, r7
 80083ac:	bfa8      	it	ge
 80083ae:	462b      	movge	r3, r5
 80083b0:	42b3      	cmp	r3, r6
 80083b2:	bfa8      	it	ge
 80083b4:	4633      	movge	r3, r6
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	bfc2      	ittt	gt
 80083ba:	1aed      	subgt	r5, r5, r3
 80083bc:	1af6      	subgt	r6, r6, r3
 80083be:	1aff      	subgt	r7, r7, r3
 80083c0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	dd16      	ble.n	80083f4 <_strtod_l+0x734>
 80083c6:	4641      	mov	r1, r8
 80083c8:	9805      	ldr	r0, [sp, #20]
 80083ca:	461a      	mov	r2, r3
 80083cc:	f7ff f9aa 	bl	8007724 <__pow5mult>
 80083d0:	4680      	mov	r8, r0
 80083d2:	2800      	cmp	r0, #0
 80083d4:	d0ba      	beq.n	800834c <_strtod_l+0x68c>
 80083d6:	4601      	mov	r1, r0
 80083d8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80083da:	9805      	ldr	r0, [sp, #20]
 80083dc:	f7ff f900 	bl	80075e0 <__multiply>
 80083e0:	900a      	str	r0, [sp, #40]	@ 0x28
 80083e2:	2800      	cmp	r0, #0
 80083e4:	f43f ae8b 	beq.w	80080fe <_strtod_l+0x43e>
 80083e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083ea:	9805      	ldr	r0, [sp, #20]
 80083ec:	f7fe ffe4 	bl	80073b8 <_Bfree>
 80083f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	dc1d      	bgt.n	8008434 <_strtod_l+0x774>
 80083f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	dd28      	ble.n	8008450 <_strtod_l+0x790>
 80083fe:	4649      	mov	r1, r9
 8008400:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008402:	9805      	ldr	r0, [sp, #20]
 8008404:	f7ff f98e 	bl	8007724 <__pow5mult>
 8008408:	4681      	mov	r9, r0
 800840a:	bb08      	cbnz	r0, 8008450 <_strtod_l+0x790>
 800840c:	f04f 0900 	mov.w	r9, #0
 8008410:	e675      	b.n	80080fe <_strtod_l+0x43e>
 8008412:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008416:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800841a:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800841e:	35e2      	adds	r5, #226	@ 0xe2
 8008420:	fa01 f305 	lsl.w	r3, r1, r5
 8008424:	9310      	str	r3, [sp, #64]	@ 0x40
 8008426:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008428:	e7ba      	b.n	80083a0 <_strtod_l+0x6e0>
 800842a:	2300      	movs	r3, #0
 800842c:	9310      	str	r3, [sp, #64]	@ 0x40
 800842e:	2301      	movs	r3, #1
 8008430:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008432:	e7b5      	b.n	80083a0 <_strtod_l+0x6e0>
 8008434:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008436:	9805      	ldr	r0, [sp, #20]
 8008438:	462a      	mov	r2, r5
 800843a:	f7ff f9cd 	bl	80077d8 <__lshift>
 800843e:	901a      	str	r0, [sp, #104]	@ 0x68
 8008440:	2800      	cmp	r0, #0
 8008442:	d1d9      	bne.n	80083f8 <_strtod_l+0x738>
 8008444:	e65b      	b.n	80080fe <_strtod_l+0x43e>
 8008446:	bf00      	nop
 8008448:	08009fb8 	.word	0x08009fb8
 800844c:	fffffc02 	.word	0xfffffc02
 8008450:	2e00      	cmp	r6, #0
 8008452:	dd07      	ble.n	8008464 <_strtod_l+0x7a4>
 8008454:	4649      	mov	r1, r9
 8008456:	9805      	ldr	r0, [sp, #20]
 8008458:	4632      	mov	r2, r6
 800845a:	f7ff f9bd 	bl	80077d8 <__lshift>
 800845e:	4681      	mov	r9, r0
 8008460:	2800      	cmp	r0, #0
 8008462:	d0d3      	beq.n	800840c <_strtod_l+0x74c>
 8008464:	2f00      	cmp	r7, #0
 8008466:	dd08      	ble.n	800847a <_strtod_l+0x7ba>
 8008468:	4641      	mov	r1, r8
 800846a:	9805      	ldr	r0, [sp, #20]
 800846c:	463a      	mov	r2, r7
 800846e:	f7ff f9b3 	bl	80077d8 <__lshift>
 8008472:	4680      	mov	r8, r0
 8008474:	2800      	cmp	r0, #0
 8008476:	f43f ae42 	beq.w	80080fe <_strtod_l+0x43e>
 800847a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800847c:	9805      	ldr	r0, [sp, #20]
 800847e:	464a      	mov	r2, r9
 8008480:	f7ff fa32 	bl	80078e8 <__mdiff>
 8008484:	4604      	mov	r4, r0
 8008486:	2800      	cmp	r0, #0
 8008488:	f43f ae39 	beq.w	80080fe <_strtod_l+0x43e>
 800848c:	68c3      	ldr	r3, [r0, #12]
 800848e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008490:	2300      	movs	r3, #0
 8008492:	60c3      	str	r3, [r0, #12]
 8008494:	4641      	mov	r1, r8
 8008496:	f7ff fa0b 	bl	80078b0 <__mcmp>
 800849a:	2800      	cmp	r0, #0
 800849c:	da3d      	bge.n	800851a <_strtod_l+0x85a>
 800849e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084a0:	ea53 030a 	orrs.w	r3, r3, sl
 80084a4:	d163      	bne.n	800856e <_strtod_l+0x8ae>
 80084a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d15f      	bne.n	800856e <_strtod_l+0x8ae>
 80084ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084b2:	0d1b      	lsrs	r3, r3, #20
 80084b4:	051b      	lsls	r3, r3, #20
 80084b6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80084ba:	d958      	bls.n	800856e <_strtod_l+0x8ae>
 80084bc:	6963      	ldr	r3, [r4, #20]
 80084be:	b913      	cbnz	r3, 80084c6 <_strtod_l+0x806>
 80084c0:	6923      	ldr	r3, [r4, #16]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	dd53      	ble.n	800856e <_strtod_l+0x8ae>
 80084c6:	4621      	mov	r1, r4
 80084c8:	2201      	movs	r2, #1
 80084ca:	9805      	ldr	r0, [sp, #20]
 80084cc:	f7ff f984 	bl	80077d8 <__lshift>
 80084d0:	4641      	mov	r1, r8
 80084d2:	4604      	mov	r4, r0
 80084d4:	f7ff f9ec 	bl	80078b0 <__mcmp>
 80084d8:	2800      	cmp	r0, #0
 80084da:	dd48      	ble.n	800856e <_strtod_l+0x8ae>
 80084dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084e0:	9a08      	ldr	r2, [sp, #32]
 80084e2:	0d1b      	lsrs	r3, r3, #20
 80084e4:	051b      	lsls	r3, r3, #20
 80084e6:	2a00      	cmp	r2, #0
 80084e8:	d062      	beq.n	80085b0 <_strtod_l+0x8f0>
 80084ea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80084ee:	d85f      	bhi.n	80085b0 <_strtod_l+0x8f0>
 80084f0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80084f4:	f67f ae96 	bls.w	8008224 <_strtod_l+0x564>
 80084f8:	4ba7      	ldr	r3, [pc, #668]	@ (8008798 <_strtod_l+0xad8>)
 80084fa:	4650      	mov	r0, sl
 80084fc:	4659      	mov	r1, fp
 80084fe:	2200      	movs	r2, #0
 8008500:	f7f8 f89a 	bl	8000638 <__aeabi_dmul>
 8008504:	4ba5      	ldr	r3, [pc, #660]	@ (800879c <_strtod_l+0xadc>)
 8008506:	400b      	ands	r3, r1
 8008508:	4682      	mov	sl, r0
 800850a:	468b      	mov	fp, r1
 800850c:	2b00      	cmp	r3, #0
 800850e:	f47f ae01 	bne.w	8008114 <_strtod_l+0x454>
 8008512:	9a05      	ldr	r2, [sp, #20]
 8008514:	2322      	movs	r3, #34	@ 0x22
 8008516:	6013      	str	r3, [r2, #0]
 8008518:	e5fc      	b.n	8008114 <_strtod_l+0x454>
 800851a:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800851e:	d165      	bne.n	80085ec <_strtod_l+0x92c>
 8008520:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008522:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008526:	b35a      	cbz	r2, 8008580 <_strtod_l+0x8c0>
 8008528:	4a9d      	ldr	r2, [pc, #628]	@ (80087a0 <_strtod_l+0xae0>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d12b      	bne.n	8008586 <_strtod_l+0x8c6>
 800852e:	9b08      	ldr	r3, [sp, #32]
 8008530:	4651      	mov	r1, sl
 8008532:	b303      	cbz	r3, 8008576 <_strtod_l+0x8b6>
 8008534:	4b99      	ldr	r3, [pc, #612]	@ (800879c <_strtod_l+0xadc>)
 8008536:	465a      	mov	r2, fp
 8008538:	4013      	ands	r3, r2
 800853a:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800853e:	f04f 32ff 	mov.w	r2, #4294967295
 8008542:	d81b      	bhi.n	800857c <_strtod_l+0x8bc>
 8008544:	0d1b      	lsrs	r3, r3, #20
 8008546:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800854a:	fa02 f303 	lsl.w	r3, r2, r3
 800854e:	4299      	cmp	r1, r3
 8008550:	d119      	bne.n	8008586 <_strtod_l+0x8c6>
 8008552:	4b94      	ldr	r3, [pc, #592]	@ (80087a4 <_strtod_l+0xae4>)
 8008554:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008556:	429a      	cmp	r2, r3
 8008558:	d102      	bne.n	8008560 <_strtod_l+0x8a0>
 800855a:	3101      	adds	r1, #1
 800855c:	f43f adcf 	beq.w	80080fe <_strtod_l+0x43e>
 8008560:	4b8e      	ldr	r3, [pc, #568]	@ (800879c <_strtod_l+0xadc>)
 8008562:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008564:	401a      	ands	r2, r3
 8008566:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800856a:	f04f 0a00 	mov.w	sl, #0
 800856e:	9b08      	ldr	r3, [sp, #32]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1c1      	bne.n	80084f8 <_strtod_l+0x838>
 8008574:	e5ce      	b.n	8008114 <_strtod_l+0x454>
 8008576:	f04f 33ff 	mov.w	r3, #4294967295
 800857a:	e7e8      	b.n	800854e <_strtod_l+0x88e>
 800857c:	4613      	mov	r3, r2
 800857e:	e7e6      	b.n	800854e <_strtod_l+0x88e>
 8008580:	ea53 030a 	orrs.w	r3, r3, sl
 8008584:	d0aa      	beq.n	80084dc <_strtod_l+0x81c>
 8008586:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008588:	b1db      	cbz	r3, 80085c2 <_strtod_l+0x902>
 800858a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800858c:	4213      	tst	r3, r2
 800858e:	d0ee      	beq.n	800856e <_strtod_l+0x8ae>
 8008590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008592:	9a08      	ldr	r2, [sp, #32]
 8008594:	4650      	mov	r0, sl
 8008596:	4659      	mov	r1, fp
 8008598:	b1bb      	cbz	r3, 80085ca <_strtod_l+0x90a>
 800859a:	f7ff fb6f 	bl	8007c7c <sulp>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085a6:	f7f7 fe91 	bl	80002cc <__adddf3>
 80085aa:	4682      	mov	sl, r0
 80085ac:	468b      	mov	fp, r1
 80085ae:	e7de      	b.n	800856e <_strtod_l+0x8ae>
 80085b0:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80085b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80085b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80085bc:	f04f 3aff 	mov.w	sl, #4294967295
 80085c0:	e7d5      	b.n	800856e <_strtod_l+0x8ae>
 80085c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80085c4:	ea13 0f0a 	tst.w	r3, sl
 80085c8:	e7e1      	b.n	800858e <_strtod_l+0x8ce>
 80085ca:	f7ff fb57 	bl	8007c7c <sulp>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085d6:	f7f7 fe77 	bl	80002c8 <__aeabi_dsub>
 80085da:	2200      	movs	r2, #0
 80085dc:	2300      	movs	r3, #0
 80085de:	4682      	mov	sl, r0
 80085e0:	468b      	mov	fp, r1
 80085e2:	f7f8 fa91 	bl	8000b08 <__aeabi_dcmpeq>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d0c1      	beq.n	800856e <_strtod_l+0x8ae>
 80085ea:	e61b      	b.n	8008224 <_strtod_l+0x564>
 80085ec:	4641      	mov	r1, r8
 80085ee:	4620      	mov	r0, r4
 80085f0:	f7ff fad0 	bl	8007b94 <__ratio>
 80085f4:	2200      	movs	r2, #0
 80085f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80085fa:	4606      	mov	r6, r0
 80085fc:	460f      	mov	r7, r1
 80085fe:	f7f8 fa97 	bl	8000b30 <__aeabi_dcmple>
 8008602:	2800      	cmp	r0, #0
 8008604:	d06d      	beq.n	80086e2 <_strtod_l+0xa22>
 8008606:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008608:	2b00      	cmp	r3, #0
 800860a:	d178      	bne.n	80086fe <_strtod_l+0xa3e>
 800860c:	f1ba 0f00 	cmp.w	sl, #0
 8008610:	d156      	bne.n	80086c0 <_strtod_l+0xa00>
 8008612:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008618:	2b00      	cmp	r3, #0
 800861a:	d158      	bne.n	80086ce <_strtod_l+0xa0e>
 800861c:	4b62      	ldr	r3, [pc, #392]	@ (80087a8 <_strtod_l+0xae8>)
 800861e:	2200      	movs	r2, #0
 8008620:	4630      	mov	r0, r6
 8008622:	4639      	mov	r1, r7
 8008624:	f7f8 fa7a 	bl	8000b1c <__aeabi_dcmplt>
 8008628:	2800      	cmp	r0, #0
 800862a:	d157      	bne.n	80086dc <_strtod_l+0xa1c>
 800862c:	4630      	mov	r0, r6
 800862e:	4639      	mov	r1, r7
 8008630:	4b5e      	ldr	r3, [pc, #376]	@ (80087ac <_strtod_l+0xaec>)
 8008632:	2200      	movs	r2, #0
 8008634:	f7f8 f800 	bl	8000638 <__aeabi_dmul>
 8008638:	4606      	mov	r6, r0
 800863a:	460f      	mov	r7, r1
 800863c:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008640:	9606      	str	r6, [sp, #24]
 8008642:	9307      	str	r3, [sp, #28]
 8008644:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008648:	4d54      	ldr	r5, [pc, #336]	@ (800879c <_strtod_l+0xadc>)
 800864a:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800864e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008650:	401d      	ands	r5, r3
 8008652:	4b57      	ldr	r3, [pc, #348]	@ (80087b0 <_strtod_l+0xaf0>)
 8008654:	429d      	cmp	r5, r3
 8008656:	f040 80af 	bne.w	80087b8 <_strtod_l+0xaf8>
 800865a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800865c:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008660:	4650      	mov	r0, sl
 8008662:	4659      	mov	r1, fp
 8008664:	f7ff f9d4 	bl	8007a10 <__ulp>
 8008668:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800866c:	f7f7 ffe4 	bl	8000638 <__aeabi_dmul>
 8008670:	4652      	mov	r2, sl
 8008672:	465b      	mov	r3, fp
 8008674:	f7f7 fe2a 	bl	80002cc <__adddf3>
 8008678:	460b      	mov	r3, r1
 800867a:	4948      	ldr	r1, [pc, #288]	@ (800879c <_strtod_l+0xadc>)
 800867c:	4a4d      	ldr	r2, [pc, #308]	@ (80087b4 <_strtod_l+0xaf4>)
 800867e:	4019      	ands	r1, r3
 8008680:	4291      	cmp	r1, r2
 8008682:	4682      	mov	sl, r0
 8008684:	d942      	bls.n	800870c <_strtod_l+0xa4c>
 8008686:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008688:	4b46      	ldr	r3, [pc, #280]	@ (80087a4 <_strtod_l+0xae4>)
 800868a:	429a      	cmp	r2, r3
 800868c:	d103      	bne.n	8008696 <_strtod_l+0x9d6>
 800868e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008690:	3301      	adds	r3, #1
 8008692:	f43f ad34 	beq.w	80080fe <_strtod_l+0x43e>
 8008696:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80087a4 <_strtod_l+0xae4>
 800869a:	f04f 3aff 	mov.w	sl, #4294967295
 800869e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086a0:	9805      	ldr	r0, [sp, #20]
 80086a2:	f7fe fe89 	bl	80073b8 <_Bfree>
 80086a6:	9805      	ldr	r0, [sp, #20]
 80086a8:	4649      	mov	r1, r9
 80086aa:	f7fe fe85 	bl	80073b8 <_Bfree>
 80086ae:	9805      	ldr	r0, [sp, #20]
 80086b0:	4641      	mov	r1, r8
 80086b2:	f7fe fe81 	bl	80073b8 <_Bfree>
 80086b6:	9805      	ldr	r0, [sp, #20]
 80086b8:	4621      	mov	r1, r4
 80086ba:	f7fe fe7d 	bl	80073b8 <_Bfree>
 80086be:	e61e      	b.n	80082fe <_strtod_l+0x63e>
 80086c0:	f1ba 0f01 	cmp.w	sl, #1
 80086c4:	d103      	bne.n	80086ce <_strtod_l+0xa0e>
 80086c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f43f adab 	beq.w	8008224 <_strtod_l+0x564>
 80086ce:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8008778 <_strtod_l+0xab8>
 80086d2:	4f35      	ldr	r7, [pc, #212]	@ (80087a8 <_strtod_l+0xae8>)
 80086d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80086d8:	2600      	movs	r6, #0
 80086da:	e7b3      	b.n	8008644 <_strtod_l+0x984>
 80086dc:	4f33      	ldr	r7, [pc, #204]	@ (80087ac <_strtod_l+0xaec>)
 80086de:	2600      	movs	r6, #0
 80086e0:	e7ac      	b.n	800863c <_strtod_l+0x97c>
 80086e2:	4b32      	ldr	r3, [pc, #200]	@ (80087ac <_strtod_l+0xaec>)
 80086e4:	4630      	mov	r0, r6
 80086e6:	4639      	mov	r1, r7
 80086e8:	2200      	movs	r2, #0
 80086ea:	f7f7 ffa5 	bl	8000638 <__aeabi_dmul>
 80086ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086f0:	4606      	mov	r6, r0
 80086f2:	460f      	mov	r7, r1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0a1      	beq.n	800863c <_strtod_l+0x97c>
 80086f8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80086fc:	e7a2      	b.n	8008644 <_strtod_l+0x984>
 80086fe:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8008780 <_strtod_l+0xac0>
 8008702:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008706:	ec57 6b17 	vmov	r6, r7, d7
 800870a:	e79b      	b.n	8008644 <_strtod_l+0x984>
 800870c:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008710:	9b08      	ldr	r3, [sp, #32]
 8008712:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1c1      	bne.n	800869e <_strtod_l+0x9de>
 800871a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800871e:	0d1b      	lsrs	r3, r3, #20
 8008720:	051b      	lsls	r3, r3, #20
 8008722:	429d      	cmp	r5, r3
 8008724:	d1bb      	bne.n	800869e <_strtod_l+0x9de>
 8008726:	4630      	mov	r0, r6
 8008728:	4639      	mov	r1, r7
 800872a:	f7f8 fae5 	bl	8000cf8 <__aeabi_d2lz>
 800872e:	f7f7 ff55 	bl	80005dc <__aeabi_l2d>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	4630      	mov	r0, r6
 8008738:	4639      	mov	r1, r7
 800873a:	f7f7 fdc5 	bl	80002c8 <__aeabi_dsub>
 800873e:	460b      	mov	r3, r1
 8008740:	4602      	mov	r2, r0
 8008742:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008746:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800874a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800874c:	ea46 060a 	orr.w	r6, r6, sl
 8008750:	431e      	orrs	r6, r3
 8008752:	d06e      	beq.n	8008832 <_strtod_l+0xb72>
 8008754:	a30c      	add	r3, pc, #48	@ (adr r3, 8008788 <_strtod_l+0xac8>)
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	f7f8 f9df 	bl	8000b1c <__aeabi_dcmplt>
 800875e:	2800      	cmp	r0, #0
 8008760:	f47f acd8 	bne.w	8008114 <_strtod_l+0x454>
 8008764:	a30a      	add	r3, pc, #40	@ (adr r3, 8008790 <_strtod_l+0xad0>)
 8008766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800876e:	f7f8 f9f3 	bl	8000b58 <__aeabi_dcmpgt>
 8008772:	2800      	cmp	r0, #0
 8008774:	d093      	beq.n	800869e <_strtod_l+0x9de>
 8008776:	e4cd      	b.n	8008114 <_strtod_l+0x454>
 8008778:	00000000 	.word	0x00000000
 800877c:	bff00000 	.word	0xbff00000
 8008780:	00000000 	.word	0x00000000
 8008784:	3ff00000 	.word	0x3ff00000
 8008788:	94a03595 	.word	0x94a03595
 800878c:	3fdfffff 	.word	0x3fdfffff
 8008790:	35afe535 	.word	0x35afe535
 8008794:	3fe00000 	.word	0x3fe00000
 8008798:	39500000 	.word	0x39500000
 800879c:	7ff00000 	.word	0x7ff00000
 80087a0:	000fffff 	.word	0x000fffff
 80087a4:	7fefffff 	.word	0x7fefffff
 80087a8:	3ff00000 	.word	0x3ff00000
 80087ac:	3fe00000 	.word	0x3fe00000
 80087b0:	7fe00000 	.word	0x7fe00000
 80087b4:	7c9fffff 	.word	0x7c9fffff
 80087b8:	9b08      	ldr	r3, [sp, #32]
 80087ba:	b323      	cbz	r3, 8008806 <_strtod_l+0xb46>
 80087bc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80087c0:	d821      	bhi.n	8008806 <_strtod_l+0xb46>
 80087c2:	a327      	add	r3, pc, #156	@ (adr r3, 8008860 <_strtod_l+0xba0>)
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	4630      	mov	r0, r6
 80087ca:	4639      	mov	r1, r7
 80087cc:	f7f8 f9b0 	bl	8000b30 <__aeabi_dcmple>
 80087d0:	b1a0      	cbz	r0, 80087fc <_strtod_l+0xb3c>
 80087d2:	4639      	mov	r1, r7
 80087d4:	4630      	mov	r0, r6
 80087d6:	f7f8 fa07 	bl	8000be8 <__aeabi_d2uiz>
 80087da:	2801      	cmp	r0, #1
 80087dc:	bf38      	it	cc
 80087de:	2001      	movcc	r0, #1
 80087e0:	f7f7 feb0 	bl	8000544 <__aeabi_ui2d>
 80087e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087e6:	4606      	mov	r6, r0
 80087e8:	460f      	mov	r7, r1
 80087ea:	b9fb      	cbnz	r3, 800882c <_strtod_l+0xb6c>
 80087ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80087f0:	9014      	str	r0, [sp, #80]	@ 0x50
 80087f2:	9315      	str	r3, [sp, #84]	@ 0x54
 80087f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80087f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80087fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80087fe:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008802:	1b5b      	subs	r3, r3, r5
 8008804:	9311      	str	r3, [sp, #68]	@ 0x44
 8008806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800880a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800880e:	f7ff f8ff 	bl	8007a10 <__ulp>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	4650      	mov	r0, sl
 8008818:	4659      	mov	r1, fp
 800881a:	f7f7 ff0d 	bl	8000638 <__aeabi_dmul>
 800881e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008822:	f7f7 fd53 	bl	80002cc <__adddf3>
 8008826:	4682      	mov	sl, r0
 8008828:	468b      	mov	fp, r1
 800882a:	e771      	b.n	8008710 <_strtod_l+0xa50>
 800882c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008830:	e7e0      	b.n	80087f4 <_strtod_l+0xb34>
 8008832:	a30d      	add	r3, pc, #52	@ (adr r3, 8008868 <_strtod_l+0xba8>)
 8008834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008838:	f7f8 f970 	bl	8000b1c <__aeabi_dcmplt>
 800883c:	e799      	b.n	8008772 <_strtod_l+0xab2>
 800883e:	2300      	movs	r3, #0
 8008840:	930e      	str	r3, [sp, #56]	@ 0x38
 8008842:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008844:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	f7ff ba77 	b.w	8007d3a <_strtod_l+0x7a>
 800884c:	2a65      	cmp	r2, #101	@ 0x65
 800884e:	f43f ab70 	beq.w	8007f32 <_strtod_l+0x272>
 8008852:	2a45      	cmp	r2, #69	@ 0x45
 8008854:	f43f ab6d 	beq.w	8007f32 <_strtod_l+0x272>
 8008858:	2301      	movs	r3, #1
 800885a:	f7ff bba8 	b.w	8007fae <_strtod_l+0x2ee>
 800885e:	bf00      	nop
 8008860:	ffc00000 	.word	0xffc00000
 8008864:	41dfffff 	.word	0x41dfffff
 8008868:	94a03595 	.word	0x94a03595
 800886c:	3fcfffff 	.word	0x3fcfffff

08008870 <_strtod_r>:
 8008870:	4b01      	ldr	r3, [pc, #4]	@ (8008878 <_strtod_r+0x8>)
 8008872:	f7ff ba25 	b.w	8007cc0 <_strtod_l>
 8008876:	bf00      	nop
 8008878:	20000068 	.word	0x20000068

0800887c <_strtol_l.isra.0>:
 800887c:	2b24      	cmp	r3, #36	@ 0x24
 800887e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008882:	4686      	mov	lr, r0
 8008884:	4690      	mov	r8, r2
 8008886:	d801      	bhi.n	800888c <_strtol_l.isra.0+0x10>
 8008888:	2b01      	cmp	r3, #1
 800888a:	d106      	bne.n	800889a <_strtol_l.isra.0+0x1e>
 800888c:	f7fd fdc8 	bl	8006420 <__errno>
 8008890:	2316      	movs	r3, #22
 8008892:	6003      	str	r3, [r0, #0]
 8008894:	2000      	movs	r0, #0
 8008896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800889a:	4834      	ldr	r0, [pc, #208]	@ (800896c <_strtol_l.isra.0+0xf0>)
 800889c:	460d      	mov	r5, r1
 800889e:	462a      	mov	r2, r5
 80088a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088a4:	5d06      	ldrb	r6, [r0, r4]
 80088a6:	f016 0608 	ands.w	r6, r6, #8
 80088aa:	d1f8      	bne.n	800889e <_strtol_l.isra.0+0x22>
 80088ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80088ae:	d110      	bne.n	80088d2 <_strtol_l.isra.0+0x56>
 80088b0:	782c      	ldrb	r4, [r5, #0]
 80088b2:	2601      	movs	r6, #1
 80088b4:	1c95      	adds	r5, r2, #2
 80088b6:	f033 0210 	bics.w	r2, r3, #16
 80088ba:	d115      	bne.n	80088e8 <_strtol_l.isra.0+0x6c>
 80088bc:	2c30      	cmp	r4, #48	@ 0x30
 80088be:	d10d      	bne.n	80088dc <_strtol_l.isra.0+0x60>
 80088c0:	782a      	ldrb	r2, [r5, #0]
 80088c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80088c6:	2a58      	cmp	r2, #88	@ 0x58
 80088c8:	d108      	bne.n	80088dc <_strtol_l.isra.0+0x60>
 80088ca:	786c      	ldrb	r4, [r5, #1]
 80088cc:	3502      	adds	r5, #2
 80088ce:	2310      	movs	r3, #16
 80088d0:	e00a      	b.n	80088e8 <_strtol_l.isra.0+0x6c>
 80088d2:	2c2b      	cmp	r4, #43	@ 0x2b
 80088d4:	bf04      	itt	eq
 80088d6:	782c      	ldrbeq	r4, [r5, #0]
 80088d8:	1c95      	addeq	r5, r2, #2
 80088da:	e7ec      	b.n	80088b6 <_strtol_l.isra.0+0x3a>
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1f6      	bne.n	80088ce <_strtol_l.isra.0+0x52>
 80088e0:	2c30      	cmp	r4, #48	@ 0x30
 80088e2:	bf14      	ite	ne
 80088e4:	230a      	movne	r3, #10
 80088e6:	2308      	moveq	r3, #8
 80088e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80088ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80088f0:	2200      	movs	r2, #0
 80088f2:	fbbc f9f3 	udiv	r9, ip, r3
 80088f6:	4610      	mov	r0, r2
 80088f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80088fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008900:	2f09      	cmp	r7, #9
 8008902:	d80f      	bhi.n	8008924 <_strtol_l.isra.0+0xa8>
 8008904:	463c      	mov	r4, r7
 8008906:	42a3      	cmp	r3, r4
 8008908:	dd1b      	ble.n	8008942 <_strtol_l.isra.0+0xc6>
 800890a:	1c57      	adds	r7, r2, #1
 800890c:	d007      	beq.n	800891e <_strtol_l.isra.0+0xa2>
 800890e:	4581      	cmp	r9, r0
 8008910:	d314      	bcc.n	800893c <_strtol_l.isra.0+0xc0>
 8008912:	d101      	bne.n	8008918 <_strtol_l.isra.0+0x9c>
 8008914:	45a2      	cmp	sl, r4
 8008916:	db11      	blt.n	800893c <_strtol_l.isra.0+0xc0>
 8008918:	fb00 4003 	mla	r0, r0, r3, r4
 800891c:	2201      	movs	r2, #1
 800891e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008922:	e7eb      	b.n	80088fc <_strtol_l.isra.0+0x80>
 8008924:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008928:	2f19      	cmp	r7, #25
 800892a:	d801      	bhi.n	8008930 <_strtol_l.isra.0+0xb4>
 800892c:	3c37      	subs	r4, #55	@ 0x37
 800892e:	e7ea      	b.n	8008906 <_strtol_l.isra.0+0x8a>
 8008930:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008934:	2f19      	cmp	r7, #25
 8008936:	d804      	bhi.n	8008942 <_strtol_l.isra.0+0xc6>
 8008938:	3c57      	subs	r4, #87	@ 0x57
 800893a:	e7e4      	b.n	8008906 <_strtol_l.isra.0+0x8a>
 800893c:	f04f 32ff 	mov.w	r2, #4294967295
 8008940:	e7ed      	b.n	800891e <_strtol_l.isra.0+0xa2>
 8008942:	1c53      	adds	r3, r2, #1
 8008944:	d108      	bne.n	8008958 <_strtol_l.isra.0+0xdc>
 8008946:	2322      	movs	r3, #34	@ 0x22
 8008948:	f8ce 3000 	str.w	r3, [lr]
 800894c:	4660      	mov	r0, ip
 800894e:	f1b8 0f00 	cmp.w	r8, #0
 8008952:	d0a0      	beq.n	8008896 <_strtol_l.isra.0+0x1a>
 8008954:	1e69      	subs	r1, r5, #1
 8008956:	e006      	b.n	8008966 <_strtol_l.isra.0+0xea>
 8008958:	b106      	cbz	r6, 800895c <_strtol_l.isra.0+0xe0>
 800895a:	4240      	negs	r0, r0
 800895c:	f1b8 0f00 	cmp.w	r8, #0
 8008960:	d099      	beq.n	8008896 <_strtol_l.isra.0+0x1a>
 8008962:	2a00      	cmp	r2, #0
 8008964:	d1f6      	bne.n	8008954 <_strtol_l.isra.0+0xd8>
 8008966:	f8c8 1000 	str.w	r1, [r8]
 800896a:	e794      	b.n	8008896 <_strtol_l.isra.0+0x1a>
 800896c:	08009fe1 	.word	0x08009fe1

08008970 <_strtol_r>:
 8008970:	f7ff bf84 	b.w	800887c <_strtol_l.isra.0>

08008974 <__ssputs_r>:
 8008974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008978:	688e      	ldr	r6, [r1, #8]
 800897a:	461f      	mov	r7, r3
 800897c:	42be      	cmp	r6, r7
 800897e:	680b      	ldr	r3, [r1, #0]
 8008980:	4682      	mov	sl, r0
 8008982:	460c      	mov	r4, r1
 8008984:	4690      	mov	r8, r2
 8008986:	d82d      	bhi.n	80089e4 <__ssputs_r+0x70>
 8008988:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800898c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008990:	d026      	beq.n	80089e0 <__ssputs_r+0x6c>
 8008992:	6965      	ldr	r5, [r4, #20]
 8008994:	6909      	ldr	r1, [r1, #16]
 8008996:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800899a:	eba3 0901 	sub.w	r9, r3, r1
 800899e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089a2:	1c7b      	adds	r3, r7, #1
 80089a4:	444b      	add	r3, r9
 80089a6:	106d      	asrs	r5, r5, #1
 80089a8:	429d      	cmp	r5, r3
 80089aa:	bf38      	it	cc
 80089ac:	461d      	movcc	r5, r3
 80089ae:	0553      	lsls	r3, r2, #21
 80089b0:	d527      	bpl.n	8008a02 <__ssputs_r+0x8e>
 80089b2:	4629      	mov	r1, r5
 80089b4:	f7fe fc34 	bl	8007220 <_malloc_r>
 80089b8:	4606      	mov	r6, r0
 80089ba:	b360      	cbz	r0, 8008a16 <__ssputs_r+0xa2>
 80089bc:	6921      	ldr	r1, [r4, #16]
 80089be:	464a      	mov	r2, r9
 80089c0:	f000 fa18 	bl	8008df4 <memcpy>
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80089ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ce:	81a3      	strh	r3, [r4, #12]
 80089d0:	6126      	str	r6, [r4, #16]
 80089d2:	6165      	str	r5, [r4, #20]
 80089d4:	444e      	add	r6, r9
 80089d6:	eba5 0509 	sub.w	r5, r5, r9
 80089da:	6026      	str	r6, [r4, #0]
 80089dc:	60a5      	str	r5, [r4, #8]
 80089de:	463e      	mov	r6, r7
 80089e0:	42be      	cmp	r6, r7
 80089e2:	d900      	bls.n	80089e6 <__ssputs_r+0x72>
 80089e4:	463e      	mov	r6, r7
 80089e6:	6820      	ldr	r0, [r4, #0]
 80089e8:	4632      	mov	r2, r6
 80089ea:	4641      	mov	r1, r8
 80089ec:	f000 f9c6 	bl	8008d7c <memmove>
 80089f0:	68a3      	ldr	r3, [r4, #8]
 80089f2:	1b9b      	subs	r3, r3, r6
 80089f4:	60a3      	str	r3, [r4, #8]
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	4433      	add	r3, r6
 80089fa:	6023      	str	r3, [r4, #0]
 80089fc:	2000      	movs	r0, #0
 80089fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a02:	462a      	mov	r2, r5
 8008a04:	f000 fd87 	bl	8009516 <_realloc_r>
 8008a08:	4606      	mov	r6, r0
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	d1e0      	bne.n	80089d0 <__ssputs_r+0x5c>
 8008a0e:	6921      	ldr	r1, [r4, #16]
 8008a10:	4650      	mov	r0, sl
 8008a12:	f7fe fb91 	bl	8007138 <_free_r>
 8008a16:	230c      	movs	r3, #12
 8008a18:	f8ca 3000 	str.w	r3, [sl]
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a22:	81a3      	strh	r3, [r4, #12]
 8008a24:	f04f 30ff 	mov.w	r0, #4294967295
 8008a28:	e7e9      	b.n	80089fe <__ssputs_r+0x8a>
	...

08008a2c <_svfiprintf_r>:
 8008a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a30:	4698      	mov	r8, r3
 8008a32:	898b      	ldrh	r3, [r1, #12]
 8008a34:	061b      	lsls	r3, r3, #24
 8008a36:	b09d      	sub	sp, #116	@ 0x74
 8008a38:	4607      	mov	r7, r0
 8008a3a:	460d      	mov	r5, r1
 8008a3c:	4614      	mov	r4, r2
 8008a3e:	d510      	bpl.n	8008a62 <_svfiprintf_r+0x36>
 8008a40:	690b      	ldr	r3, [r1, #16]
 8008a42:	b973      	cbnz	r3, 8008a62 <_svfiprintf_r+0x36>
 8008a44:	2140      	movs	r1, #64	@ 0x40
 8008a46:	f7fe fbeb 	bl	8007220 <_malloc_r>
 8008a4a:	6028      	str	r0, [r5, #0]
 8008a4c:	6128      	str	r0, [r5, #16]
 8008a4e:	b930      	cbnz	r0, 8008a5e <_svfiprintf_r+0x32>
 8008a50:	230c      	movs	r3, #12
 8008a52:	603b      	str	r3, [r7, #0]
 8008a54:	f04f 30ff 	mov.w	r0, #4294967295
 8008a58:	b01d      	add	sp, #116	@ 0x74
 8008a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a5e:	2340      	movs	r3, #64	@ 0x40
 8008a60:	616b      	str	r3, [r5, #20]
 8008a62:	2300      	movs	r3, #0
 8008a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a66:	2320      	movs	r3, #32
 8008a68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a70:	2330      	movs	r3, #48	@ 0x30
 8008a72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008c10 <_svfiprintf_r+0x1e4>
 8008a76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a7a:	f04f 0901 	mov.w	r9, #1
 8008a7e:	4623      	mov	r3, r4
 8008a80:	469a      	mov	sl, r3
 8008a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a86:	b10a      	cbz	r2, 8008a8c <_svfiprintf_r+0x60>
 8008a88:	2a25      	cmp	r2, #37	@ 0x25
 8008a8a:	d1f9      	bne.n	8008a80 <_svfiprintf_r+0x54>
 8008a8c:	ebba 0b04 	subs.w	fp, sl, r4
 8008a90:	d00b      	beq.n	8008aaa <_svfiprintf_r+0x7e>
 8008a92:	465b      	mov	r3, fp
 8008a94:	4622      	mov	r2, r4
 8008a96:	4629      	mov	r1, r5
 8008a98:	4638      	mov	r0, r7
 8008a9a:	f7ff ff6b 	bl	8008974 <__ssputs_r>
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	f000 80a7 	beq.w	8008bf2 <_svfiprintf_r+0x1c6>
 8008aa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008aa6:	445a      	add	r2, fp
 8008aa8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 809f 	beq.w	8008bf2 <_svfiprintf_r+0x1c6>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8008aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008abe:	f10a 0a01 	add.w	sl, sl, #1
 8008ac2:	9304      	str	r3, [sp, #16]
 8008ac4:	9307      	str	r3, [sp, #28]
 8008ac6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008aca:	931a      	str	r3, [sp, #104]	@ 0x68
 8008acc:	4654      	mov	r4, sl
 8008ace:	2205      	movs	r2, #5
 8008ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad4:	484e      	ldr	r0, [pc, #312]	@ (8008c10 <_svfiprintf_r+0x1e4>)
 8008ad6:	f7f7 fb9b 	bl	8000210 <memchr>
 8008ada:	9a04      	ldr	r2, [sp, #16]
 8008adc:	b9d8      	cbnz	r0, 8008b16 <_svfiprintf_r+0xea>
 8008ade:	06d0      	lsls	r0, r2, #27
 8008ae0:	bf44      	itt	mi
 8008ae2:	2320      	movmi	r3, #32
 8008ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ae8:	0711      	lsls	r1, r2, #28
 8008aea:	bf44      	itt	mi
 8008aec:	232b      	movmi	r3, #43	@ 0x2b
 8008aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008af2:	f89a 3000 	ldrb.w	r3, [sl]
 8008af6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008af8:	d015      	beq.n	8008b26 <_svfiprintf_r+0xfa>
 8008afa:	9a07      	ldr	r2, [sp, #28]
 8008afc:	4654      	mov	r4, sl
 8008afe:	2000      	movs	r0, #0
 8008b00:	f04f 0c0a 	mov.w	ip, #10
 8008b04:	4621      	mov	r1, r4
 8008b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b0a:	3b30      	subs	r3, #48	@ 0x30
 8008b0c:	2b09      	cmp	r3, #9
 8008b0e:	d94b      	bls.n	8008ba8 <_svfiprintf_r+0x17c>
 8008b10:	b1b0      	cbz	r0, 8008b40 <_svfiprintf_r+0x114>
 8008b12:	9207      	str	r2, [sp, #28]
 8008b14:	e014      	b.n	8008b40 <_svfiprintf_r+0x114>
 8008b16:	eba0 0308 	sub.w	r3, r0, r8
 8008b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	9304      	str	r3, [sp, #16]
 8008b22:	46a2      	mov	sl, r4
 8008b24:	e7d2      	b.n	8008acc <_svfiprintf_r+0xa0>
 8008b26:	9b03      	ldr	r3, [sp, #12]
 8008b28:	1d19      	adds	r1, r3, #4
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	9103      	str	r1, [sp, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	bfbb      	ittet	lt
 8008b32:	425b      	neglt	r3, r3
 8008b34:	f042 0202 	orrlt.w	r2, r2, #2
 8008b38:	9307      	strge	r3, [sp, #28]
 8008b3a:	9307      	strlt	r3, [sp, #28]
 8008b3c:	bfb8      	it	lt
 8008b3e:	9204      	strlt	r2, [sp, #16]
 8008b40:	7823      	ldrb	r3, [r4, #0]
 8008b42:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b44:	d10a      	bne.n	8008b5c <_svfiprintf_r+0x130>
 8008b46:	7863      	ldrb	r3, [r4, #1]
 8008b48:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b4a:	d132      	bne.n	8008bb2 <_svfiprintf_r+0x186>
 8008b4c:	9b03      	ldr	r3, [sp, #12]
 8008b4e:	1d1a      	adds	r2, r3, #4
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	9203      	str	r2, [sp, #12]
 8008b54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b58:	3402      	adds	r4, #2
 8008b5a:	9305      	str	r3, [sp, #20]
 8008b5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008c20 <_svfiprintf_r+0x1f4>
 8008b60:	7821      	ldrb	r1, [r4, #0]
 8008b62:	2203      	movs	r2, #3
 8008b64:	4650      	mov	r0, sl
 8008b66:	f7f7 fb53 	bl	8000210 <memchr>
 8008b6a:	b138      	cbz	r0, 8008b7c <_svfiprintf_r+0x150>
 8008b6c:	9b04      	ldr	r3, [sp, #16]
 8008b6e:	eba0 000a 	sub.w	r0, r0, sl
 8008b72:	2240      	movs	r2, #64	@ 0x40
 8008b74:	4082      	lsls	r2, r0
 8008b76:	4313      	orrs	r3, r2
 8008b78:	3401      	adds	r4, #1
 8008b7a:	9304      	str	r3, [sp, #16]
 8008b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b80:	4824      	ldr	r0, [pc, #144]	@ (8008c14 <_svfiprintf_r+0x1e8>)
 8008b82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b86:	2206      	movs	r2, #6
 8008b88:	f7f7 fb42 	bl	8000210 <memchr>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d036      	beq.n	8008bfe <_svfiprintf_r+0x1d2>
 8008b90:	4b21      	ldr	r3, [pc, #132]	@ (8008c18 <_svfiprintf_r+0x1ec>)
 8008b92:	bb1b      	cbnz	r3, 8008bdc <_svfiprintf_r+0x1b0>
 8008b94:	9b03      	ldr	r3, [sp, #12]
 8008b96:	3307      	adds	r3, #7
 8008b98:	f023 0307 	bic.w	r3, r3, #7
 8008b9c:	3308      	adds	r3, #8
 8008b9e:	9303      	str	r3, [sp, #12]
 8008ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ba2:	4433      	add	r3, r6
 8008ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ba6:	e76a      	b.n	8008a7e <_svfiprintf_r+0x52>
 8008ba8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bac:	460c      	mov	r4, r1
 8008bae:	2001      	movs	r0, #1
 8008bb0:	e7a8      	b.n	8008b04 <_svfiprintf_r+0xd8>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	3401      	adds	r4, #1
 8008bb6:	9305      	str	r3, [sp, #20]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	f04f 0c0a 	mov.w	ip, #10
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bc4:	3a30      	subs	r2, #48	@ 0x30
 8008bc6:	2a09      	cmp	r2, #9
 8008bc8:	d903      	bls.n	8008bd2 <_svfiprintf_r+0x1a6>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d0c6      	beq.n	8008b5c <_svfiprintf_r+0x130>
 8008bce:	9105      	str	r1, [sp, #20]
 8008bd0:	e7c4      	b.n	8008b5c <_svfiprintf_r+0x130>
 8008bd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e7f0      	b.n	8008bbe <_svfiprintf_r+0x192>
 8008bdc:	ab03      	add	r3, sp, #12
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	462a      	mov	r2, r5
 8008be2:	4b0e      	ldr	r3, [pc, #56]	@ (8008c1c <_svfiprintf_r+0x1f0>)
 8008be4:	a904      	add	r1, sp, #16
 8008be6:	4638      	mov	r0, r7
 8008be8:	f7fc fcaa 	bl	8005540 <_printf_float>
 8008bec:	1c42      	adds	r2, r0, #1
 8008bee:	4606      	mov	r6, r0
 8008bf0:	d1d6      	bne.n	8008ba0 <_svfiprintf_r+0x174>
 8008bf2:	89ab      	ldrh	r3, [r5, #12]
 8008bf4:	065b      	lsls	r3, r3, #25
 8008bf6:	f53f af2d 	bmi.w	8008a54 <_svfiprintf_r+0x28>
 8008bfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bfc:	e72c      	b.n	8008a58 <_svfiprintf_r+0x2c>
 8008bfe:	ab03      	add	r3, sp, #12
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	462a      	mov	r2, r5
 8008c04:	4b05      	ldr	r3, [pc, #20]	@ (8008c1c <_svfiprintf_r+0x1f0>)
 8008c06:	a904      	add	r1, sp, #16
 8008c08:	4638      	mov	r0, r7
 8008c0a:	f7fc ff33 	bl	8005a74 <_printf_i>
 8008c0e:	e7ed      	b.n	8008bec <_svfiprintf_r+0x1c0>
 8008c10:	08009ddd 	.word	0x08009ddd
 8008c14:	08009de7 	.word	0x08009de7
 8008c18:	08005541 	.word	0x08005541
 8008c1c:	08008975 	.word	0x08008975
 8008c20:	08009de3 	.word	0x08009de3

08008c24 <__sflush_r>:
 8008c24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2c:	0716      	lsls	r6, r2, #28
 8008c2e:	4605      	mov	r5, r0
 8008c30:	460c      	mov	r4, r1
 8008c32:	d454      	bmi.n	8008cde <__sflush_r+0xba>
 8008c34:	684b      	ldr	r3, [r1, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	dc02      	bgt.n	8008c40 <__sflush_r+0x1c>
 8008c3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	dd48      	ble.n	8008cd2 <__sflush_r+0xae>
 8008c40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c42:	2e00      	cmp	r6, #0
 8008c44:	d045      	beq.n	8008cd2 <__sflush_r+0xae>
 8008c46:	2300      	movs	r3, #0
 8008c48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c4c:	682f      	ldr	r7, [r5, #0]
 8008c4e:	6a21      	ldr	r1, [r4, #32]
 8008c50:	602b      	str	r3, [r5, #0]
 8008c52:	d030      	beq.n	8008cb6 <__sflush_r+0x92>
 8008c54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c56:	89a3      	ldrh	r3, [r4, #12]
 8008c58:	0759      	lsls	r1, r3, #29
 8008c5a:	d505      	bpl.n	8008c68 <__sflush_r+0x44>
 8008c5c:	6863      	ldr	r3, [r4, #4]
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c62:	b10b      	cbz	r3, 8008c68 <__sflush_r+0x44>
 8008c64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c66:	1ad2      	subs	r2, r2, r3
 8008c68:	2300      	movs	r3, #0
 8008c6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c6c:	6a21      	ldr	r1, [r4, #32]
 8008c6e:	4628      	mov	r0, r5
 8008c70:	47b0      	blx	r6
 8008c72:	1c43      	adds	r3, r0, #1
 8008c74:	89a3      	ldrh	r3, [r4, #12]
 8008c76:	d106      	bne.n	8008c86 <__sflush_r+0x62>
 8008c78:	6829      	ldr	r1, [r5, #0]
 8008c7a:	291d      	cmp	r1, #29
 8008c7c:	d82b      	bhi.n	8008cd6 <__sflush_r+0xb2>
 8008c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8008d28 <__sflush_r+0x104>)
 8008c80:	40ca      	lsrs	r2, r1
 8008c82:	07d6      	lsls	r6, r2, #31
 8008c84:	d527      	bpl.n	8008cd6 <__sflush_r+0xb2>
 8008c86:	2200      	movs	r2, #0
 8008c88:	6062      	str	r2, [r4, #4]
 8008c8a:	04d9      	lsls	r1, r3, #19
 8008c8c:	6922      	ldr	r2, [r4, #16]
 8008c8e:	6022      	str	r2, [r4, #0]
 8008c90:	d504      	bpl.n	8008c9c <__sflush_r+0x78>
 8008c92:	1c42      	adds	r2, r0, #1
 8008c94:	d101      	bne.n	8008c9a <__sflush_r+0x76>
 8008c96:	682b      	ldr	r3, [r5, #0]
 8008c98:	b903      	cbnz	r3, 8008c9c <__sflush_r+0x78>
 8008c9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c9e:	602f      	str	r7, [r5, #0]
 8008ca0:	b1b9      	cbz	r1, 8008cd2 <__sflush_r+0xae>
 8008ca2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ca6:	4299      	cmp	r1, r3
 8008ca8:	d002      	beq.n	8008cb0 <__sflush_r+0x8c>
 8008caa:	4628      	mov	r0, r5
 8008cac:	f7fe fa44 	bl	8007138 <_free_r>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cb4:	e00d      	b.n	8008cd2 <__sflush_r+0xae>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	4628      	mov	r0, r5
 8008cba:	47b0      	blx	r6
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	1c50      	adds	r0, r2, #1
 8008cc0:	d1c9      	bne.n	8008c56 <__sflush_r+0x32>
 8008cc2:	682b      	ldr	r3, [r5, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d0c6      	beq.n	8008c56 <__sflush_r+0x32>
 8008cc8:	2b1d      	cmp	r3, #29
 8008cca:	d001      	beq.n	8008cd0 <__sflush_r+0xac>
 8008ccc:	2b16      	cmp	r3, #22
 8008cce:	d11e      	bne.n	8008d0e <__sflush_r+0xea>
 8008cd0:	602f      	str	r7, [r5, #0]
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	e022      	b.n	8008d1c <__sflush_r+0xf8>
 8008cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cda:	b21b      	sxth	r3, r3
 8008cdc:	e01b      	b.n	8008d16 <__sflush_r+0xf2>
 8008cde:	690f      	ldr	r7, [r1, #16]
 8008ce0:	2f00      	cmp	r7, #0
 8008ce2:	d0f6      	beq.n	8008cd2 <__sflush_r+0xae>
 8008ce4:	0793      	lsls	r3, r2, #30
 8008ce6:	680e      	ldr	r6, [r1, #0]
 8008ce8:	bf08      	it	eq
 8008cea:	694b      	ldreq	r3, [r1, #20]
 8008cec:	600f      	str	r7, [r1, #0]
 8008cee:	bf18      	it	ne
 8008cf0:	2300      	movne	r3, #0
 8008cf2:	eba6 0807 	sub.w	r8, r6, r7
 8008cf6:	608b      	str	r3, [r1, #8]
 8008cf8:	f1b8 0f00 	cmp.w	r8, #0
 8008cfc:	dde9      	ble.n	8008cd2 <__sflush_r+0xae>
 8008cfe:	6a21      	ldr	r1, [r4, #32]
 8008d00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d02:	4643      	mov	r3, r8
 8008d04:	463a      	mov	r2, r7
 8008d06:	4628      	mov	r0, r5
 8008d08:	47b0      	blx	r6
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	dc08      	bgt.n	8008d20 <__sflush_r+0xfc>
 8008d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d16:	81a3      	strh	r3, [r4, #12]
 8008d18:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d20:	4407      	add	r7, r0
 8008d22:	eba8 0800 	sub.w	r8, r8, r0
 8008d26:	e7e7      	b.n	8008cf8 <__sflush_r+0xd4>
 8008d28:	20400001 	.word	0x20400001

08008d2c <_fflush_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	690b      	ldr	r3, [r1, #16]
 8008d30:	4605      	mov	r5, r0
 8008d32:	460c      	mov	r4, r1
 8008d34:	b913      	cbnz	r3, 8008d3c <_fflush_r+0x10>
 8008d36:	2500      	movs	r5, #0
 8008d38:	4628      	mov	r0, r5
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	b118      	cbz	r0, 8008d46 <_fflush_r+0x1a>
 8008d3e:	6a03      	ldr	r3, [r0, #32]
 8008d40:	b90b      	cbnz	r3, 8008d46 <_fflush_r+0x1a>
 8008d42:	f7fd fa49 	bl	80061d8 <__sinit>
 8008d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d0f3      	beq.n	8008d36 <_fflush_r+0xa>
 8008d4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d50:	07d0      	lsls	r0, r2, #31
 8008d52:	d404      	bmi.n	8008d5e <_fflush_r+0x32>
 8008d54:	0599      	lsls	r1, r3, #22
 8008d56:	d402      	bmi.n	8008d5e <_fflush_r+0x32>
 8008d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d5a:	f7fd fb8c 	bl	8006476 <__retarget_lock_acquire_recursive>
 8008d5e:	4628      	mov	r0, r5
 8008d60:	4621      	mov	r1, r4
 8008d62:	f7ff ff5f 	bl	8008c24 <__sflush_r>
 8008d66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d68:	07da      	lsls	r2, r3, #31
 8008d6a:	4605      	mov	r5, r0
 8008d6c:	d4e4      	bmi.n	8008d38 <_fflush_r+0xc>
 8008d6e:	89a3      	ldrh	r3, [r4, #12]
 8008d70:	059b      	lsls	r3, r3, #22
 8008d72:	d4e1      	bmi.n	8008d38 <_fflush_r+0xc>
 8008d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d76:	f7fd fb7f 	bl	8006478 <__retarget_lock_release_recursive>
 8008d7a:	e7dd      	b.n	8008d38 <_fflush_r+0xc>

08008d7c <memmove>:
 8008d7c:	4288      	cmp	r0, r1
 8008d7e:	b510      	push	{r4, lr}
 8008d80:	eb01 0402 	add.w	r4, r1, r2
 8008d84:	d902      	bls.n	8008d8c <memmove+0x10>
 8008d86:	4284      	cmp	r4, r0
 8008d88:	4623      	mov	r3, r4
 8008d8a:	d807      	bhi.n	8008d9c <memmove+0x20>
 8008d8c:	1e43      	subs	r3, r0, #1
 8008d8e:	42a1      	cmp	r1, r4
 8008d90:	d008      	beq.n	8008da4 <memmove+0x28>
 8008d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d9a:	e7f8      	b.n	8008d8e <memmove+0x12>
 8008d9c:	4402      	add	r2, r0
 8008d9e:	4601      	mov	r1, r0
 8008da0:	428a      	cmp	r2, r1
 8008da2:	d100      	bne.n	8008da6 <memmove+0x2a>
 8008da4:	bd10      	pop	{r4, pc}
 8008da6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008daa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dae:	e7f7      	b.n	8008da0 <memmove+0x24>

08008db0 <strncmp>:
 8008db0:	b510      	push	{r4, lr}
 8008db2:	b16a      	cbz	r2, 8008dd0 <strncmp+0x20>
 8008db4:	3901      	subs	r1, #1
 8008db6:	1884      	adds	r4, r0, r2
 8008db8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dbc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d103      	bne.n	8008dcc <strncmp+0x1c>
 8008dc4:	42a0      	cmp	r0, r4
 8008dc6:	d001      	beq.n	8008dcc <strncmp+0x1c>
 8008dc8:	2a00      	cmp	r2, #0
 8008dca:	d1f5      	bne.n	8008db8 <strncmp+0x8>
 8008dcc:	1ad0      	subs	r0, r2, r3
 8008dce:	bd10      	pop	{r4, pc}
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	e7fc      	b.n	8008dce <strncmp+0x1e>

08008dd4 <_sbrk_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	4d06      	ldr	r5, [pc, #24]	@ (8008df0 <_sbrk_r+0x1c>)
 8008dd8:	2300      	movs	r3, #0
 8008dda:	4604      	mov	r4, r0
 8008ddc:	4608      	mov	r0, r1
 8008dde:	602b      	str	r3, [r5, #0]
 8008de0:	f7f9 fa60 	bl	80022a4 <_sbrk>
 8008de4:	1c43      	adds	r3, r0, #1
 8008de6:	d102      	bne.n	8008dee <_sbrk_r+0x1a>
 8008de8:	682b      	ldr	r3, [r5, #0]
 8008dea:	b103      	cbz	r3, 8008dee <_sbrk_r+0x1a>
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	bd38      	pop	{r3, r4, r5, pc}
 8008df0:	200004e4 	.word	0x200004e4

08008df4 <memcpy>:
 8008df4:	440a      	add	r2, r1
 8008df6:	4291      	cmp	r1, r2
 8008df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dfc:	d100      	bne.n	8008e00 <memcpy+0xc>
 8008dfe:	4770      	bx	lr
 8008e00:	b510      	push	{r4, lr}
 8008e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e0a:	4291      	cmp	r1, r2
 8008e0c:	d1f9      	bne.n	8008e02 <memcpy+0xe>
 8008e0e:	bd10      	pop	{r4, pc}

08008e10 <nan>:
 8008e10:	4901      	ldr	r1, [pc, #4]	@ (8008e18 <nan+0x8>)
 8008e12:	2000      	movs	r0, #0
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	7ff80000 	.word	0x7ff80000

08008e1c <__assert_func>:
 8008e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e1e:	4614      	mov	r4, r2
 8008e20:	461a      	mov	r2, r3
 8008e22:	4b09      	ldr	r3, [pc, #36]	@ (8008e48 <__assert_func+0x2c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4605      	mov	r5, r0
 8008e28:	68d8      	ldr	r0, [r3, #12]
 8008e2a:	b14c      	cbz	r4, 8008e40 <__assert_func+0x24>
 8008e2c:	4b07      	ldr	r3, [pc, #28]	@ (8008e4c <__assert_func+0x30>)
 8008e2e:	9100      	str	r1, [sp, #0]
 8008e30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e34:	4906      	ldr	r1, [pc, #24]	@ (8008e50 <__assert_func+0x34>)
 8008e36:	462b      	mov	r3, r5
 8008e38:	f000 fba8 	bl	800958c <fiprintf>
 8008e3c:	f000 fbb8 	bl	80095b0 <abort>
 8008e40:	4b04      	ldr	r3, [pc, #16]	@ (8008e54 <__assert_func+0x38>)
 8008e42:	461c      	mov	r4, r3
 8008e44:	e7f3      	b.n	8008e2e <__assert_func+0x12>
 8008e46:	bf00      	nop
 8008e48:	20000018 	.word	0x20000018
 8008e4c:	08009df6 	.word	0x08009df6
 8008e50:	08009e03 	.word	0x08009e03
 8008e54:	08009e31 	.word	0x08009e31

08008e58 <_calloc_r>:
 8008e58:	b570      	push	{r4, r5, r6, lr}
 8008e5a:	fba1 5402 	umull	r5, r4, r1, r2
 8008e5e:	b934      	cbnz	r4, 8008e6e <_calloc_r+0x16>
 8008e60:	4629      	mov	r1, r5
 8008e62:	f7fe f9dd 	bl	8007220 <_malloc_r>
 8008e66:	4606      	mov	r6, r0
 8008e68:	b928      	cbnz	r0, 8008e76 <_calloc_r+0x1e>
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	bd70      	pop	{r4, r5, r6, pc}
 8008e6e:	220c      	movs	r2, #12
 8008e70:	6002      	str	r2, [r0, #0]
 8008e72:	2600      	movs	r6, #0
 8008e74:	e7f9      	b.n	8008e6a <_calloc_r+0x12>
 8008e76:	462a      	mov	r2, r5
 8008e78:	4621      	mov	r1, r4
 8008e7a:	f7fd fa7e 	bl	800637a <memset>
 8008e7e:	e7f4      	b.n	8008e6a <_calloc_r+0x12>

08008e80 <rshift>:
 8008e80:	6903      	ldr	r3, [r0, #16]
 8008e82:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008e86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e8a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e8e:	f100 0414 	add.w	r4, r0, #20
 8008e92:	dd45      	ble.n	8008f20 <rshift+0xa0>
 8008e94:	f011 011f 	ands.w	r1, r1, #31
 8008e98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008e9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008ea0:	d10c      	bne.n	8008ebc <rshift+0x3c>
 8008ea2:	f100 0710 	add.w	r7, r0, #16
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	42b1      	cmp	r1, r6
 8008eaa:	d334      	bcc.n	8008f16 <rshift+0x96>
 8008eac:	1a9b      	subs	r3, r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	1eea      	subs	r2, r5, #3
 8008eb2:	4296      	cmp	r6, r2
 8008eb4:	bf38      	it	cc
 8008eb6:	2300      	movcc	r3, #0
 8008eb8:	4423      	add	r3, r4
 8008eba:	e015      	b.n	8008ee8 <rshift+0x68>
 8008ebc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ec0:	f1c1 0820 	rsb	r8, r1, #32
 8008ec4:	40cf      	lsrs	r7, r1
 8008ec6:	f105 0e04 	add.w	lr, r5, #4
 8008eca:	46a1      	mov	r9, r4
 8008ecc:	4576      	cmp	r6, lr
 8008ece:	46f4      	mov	ip, lr
 8008ed0:	d815      	bhi.n	8008efe <rshift+0x7e>
 8008ed2:	1a9a      	subs	r2, r3, r2
 8008ed4:	0092      	lsls	r2, r2, #2
 8008ed6:	3a04      	subs	r2, #4
 8008ed8:	3501      	adds	r5, #1
 8008eda:	42ae      	cmp	r6, r5
 8008edc:	bf38      	it	cc
 8008ede:	2200      	movcc	r2, #0
 8008ee0:	18a3      	adds	r3, r4, r2
 8008ee2:	50a7      	str	r7, [r4, r2]
 8008ee4:	b107      	cbz	r7, 8008ee8 <rshift+0x68>
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	1b1a      	subs	r2, r3, r4
 8008eea:	42a3      	cmp	r3, r4
 8008eec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ef0:	bf08      	it	eq
 8008ef2:	2300      	moveq	r3, #0
 8008ef4:	6102      	str	r2, [r0, #16]
 8008ef6:	bf08      	it	eq
 8008ef8:	6143      	streq	r3, [r0, #20]
 8008efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008efe:	f8dc c000 	ldr.w	ip, [ip]
 8008f02:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f06:	ea4c 0707 	orr.w	r7, ip, r7
 8008f0a:	f849 7b04 	str.w	r7, [r9], #4
 8008f0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f12:	40cf      	lsrs	r7, r1
 8008f14:	e7da      	b.n	8008ecc <rshift+0x4c>
 8008f16:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f1a:	f847 cf04 	str.w	ip, [r7, #4]!
 8008f1e:	e7c3      	b.n	8008ea8 <rshift+0x28>
 8008f20:	4623      	mov	r3, r4
 8008f22:	e7e1      	b.n	8008ee8 <rshift+0x68>

08008f24 <__hexdig_fun>:
 8008f24:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008f28:	2b09      	cmp	r3, #9
 8008f2a:	d802      	bhi.n	8008f32 <__hexdig_fun+0xe>
 8008f2c:	3820      	subs	r0, #32
 8008f2e:	b2c0      	uxtb	r0, r0
 8008f30:	4770      	bx	lr
 8008f32:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008f36:	2b05      	cmp	r3, #5
 8008f38:	d801      	bhi.n	8008f3e <__hexdig_fun+0x1a>
 8008f3a:	3847      	subs	r0, #71	@ 0x47
 8008f3c:	e7f7      	b.n	8008f2e <__hexdig_fun+0xa>
 8008f3e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008f42:	2b05      	cmp	r3, #5
 8008f44:	d801      	bhi.n	8008f4a <__hexdig_fun+0x26>
 8008f46:	3827      	subs	r0, #39	@ 0x27
 8008f48:	e7f1      	b.n	8008f2e <__hexdig_fun+0xa>
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	4770      	bx	lr
	...

08008f50 <__gethex>:
 8008f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f54:	b085      	sub	sp, #20
 8008f56:	468a      	mov	sl, r1
 8008f58:	9302      	str	r3, [sp, #8]
 8008f5a:	680b      	ldr	r3, [r1, #0]
 8008f5c:	9001      	str	r0, [sp, #4]
 8008f5e:	4690      	mov	r8, r2
 8008f60:	1c9c      	adds	r4, r3, #2
 8008f62:	46a1      	mov	r9, r4
 8008f64:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008f68:	2830      	cmp	r0, #48	@ 0x30
 8008f6a:	d0fa      	beq.n	8008f62 <__gethex+0x12>
 8008f6c:	eba9 0303 	sub.w	r3, r9, r3
 8008f70:	f1a3 0b02 	sub.w	fp, r3, #2
 8008f74:	f7ff ffd6 	bl	8008f24 <__hexdig_fun>
 8008f78:	4605      	mov	r5, r0
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d168      	bne.n	8009050 <__gethex+0x100>
 8008f7e:	49a0      	ldr	r1, [pc, #640]	@ (8009200 <__gethex+0x2b0>)
 8008f80:	2201      	movs	r2, #1
 8008f82:	4648      	mov	r0, r9
 8008f84:	f7ff ff14 	bl	8008db0 <strncmp>
 8008f88:	4607      	mov	r7, r0
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d167      	bne.n	800905e <__gethex+0x10e>
 8008f8e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008f92:	4626      	mov	r6, r4
 8008f94:	f7ff ffc6 	bl	8008f24 <__hexdig_fun>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d062      	beq.n	8009062 <__gethex+0x112>
 8008f9c:	4623      	mov	r3, r4
 8008f9e:	7818      	ldrb	r0, [r3, #0]
 8008fa0:	2830      	cmp	r0, #48	@ 0x30
 8008fa2:	4699      	mov	r9, r3
 8008fa4:	f103 0301 	add.w	r3, r3, #1
 8008fa8:	d0f9      	beq.n	8008f9e <__gethex+0x4e>
 8008faa:	f7ff ffbb 	bl	8008f24 <__hexdig_fun>
 8008fae:	fab0 f580 	clz	r5, r0
 8008fb2:	096d      	lsrs	r5, r5, #5
 8008fb4:	f04f 0b01 	mov.w	fp, #1
 8008fb8:	464a      	mov	r2, r9
 8008fba:	4616      	mov	r6, r2
 8008fbc:	3201      	adds	r2, #1
 8008fbe:	7830      	ldrb	r0, [r6, #0]
 8008fc0:	f7ff ffb0 	bl	8008f24 <__hexdig_fun>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d1f8      	bne.n	8008fba <__gethex+0x6a>
 8008fc8:	498d      	ldr	r1, [pc, #564]	@ (8009200 <__gethex+0x2b0>)
 8008fca:	2201      	movs	r2, #1
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f7ff feef 	bl	8008db0 <strncmp>
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	d13f      	bne.n	8009056 <__gethex+0x106>
 8008fd6:	b944      	cbnz	r4, 8008fea <__gethex+0x9a>
 8008fd8:	1c74      	adds	r4, r6, #1
 8008fda:	4622      	mov	r2, r4
 8008fdc:	4616      	mov	r6, r2
 8008fde:	3201      	adds	r2, #1
 8008fe0:	7830      	ldrb	r0, [r6, #0]
 8008fe2:	f7ff ff9f 	bl	8008f24 <__hexdig_fun>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d1f8      	bne.n	8008fdc <__gethex+0x8c>
 8008fea:	1ba4      	subs	r4, r4, r6
 8008fec:	00a7      	lsls	r7, r4, #2
 8008fee:	7833      	ldrb	r3, [r6, #0]
 8008ff0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008ff4:	2b50      	cmp	r3, #80	@ 0x50
 8008ff6:	d13e      	bne.n	8009076 <__gethex+0x126>
 8008ff8:	7873      	ldrb	r3, [r6, #1]
 8008ffa:	2b2b      	cmp	r3, #43	@ 0x2b
 8008ffc:	d033      	beq.n	8009066 <__gethex+0x116>
 8008ffe:	2b2d      	cmp	r3, #45	@ 0x2d
 8009000:	d034      	beq.n	800906c <__gethex+0x11c>
 8009002:	1c71      	adds	r1, r6, #1
 8009004:	2400      	movs	r4, #0
 8009006:	7808      	ldrb	r0, [r1, #0]
 8009008:	f7ff ff8c 	bl	8008f24 <__hexdig_fun>
 800900c:	1e43      	subs	r3, r0, #1
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b18      	cmp	r3, #24
 8009012:	d830      	bhi.n	8009076 <__gethex+0x126>
 8009014:	f1a0 0210 	sub.w	r2, r0, #16
 8009018:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800901c:	f7ff ff82 	bl	8008f24 <__hexdig_fun>
 8009020:	f100 3cff 	add.w	ip, r0, #4294967295
 8009024:	fa5f fc8c 	uxtb.w	ip, ip
 8009028:	f1bc 0f18 	cmp.w	ip, #24
 800902c:	f04f 030a 	mov.w	r3, #10
 8009030:	d91e      	bls.n	8009070 <__gethex+0x120>
 8009032:	b104      	cbz	r4, 8009036 <__gethex+0xe6>
 8009034:	4252      	negs	r2, r2
 8009036:	4417      	add	r7, r2
 8009038:	f8ca 1000 	str.w	r1, [sl]
 800903c:	b1ed      	cbz	r5, 800907a <__gethex+0x12a>
 800903e:	f1bb 0f00 	cmp.w	fp, #0
 8009042:	bf0c      	ite	eq
 8009044:	2506      	moveq	r5, #6
 8009046:	2500      	movne	r5, #0
 8009048:	4628      	mov	r0, r5
 800904a:	b005      	add	sp, #20
 800904c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009050:	2500      	movs	r5, #0
 8009052:	462c      	mov	r4, r5
 8009054:	e7b0      	b.n	8008fb8 <__gethex+0x68>
 8009056:	2c00      	cmp	r4, #0
 8009058:	d1c7      	bne.n	8008fea <__gethex+0x9a>
 800905a:	4627      	mov	r7, r4
 800905c:	e7c7      	b.n	8008fee <__gethex+0x9e>
 800905e:	464e      	mov	r6, r9
 8009060:	462f      	mov	r7, r5
 8009062:	2501      	movs	r5, #1
 8009064:	e7c3      	b.n	8008fee <__gethex+0x9e>
 8009066:	2400      	movs	r4, #0
 8009068:	1cb1      	adds	r1, r6, #2
 800906a:	e7cc      	b.n	8009006 <__gethex+0xb6>
 800906c:	2401      	movs	r4, #1
 800906e:	e7fb      	b.n	8009068 <__gethex+0x118>
 8009070:	fb03 0002 	mla	r0, r3, r2, r0
 8009074:	e7ce      	b.n	8009014 <__gethex+0xc4>
 8009076:	4631      	mov	r1, r6
 8009078:	e7de      	b.n	8009038 <__gethex+0xe8>
 800907a:	eba6 0309 	sub.w	r3, r6, r9
 800907e:	3b01      	subs	r3, #1
 8009080:	4629      	mov	r1, r5
 8009082:	2b07      	cmp	r3, #7
 8009084:	dc0a      	bgt.n	800909c <__gethex+0x14c>
 8009086:	9801      	ldr	r0, [sp, #4]
 8009088:	f7fe f956 	bl	8007338 <_Balloc>
 800908c:	4604      	mov	r4, r0
 800908e:	b940      	cbnz	r0, 80090a2 <__gethex+0x152>
 8009090:	4b5c      	ldr	r3, [pc, #368]	@ (8009204 <__gethex+0x2b4>)
 8009092:	4602      	mov	r2, r0
 8009094:	21e4      	movs	r1, #228	@ 0xe4
 8009096:	485c      	ldr	r0, [pc, #368]	@ (8009208 <__gethex+0x2b8>)
 8009098:	f7ff fec0 	bl	8008e1c <__assert_func>
 800909c:	3101      	adds	r1, #1
 800909e:	105b      	asrs	r3, r3, #1
 80090a0:	e7ef      	b.n	8009082 <__gethex+0x132>
 80090a2:	f100 0a14 	add.w	sl, r0, #20
 80090a6:	2300      	movs	r3, #0
 80090a8:	4655      	mov	r5, sl
 80090aa:	469b      	mov	fp, r3
 80090ac:	45b1      	cmp	r9, r6
 80090ae:	d337      	bcc.n	8009120 <__gethex+0x1d0>
 80090b0:	f845 bb04 	str.w	fp, [r5], #4
 80090b4:	eba5 050a 	sub.w	r5, r5, sl
 80090b8:	10ad      	asrs	r5, r5, #2
 80090ba:	6125      	str	r5, [r4, #16]
 80090bc:	4658      	mov	r0, fp
 80090be:	f7fe fa2d 	bl	800751c <__hi0bits>
 80090c2:	016d      	lsls	r5, r5, #5
 80090c4:	f8d8 6000 	ldr.w	r6, [r8]
 80090c8:	1a2d      	subs	r5, r5, r0
 80090ca:	42b5      	cmp	r5, r6
 80090cc:	dd54      	ble.n	8009178 <__gethex+0x228>
 80090ce:	1bad      	subs	r5, r5, r6
 80090d0:	4629      	mov	r1, r5
 80090d2:	4620      	mov	r0, r4
 80090d4:	f7fe fdb1 	bl	8007c3a <__any_on>
 80090d8:	4681      	mov	r9, r0
 80090da:	b178      	cbz	r0, 80090fc <__gethex+0x1ac>
 80090dc:	1e6b      	subs	r3, r5, #1
 80090de:	1159      	asrs	r1, r3, #5
 80090e0:	f003 021f 	and.w	r2, r3, #31
 80090e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80090e8:	f04f 0901 	mov.w	r9, #1
 80090ec:	fa09 f202 	lsl.w	r2, r9, r2
 80090f0:	420a      	tst	r2, r1
 80090f2:	d003      	beq.n	80090fc <__gethex+0x1ac>
 80090f4:	454b      	cmp	r3, r9
 80090f6:	dc36      	bgt.n	8009166 <__gethex+0x216>
 80090f8:	f04f 0902 	mov.w	r9, #2
 80090fc:	4629      	mov	r1, r5
 80090fe:	4620      	mov	r0, r4
 8009100:	f7ff febe 	bl	8008e80 <rshift>
 8009104:	442f      	add	r7, r5
 8009106:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800910a:	42bb      	cmp	r3, r7
 800910c:	da42      	bge.n	8009194 <__gethex+0x244>
 800910e:	9801      	ldr	r0, [sp, #4]
 8009110:	4621      	mov	r1, r4
 8009112:	f7fe f951 	bl	80073b8 <_Bfree>
 8009116:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009118:	2300      	movs	r3, #0
 800911a:	6013      	str	r3, [r2, #0]
 800911c:	25a3      	movs	r5, #163	@ 0xa3
 800911e:	e793      	b.n	8009048 <__gethex+0xf8>
 8009120:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009124:	2a2e      	cmp	r2, #46	@ 0x2e
 8009126:	d012      	beq.n	800914e <__gethex+0x1fe>
 8009128:	2b20      	cmp	r3, #32
 800912a:	d104      	bne.n	8009136 <__gethex+0x1e6>
 800912c:	f845 bb04 	str.w	fp, [r5], #4
 8009130:	f04f 0b00 	mov.w	fp, #0
 8009134:	465b      	mov	r3, fp
 8009136:	7830      	ldrb	r0, [r6, #0]
 8009138:	9303      	str	r3, [sp, #12]
 800913a:	f7ff fef3 	bl	8008f24 <__hexdig_fun>
 800913e:	9b03      	ldr	r3, [sp, #12]
 8009140:	f000 000f 	and.w	r0, r0, #15
 8009144:	4098      	lsls	r0, r3
 8009146:	ea4b 0b00 	orr.w	fp, fp, r0
 800914a:	3304      	adds	r3, #4
 800914c:	e7ae      	b.n	80090ac <__gethex+0x15c>
 800914e:	45b1      	cmp	r9, r6
 8009150:	d8ea      	bhi.n	8009128 <__gethex+0x1d8>
 8009152:	492b      	ldr	r1, [pc, #172]	@ (8009200 <__gethex+0x2b0>)
 8009154:	9303      	str	r3, [sp, #12]
 8009156:	2201      	movs	r2, #1
 8009158:	4630      	mov	r0, r6
 800915a:	f7ff fe29 	bl	8008db0 <strncmp>
 800915e:	9b03      	ldr	r3, [sp, #12]
 8009160:	2800      	cmp	r0, #0
 8009162:	d1e1      	bne.n	8009128 <__gethex+0x1d8>
 8009164:	e7a2      	b.n	80090ac <__gethex+0x15c>
 8009166:	1ea9      	subs	r1, r5, #2
 8009168:	4620      	mov	r0, r4
 800916a:	f7fe fd66 	bl	8007c3a <__any_on>
 800916e:	2800      	cmp	r0, #0
 8009170:	d0c2      	beq.n	80090f8 <__gethex+0x1a8>
 8009172:	f04f 0903 	mov.w	r9, #3
 8009176:	e7c1      	b.n	80090fc <__gethex+0x1ac>
 8009178:	da09      	bge.n	800918e <__gethex+0x23e>
 800917a:	1b75      	subs	r5, r6, r5
 800917c:	4621      	mov	r1, r4
 800917e:	9801      	ldr	r0, [sp, #4]
 8009180:	462a      	mov	r2, r5
 8009182:	f7fe fb29 	bl	80077d8 <__lshift>
 8009186:	1b7f      	subs	r7, r7, r5
 8009188:	4604      	mov	r4, r0
 800918a:	f100 0a14 	add.w	sl, r0, #20
 800918e:	f04f 0900 	mov.w	r9, #0
 8009192:	e7b8      	b.n	8009106 <__gethex+0x1b6>
 8009194:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009198:	42bd      	cmp	r5, r7
 800919a:	dd6f      	ble.n	800927c <__gethex+0x32c>
 800919c:	1bed      	subs	r5, r5, r7
 800919e:	42ae      	cmp	r6, r5
 80091a0:	dc34      	bgt.n	800920c <__gethex+0x2bc>
 80091a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d022      	beq.n	80091f0 <__gethex+0x2a0>
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d024      	beq.n	80091f8 <__gethex+0x2a8>
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d115      	bne.n	80091de <__gethex+0x28e>
 80091b2:	42ae      	cmp	r6, r5
 80091b4:	d113      	bne.n	80091de <__gethex+0x28e>
 80091b6:	2e01      	cmp	r6, #1
 80091b8:	d10b      	bne.n	80091d2 <__gethex+0x282>
 80091ba:	9a02      	ldr	r2, [sp, #8]
 80091bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	2301      	movs	r3, #1
 80091c4:	6123      	str	r3, [r4, #16]
 80091c6:	f8ca 3000 	str.w	r3, [sl]
 80091ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091cc:	2562      	movs	r5, #98	@ 0x62
 80091ce:	601c      	str	r4, [r3, #0]
 80091d0:	e73a      	b.n	8009048 <__gethex+0xf8>
 80091d2:	1e71      	subs	r1, r6, #1
 80091d4:	4620      	mov	r0, r4
 80091d6:	f7fe fd30 	bl	8007c3a <__any_on>
 80091da:	2800      	cmp	r0, #0
 80091dc:	d1ed      	bne.n	80091ba <__gethex+0x26a>
 80091de:	9801      	ldr	r0, [sp, #4]
 80091e0:	4621      	mov	r1, r4
 80091e2:	f7fe f8e9 	bl	80073b8 <_Bfree>
 80091e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091e8:	2300      	movs	r3, #0
 80091ea:	6013      	str	r3, [r2, #0]
 80091ec:	2550      	movs	r5, #80	@ 0x50
 80091ee:	e72b      	b.n	8009048 <__gethex+0xf8>
 80091f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1f3      	bne.n	80091de <__gethex+0x28e>
 80091f6:	e7e0      	b.n	80091ba <__gethex+0x26a>
 80091f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1dd      	bne.n	80091ba <__gethex+0x26a>
 80091fe:	e7ee      	b.n	80091de <__gethex+0x28e>
 8009200:	08009ddb 	.word	0x08009ddb
 8009204:	08009d71 	.word	0x08009d71
 8009208:	08009e32 	.word	0x08009e32
 800920c:	1e6f      	subs	r7, r5, #1
 800920e:	f1b9 0f00 	cmp.w	r9, #0
 8009212:	d130      	bne.n	8009276 <__gethex+0x326>
 8009214:	b127      	cbz	r7, 8009220 <__gethex+0x2d0>
 8009216:	4639      	mov	r1, r7
 8009218:	4620      	mov	r0, r4
 800921a:	f7fe fd0e 	bl	8007c3a <__any_on>
 800921e:	4681      	mov	r9, r0
 8009220:	117a      	asrs	r2, r7, #5
 8009222:	2301      	movs	r3, #1
 8009224:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009228:	f007 071f 	and.w	r7, r7, #31
 800922c:	40bb      	lsls	r3, r7
 800922e:	4213      	tst	r3, r2
 8009230:	4629      	mov	r1, r5
 8009232:	4620      	mov	r0, r4
 8009234:	bf18      	it	ne
 8009236:	f049 0902 	orrne.w	r9, r9, #2
 800923a:	f7ff fe21 	bl	8008e80 <rshift>
 800923e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009242:	1b76      	subs	r6, r6, r5
 8009244:	2502      	movs	r5, #2
 8009246:	f1b9 0f00 	cmp.w	r9, #0
 800924a:	d047      	beq.n	80092dc <__gethex+0x38c>
 800924c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009250:	2b02      	cmp	r3, #2
 8009252:	d015      	beq.n	8009280 <__gethex+0x330>
 8009254:	2b03      	cmp	r3, #3
 8009256:	d017      	beq.n	8009288 <__gethex+0x338>
 8009258:	2b01      	cmp	r3, #1
 800925a:	d109      	bne.n	8009270 <__gethex+0x320>
 800925c:	f019 0f02 	tst.w	r9, #2
 8009260:	d006      	beq.n	8009270 <__gethex+0x320>
 8009262:	f8da 3000 	ldr.w	r3, [sl]
 8009266:	ea49 0903 	orr.w	r9, r9, r3
 800926a:	f019 0f01 	tst.w	r9, #1
 800926e:	d10e      	bne.n	800928e <__gethex+0x33e>
 8009270:	f045 0510 	orr.w	r5, r5, #16
 8009274:	e032      	b.n	80092dc <__gethex+0x38c>
 8009276:	f04f 0901 	mov.w	r9, #1
 800927a:	e7d1      	b.n	8009220 <__gethex+0x2d0>
 800927c:	2501      	movs	r5, #1
 800927e:	e7e2      	b.n	8009246 <__gethex+0x2f6>
 8009280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009282:	f1c3 0301 	rsb	r3, r3, #1
 8009286:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800928a:	2b00      	cmp	r3, #0
 800928c:	d0f0      	beq.n	8009270 <__gethex+0x320>
 800928e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009292:	f104 0314 	add.w	r3, r4, #20
 8009296:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800929a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800929e:	f04f 0c00 	mov.w	ip, #0
 80092a2:	4618      	mov	r0, r3
 80092a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80092a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80092ac:	d01b      	beq.n	80092e6 <__gethex+0x396>
 80092ae:	3201      	adds	r2, #1
 80092b0:	6002      	str	r2, [r0, #0]
 80092b2:	2d02      	cmp	r5, #2
 80092b4:	f104 0314 	add.w	r3, r4, #20
 80092b8:	d13c      	bne.n	8009334 <__gethex+0x3e4>
 80092ba:	f8d8 2000 	ldr.w	r2, [r8]
 80092be:	3a01      	subs	r2, #1
 80092c0:	42b2      	cmp	r2, r6
 80092c2:	d109      	bne.n	80092d8 <__gethex+0x388>
 80092c4:	1171      	asrs	r1, r6, #5
 80092c6:	2201      	movs	r2, #1
 80092c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092cc:	f006 061f 	and.w	r6, r6, #31
 80092d0:	fa02 f606 	lsl.w	r6, r2, r6
 80092d4:	421e      	tst	r6, r3
 80092d6:	d13a      	bne.n	800934e <__gethex+0x3fe>
 80092d8:	f045 0520 	orr.w	r5, r5, #32
 80092dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092de:	601c      	str	r4, [r3, #0]
 80092e0:	9b02      	ldr	r3, [sp, #8]
 80092e2:	601f      	str	r7, [r3, #0]
 80092e4:	e6b0      	b.n	8009048 <__gethex+0xf8>
 80092e6:	4299      	cmp	r1, r3
 80092e8:	f843 cc04 	str.w	ip, [r3, #-4]
 80092ec:	d8d9      	bhi.n	80092a2 <__gethex+0x352>
 80092ee:	68a3      	ldr	r3, [r4, #8]
 80092f0:	459b      	cmp	fp, r3
 80092f2:	db17      	blt.n	8009324 <__gethex+0x3d4>
 80092f4:	6861      	ldr	r1, [r4, #4]
 80092f6:	9801      	ldr	r0, [sp, #4]
 80092f8:	3101      	adds	r1, #1
 80092fa:	f7fe f81d 	bl	8007338 <_Balloc>
 80092fe:	4681      	mov	r9, r0
 8009300:	b918      	cbnz	r0, 800930a <__gethex+0x3ba>
 8009302:	4b1a      	ldr	r3, [pc, #104]	@ (800936c <__gethex+0x41c>)
 8009304:	4602      	mov	r2, r0
 8009306:	2184      	movs	r1, #132	@ 0x84
 8009308:	e6c5      	b.n	8009096 <__gethex+0x146>
 800930a:	6922      	ldr	r2, [r4, #16]
 800930c:	3202      	adds	r2, #2
 800930e:	f104 010c 	add.w	r1, r4, #12
 8009312:	0092      	lsls	r2, r2, #2
 8009314:	300c      	adds	r0, #12
 8009316:	f7ff fd6d 	bl	8008df4 <memcpy>
 800931a:	4621      	mov	r1, r4
 800931c:	9801      	ldr	r0, [sp, #4]
 800931e:	f7fe f84b 	bl	80073b8 <_Bfree>
 8009322:	464c      	mov	r4, r9
 8009324:	6923      	ldr	r3, [r4, #16]
 8009326:	1c5a      	adds	r2, r3, #1
 8009328:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800932c:	6122      	str	r2, [r4, #16]
 800932e:	2201      	movs	r2, #1
 8009330:	615a      	str	r2, [r3, #20]
 8009332:	e7be      	b.n	80092b2 <__gethex+0x362>
 8009334:	6922      	ldr	r2, [r4, #16]
 8009336:	455a      	cmp	r2, fp
 8009338:	dd0b      	ble.n	8009352 <__gethex+0x402>
 800933a:	2101      	movs	r1, #1
 800933c:	4620      	mov	r0, r4
 800933e:	f7ff fd9f 	bl	8008e80 <rshift>
 8009342:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009346:	3701      	adds	r7, #1
 8009348:	42bb      	cmp	r3, r7
 800934a:	f6ff aee0 	blt.w	800910e <__gethex+0x1be>
 800934e:	2501      	movs	r5, #1
 8009350:	e7c2      	b.n	80092d8 <__gethex+0x388>
 8009352:	f016 061f 	ands.w	r6, r6, #31
 8009356:	d0fa      	beq.n	800934e <__gethex+0x3fe>
 8009358:	4453      	add	r3, sl
 800935a:	f1c6 0620 	rsb	r6, r6, #32
 800935e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009362:	f7fe f8db 	bl	800751c <__hi0bits>
 8009366:	42b0      	cmp	r0, r6
 8009368:	dbe7      	blt.n	800933a <__gethex+0x3ea>
 800936a:	e7f0      	b.n	800934e <__gethex+0x3fe>
 800936c:	08009d71 	.word	0x08009d71

08009370 <L_shift>:
 8009370:	f1c2 0208 	rsb	r2, r2, #8
 8009374:	0092      	lsls	r2, r2, #2
 8009376:	b570      	push	{r4, r5, r6, lr}
 8009378:	f1c2 0620 	rsb	r6, r2, #32
 800937c:	6843      	ldr	r3, [r0, #4]
 800937e:	6804      	ldr	r4, [r0, #0]
 8009380:	fa03 f506 	lsl.w	r5, r3, r6
 8009384:	432c      	orrs	r4, r5
 8009386:	40d3      	lsrs	r3, r2
 8009388:	6004      	str	r4, [r0, #0]
 800938a:	f840 3f04 	str.w	r3, [r0, #4]!
 800938e:	4288      	cmp	r0, r1
 8009390:	d3f4      	bcc.n	800937c <L_shift+0xc>
 8009392:	bd70      	pop	{r4, r5, r6, pc}

08009394 <__match>:
 8009394:	b530      	push	{r4, r5, lr}
 8009396:	6803      	ldr	r3, [r0, #0]
 8009398:	3301      	adds	r3, #1
 800939a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800939e:	b914      	cbnz	r4, 80093a6 <__match+0x12>
 80093a0:	6003      	str	r3, [r0, #0]
 80093a2:	2001      	movs	r0, #1
 80093a4:	bd30      	pop	{r4, r5, pc}
 80093a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093aa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80093ae:	2d19      	cmp	r5, #25
 80093b0:	bf98      	it	ls
 80093b2:	3220      	addls	r2, #32
 80093b4:	42a2      	cmp	r2, r4
 80093b6:	d0f0      	beq.n	800939a <__match+0x6>
 80093b8:	2000      	movs	r0, #0
 80093ba:	e7f3      	b.n	80093a4 <__match+0x10>

080093bc <__hexnan>:
 80093bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c0:	680b      	ldr	r3, [r1, #0]
 80093c2:	6801      	ldr	r1, [r0, #0]
 80093c4:	115e      	asrs	r6, r3, #5
 80093c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80093ca:	f013 031f 	ands.w	r3, r3, #31
 80093ce:	b087      	sub	sp, #28
 80093d0:	bf18      	it	ne
 80093d2:	3604      	addne	r6, #4
 80093d4:	2500      	movs	r5, #0
 80093d6:	1f37      	subs	r7, r6, #4
 80093d8:	4682      	mov	sl, r0
 80093da:	4690      	mov	r8, r2
 80093dc:	9301      	str	r3, [sp, #4]
 80093de:	f846 5c04 	str.w	r5, [r6, #-4]
 80093e2:	46b9      	mov	r9, r7
 80093e4:	463c      	mov	r4, r7
 80093e6:	9502      	str	r5, [sp, #8]
 80093e8:	46ab      	mov	fp, r5
 80093ea:	784a      	ldrb	r2, [r1, #1]
 80093ec:	1c4b      	adds	r3, r1, #1
 80093ee:	9303      	str	r3, [sp, #12]
 80093f0:	b342      	cbz	r2, 8009444 <__hexnan+0x88>
 80093f2:	4610      	mov	r0, r2
 80093f4:	9105      	str	r1, [sp, #20]
 80093f6:	9204      	str	r2, [sp, #16]
 80093f8:	f7ff fd94 	bl	8008f24 <__hexdig_fun>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d151      	bne.n	80094a4 <__hexnan+0xe8>
 8009400:	9a04      	ldr	r2, [sp, #16]
 8009402:	9905      	ldr	r1, [sp, #20]
 8009404:	2a20      	cmp	r2, #32
 8009406:	d818      	bhi.n	800943a <__hexnan+0x7e>
 8009408:	9b02      	ldr	r3, [sp, #8]
 800940a:	459b      	cmp	fp, r3
 800940c:	dd13      	ble.n	8009436 <__hexnan+0x7a>
 800940e:	454c      	cmp	r4, r9
 8009410:	d206      	bcs.n	8009420 <__hexnan+0x64>
 8009412:	2d07      	cmp	r5, #7
 8009414:	dc04      	bgt.n	8009420 <__hexnan+0x64>
 8009416:	462a      	mov	r2, r5
 8009418:	4649      	mov	r1, r9
 800941a:	4620      	mov	r0, r4
 800941c:	f7ff ffa8 	bl	8009370 <L_shift>
 8009420:	4544      	cmp	r4, r8
 8009422:	d952      	bls.n	80094ca <__hexnan+0x10e>
 8009424:	2300      	movs	r3, #0
 8009426:	f1a4 0904 	sub.w	r9, r4, #4
 800942a:	f844 3c04 	str.w	r3, [r4, #-4]
 800942e:	f8cd b008 	str.w	fp, [sp, #8]
 8009432:	464c      	mov	r4, r9
 8009434:	461d      	mov	r5, r3
 8009436:	9903      	ldr	r1, [sp, #12]
 8009438:	e7d7      	b.n	80093ea <__hexnan+0x2e>
 800943a:	2a29      	cmp	r2, #41	@ 0x29
 800943c:	d157      	bne.n	80094ee <__hexnan+0x132>
 800943e:	3102      	adds	r1, #2
 8009440:	f8ca 1000 	str.w	r1, [sl]
 8009444:	f1bb 0f00 	cmp.w	fp, #0
 8009448:	d051      	beq.n	80094ee <__hexnan+0x132>
 800944a:	454c      	cmp	r4, r9
 800944c:	d206      	bcs.n	800945c <__hexnan+0xa0>
 800944e:	2d07      	cmp	r5, #7
 8009450:	dc04      	bgt.n	800945c <__hexnan+0xa0>
 8009452:	462a      	mov	r2, r5
 8009454:	4649      	mov	r1, r9
 8009456:	4620      	mov	r0, r4
 8009458:	f7ff ff8a 	bl	8009370 <L_shift>
 800945c:	4544      	cmp	r4, r8
 800945e:	d936      	bls.n	80094ce <__hexnan+0x112>
 8009460:	f1a8 0204 	sub.w	r2, r8, #4
 8009464:	4623      	mov	r3, r4
 8009466:	f853 1b04 	ldr.w	r1, [r3], #4
 800946a:	f842 1f04 	str.w	r1, [r2, #4]!
 800946e:	429f      	cmp	r7, r3
 8009470:	d2f9      	bcs.n	8009466 <__hexnan+0xaa>
 8009472:	1b3b      	subs	r3, r7, r4
 8009474:	f023 0303 	bic.w	r3, r3, #3
 8009478:	3304      	adds	r3, #4
 800947a:	3401      	adds	r4, #1
 800947c:	3e03      	subs	r6, #3
 800947e:	42b4      	cmp	r4, r6
 8009480:	bf88      	it	hi
 8009482:	2304      	movhi	r3, #4
 8009484:	4443      	add	r3, r8
 8009486:	2200      	movs	r2, #0
 8009488:	f843 2b04 	str.w	r2, [r3], #4
 800948c:	429f      	cmp	r7, r3
 800948e:	d2fb      	bcs.n	8009488 <__hexnan+0xcc>
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	b91b      	cbnz	r3, 800949c <__hexnan+0xe0>
 8009494:	4547      	cmp	r7, r8
 8009496:	d128      	bne.n	80094ea <__hexnan+0x12e>
 8009498:	2301      	movs	r3, #1
 800949a:	603b      	str	r3, [r7, #0]
 800949c:	2005      	movs	r0, #5
 800949e:	b007      	add	sp, #28
 80094a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a4:	3501      	adds	r5, #1
 80094a6:	2d08      	cmp	r5, #8
 80094a8:	f10b 0b01 	add.w	fp, fp, #1
 80094ac:	dd06      	ble.n	80094bc <__hexnan+0x100>
 80094ae:	4544      	cmp	r4, r8
 80094b0:	d9c1      	bls.n	8009436 <__hexnan+0x7a>
 80094b2:	2300      	movs	r3, #0
 80094b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80094b8:	2501      	movs	r5, #1
 80094ba:	3c04      	subs	r4, #4
 80094bc:	6822      	ldr	r2, [r4, #0]
 80094be:	f000 000f 	and.w	r0, r0, #15
 80094c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80094c6:	6020      	str	r0, [r4, #0]
 80094c8:	e7b5      	b.n	8009436 <__hexnan+0x7a>
 80094ca:	2508      	movs	r5, #8
 80094cc:	e7b3      	b.n	8009436 <__hexnan+0x7a>
 80094ce:	9b01      	ldr	r3, [sp, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d0dd      	beq.n	8009490 <__hexnan+0xd4>
 80094d4:	f1c3 0320 	rsb	r3, r3, #32
 80094d8:	f04f 32ff 	mov.w	r2, #4294967295
 80094dc:	40da      	lsrs	r2, r3
 80094de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80094e2:	4013      	ands	r3, r2
 80094e4:	f846 3c04 	str.w	r3, [r6, #-4]
 80094e8:	e7d2      	b.n	8009490 <__hexnan+0xd4>
 80094ea:	3f04      	subs	r7, #4
 80094ec:	e7d0      	b.n	8009490 <__hexnan+0xd4>
 80094ee:	2004      	movs	r0, #4
 80094f0:	e7d5      	b.n	800949e <__hexnan+0xe2>

080094f2 <__ascii_mbtowc>:
 80094f2:	b082      	sub	sp, #8
 80094f4:	b901      	cbnz	r1, 80094f8 <__ascii_mbtowc+0x6>
 80094f6:	a901      	add	r1, sp, #4
 80094f8:	b142      	cbz	r2, 800950c <__ascii_mbtowc+0x1a>
 80094fa:	b14b      	cbz	r3, 8009510 <__ascii_mbtowc+0x1e>
 80094fc:	7813      	ldrb	r3, [r2, #0]
 80094fe:	600b      	str	r3, [r1, #0]
 8009500:	7812      	ldrb	r2, [r2, #0]
 8009502:	1e10      	subs	r0, r2, #0
 8009504:	bf18      	it	ne
 8009506:	2001      	movne	r0, #1
 8009508:	b002      	add	sp, #8
 800950a:	4770      	bx	lr
 800950c:	4610      	mov	r0, r2
 800950e:	e7fb      	b.n	8009508 <__ascii_mbtowc+0x16>
 8009510:	f06f 0001 	mvn.w	r0, #1
 8009514:	e7f8      	b.n	8009508 <__ascii_mbtowc+0x16>

08009516 <_realloc_r>:
 8009516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800951a:	4607      	mov	r7, r0
 800951c:	4614      	mov	r4, r2
 800951e:	460d      	mov	r5, r1
 8009520:	b921      	cbnz	r1, 800952c <_realloc_r+0x16>
 8009522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009526:	4611      	mov	r1, r2
 8009528:	f7fd be7a 	b.w	8007220 <_malloc_r>
 800952c:	b92a      	cbnz	r2, 800953a <_realloc_r+0x24>
 800952e:	f7fd fe03 	bl	8007138 <_free_r>
 8009532:	4625      	mov	r5, r4
 8009534:	4628      	mov	r0, r5
 8009536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800953a:	f000 f840 	bl	80095be <_malloc_usable_size_r>
 800953e:	4284      	cmp	r4, r0
 8009540:	4606      	mov	r6, r0
 8009542:	d802      	bhi.n	800954a <_realloc_r+0x34>
 8009544:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009548:	d8f4      	bhi.n	8009534 <_realloc_r+0x1e>
 800954a:	4621      	mov	r1, r4
 800954c:	4638      	mov	r0, r7
 800954e:	f7fd fe67 	bl	8007220 <_malloc_r>
 8009552:	4680      	mov	r8, r0
 8009554:	b908      	cbnz	r0, 800955a <_realloc_r+0x44>
 8009556:	4645      	mov	r5, r8
 8009558:	e7ec      	b.n	8009534 <_realloc_r+0x1e>
 800955a:	42b4      	cmp	r4, r6
 800955c:	4622      	mov	r2, r4
 800955e:	4629      	mov	r1, r5
 8009560:	bf28      	it	cs
 8009562:	4632      	movcs	r2, r6
 8009564:	f7ff fc46 	bl	8008df4 <memcpy>
 8009568:	4629      	mov	r1, r5
 800956a:	4638      	mov	r0, r7
 800956c:	f7fd fde4 	bl	8007138 <_free_r>
 8009570:	e7f1      	b.n	8009556 <_realloc_r+0x40>

08009572 <__ascii_wctomb>:
 8009572:	4603      	mov	r3, r0
 8009574:	4608      	mov	r0, r1
 8009576:	b141      	cbz	r1, 800958a <__ascii_wctomb+0x18>
 8009578:	2aff      	cmp	r2, #255	@ 0xff
 800957a:	d904      	bls.n	8009586 <__ascii_wctomb+0x14>
 800957c:	228a      	movs	r2, #138	@ 0x8a
 800957e:	601a      	str	r2, [r3, #0]
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	4770      	bx	lr
 8009586:	700a      	strb	r2, [r1, #0]
 8009588:	2001      	movs	r0, #1
 800958a:	4770      	bx	lr

0800958c <fiprintf>:
 800958c:	b40e      	push	{r1, r2, r3}
 800958e:	b503      	push	{r0, r1, lr}
 8009590:	4601      	mov	r1, r0
 8009592:	ab03      	add	r3, sp, #12
 8009594:	4805      	ldr	r0, [pc, #20]	@ (80095ac <fiprintf+0x20>)
 8009596:	f853 2b04 	ldr.w	r2, [r3], #4
 800959a:	6800      	ldr	r0, [r0, #0]
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	f000 f83f 	bl	8009620 <_vfiprintf_r>
 80095a2:	b002      	add	sp, #8
 80095a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095a8:	b003      	add	sp, #12
 80095aa:	4770      	bx	lr
 80095ac:	20000018 	.word	0x20000018

080095b0 <abort>:
 80095b0:	b508      	push	{r3, lr}
 80095b2:	2006      	movs	r0, #6
 80095b4:	f000 fa08 	bl	80099c8 <raise>
 80095b8:	2001      	movs	r0, #1
 80095ba:	f7f8 fe17 	bl	80021ec <_exit>

080095be <_malloc_usable_size_r>:
 80095be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095c2:	1f18      	subs	r0, r3, #4
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	bfbc      	itt	lt
 80095c8:	580b      	ldrlt	r3, [r1, r0]
 80095ca:	18c0      	addlt	r0, r0, r3
 80095cc:	4770      	bx	lr

080095ce <__sfputc_r>:
 80095ce:	6893      	ldr	r3, [r2, #8]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	b410      	push	{r4}
 80095d6:	6093      	str	r3, [r2, #8]
 80095d8:	da08      	bge.n	80095ec <__sfputc_r+0x1e>
 80095da:	6994      	ldr	r4, [r2, #24]
 80095dc:	42a3      	cmp	r3, r4
 80095de:	db01      	blt.n	80095e4 <__sfputc_r+0x16>
 80095e0:	290a      	cmp	r1, #10
 80095e2:	d103      	bne.n	80095ec <__sfputc_r+0x1e>
 80095e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095e8:	f000 b932 	b.w	8009850 <__swbuf_r>
 80095ec:	6813      	ldr	r3, [r2, #0]
 80095ee:	1c58      	adds	r0, r3, #1
 80095f0:	6010      	str	r0, [r2, #0]
 80095f2:	7019      	strb	r1, [r3, #0]
 80095f4:	4608      	mov	r0, r1
 80095f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <__sfputs_r>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	4606      	mov	r6, r0
 8009600:	460f      	mov	r7, r1
 8009602:	4614      	mov	r4, r2
 8009604:	18d5      	adds	r5, r2, r3
 8009606:	42ac      	cmp	r4, r5
 8009608:	d101      	bne.n	800960e <__sfputs_r+0x12>
 800960a:	2000      	movs	r0, #0
 800960c:	e007      	b.n	800961e <__sfputs_r+0x22>
 800960e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009612:	463a      	mov	r2, r7
 8009614:	4630      	mov	r0, r6
 8009616:	f7ff ffda 	bl	80095ce <__sfputc_r>
 800961a:	1c43      	adds	r3, r0, #1
 800961c:	d1f3      	bne.n	8009606 <__sfputs_r+0xa>
 800961e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009620 <_vfiprintf_r>:
 8009620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009624:	460d      	mov	r5, r1
 8009626:	b09d      	sub	sp, #116	@ 0x74
 8009628:	4614      	mov	r4, r2
 800962a:	4698      	mov	r8, r3
 800962c:	4606      	mov	r6, r0
 800962e:	b118      	cbz	r0, 8009638 <_vfiprintf_r+0x18>
 8009630:	6a03      	ldr	r3, [r0, #32]
 8009632:	b90b      	cbnz	r3, 8009638 <_vfiprintf_r+0x18>
 8009634:	f7fc fdd0 	bl	80061d8 <__sinit>
 8009638:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800963a:	07d9      	lsls	r1, r3, #31
 800963c:	d405      	bmi.n	800964a <_vfiprintf_r+0x2a>
 800963e:	89ab      	ldrh	r3, [r5, #12]
 8009640:	059a      	lsls	r2, r3, #22
 8009642:	d402      	bmi.n	800964a <_vfiprintf_r+0x2a>
 8009644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009646:	f7fc ff16 	bl	8006476 <__retarget_lock_acquire_recursive>
 800964a:	89ab      	ldrh	r3, [r5, #12]
 800964c:	071b      	lsls	r3, r3, #28
 800964e:	d501      	bpl.n	8009654 <_vfiprintf_r+0x34>
 8009650:	692b      	ldr	r3, [r5, #16]
 8009652:	b99b      	cbnz	r3, 800967c <_vfiprintf_r+0x5c>
 8009654:	4629      	mov	r1, r5
 8009656:	4630      	mov	r0, r6
 8009658:	f000 f938 	bl	80098cc <__swsetup_r>
 800965c:	b170      	cbz	r0, 800967c <_vfiprintf_r+0x5c>
 800965e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009660:	07dc      	lsls	r4, r3, #31
 8009662:	d504      	bpl.n	800966e <_vfiprintf_r+0x4e>
 8009664:	f04f 30ff 	mov.w	r0, #4294967295
 8009668:	b01d      	add	sp, #116	@ 0x74
 800966a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966e:	89ab      	ldrh	r3, [r5, #12]
 8009670:	0598      	lsls	r0, r3, #22
 8009672:	d4f7      	bmi.n	8009664 <_vfiprintf_r+0x44>
 8009674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009676:	f7fc feff 	bl	8006478 <__retarget_lock_release_recursive>
 800967a:	e7f3      	b.n	8009664 <_vfiprintf_r+0x44>
 800967c:	2300      	movs	r3, #0
 800967e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009680:	2320      	movs	r3, #32
 8009682:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009686:	f8cd 800c 	str.w	r8, [sp, #12]
 800968a:	2330      	movs	r3, #48	@ 0x30
 800968c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800983c <_vfiprintf_r+0x21c>
 8009690:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009694:	f04f 0901 	mov.w	r9, #1
 8009698:	4623      	mov	r3, r4
 800969a:	469a      	mov	sl, r3
 800969c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096a0:	b10a      	cbz	r2, 80096a6 <_vfiprintf_r+0x86>
 80096a2:	2a25      	cmp	r2, #37	@ 0x25
 80096a4:	d1f9      	bne.n	800969a <_vfiprintf_r+0x7a>
 80096a6:	ebba 0b04 	subs.w	fp, sl, r4
 80096aa:	d00b      	beq.n	80096c4 <_vfiprintf_r+0xa4>
 80096ac:	465b      	mov	r3, fp
 80096ae:	4622      	mov	r2, r4
 80096b0:	4629      	mov	r1, r5
 80096b2:	4630      	mov	r0, r6
 80096b4:	f7ff ffa2 	bl	80095fc <__sfputs_r>
 80096b8:	3001      	adds	r0, #1
 80096ba:	f000 80a7 	beq.w	800980c <_vfiprintf_r+0x1ec>
 80096be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096c0:	445a      	add	r2, fp
 80096c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80096c4:	f89a 3000 	ldrb.w	r3, [sl]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f000 809f 	beq.w	800980c <_vfiprintf_r+0x1ec>
 80096ce:	2300      	movs	r3, #0
 80096d0:	f04f 32ff 	mov.w	r2, #4294967295
 80096d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096d8:	f10a 0a01 	add.w	sl, sl, #1
 80096dc:	9304      	str	r3, [sp, #16]
 80096de:	9307      	str	r3, [sp, #28]
 80096e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80096e6:	4654      	mov	r4, sl
 80096e8:	2205      	movs	r2, #5
 80096ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ee:	4853      	ldr	r0, [pc, #332]	@ (800983c <_vfiprintf_r+0x21c>)
 80096f0:	f7f6 fd8e 	bl	8000210 <memchr>
 80096f4:	9a04      	ldr	r2, [sp, #16]
 80096f6:	b9d8      	cbnz	r0, 8009730 <_vfiprintf_r+0x110>
 80096f8:	06d1      	lsls	r1, r2, #27
 80096fa:	bf44      	itt	mi
 80096fc:	2320      	movmi	r3, #32
 80096fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009702:	0713      	lsls	r3, r2, #28
 8009704:	bf44      	itt	mi
 8009706:	232b      	movmi	r3, #43	@ 0x2b
 8009708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800970c:	f89a 3000 	ldrb.w	r3, [sl]
 8009710:	2b2a      	cmp	r3, #42	@ 0x2a
 8009712:	d015      	beq.n	8009740 <_vfiprintf_r+0x120>
 8009714:	9a07      	ldr	r2, [sp, #28]
 8009716:	4654      	mov	r4, sl
 8009718:	2000      	movs	r0, #0
 800971a:	f04f 0c0a 	mov.w	ip, #10
 800971e:	4621      	mov	r1, r4
 8009720:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009724:	3b30      	subs	r3, #48	@ 0x30
 8009726:	2b09      	cmp	r3, #9
 8009728:	d94b      	bls.n	80097c2 <_vfiprintf_r+0x1a2>
 800972a:	b1b0      	cbz	r0, 800975a <_vfiprintf_r+0x13a>
 800972c:	9207      	str	r2, [sp, #28]
 800972e:	e014      	b.n	800975a <_vfiprintf_r+0x13a>
 8009730:	eba0 0308 	sub.w	r3, r0, r8
 8009734:	fa09 f303 	lsl.w	r3, r9, r3
 8009738:	4313      	orrs	r3, r2
 800973a:	9304      	str	r3, [sp, #16]
 800973c:	46a2      	mov	sl, r4
 800973e:	e7d2      	b.n	80096e6 <_vfiprintf_r+0xc6>
 8009740:	9b03      	ldr	r3, [sp, #12]
 8009742:	1d19      	adds	r1, r3, #4
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	9103      	str	r1, [sp, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	bfbb      	ittet	lt
 800974c:	425b      	neglt	r3, r3
 800974e:	f042 0202 	orrlt.w	r2, r2, #2
 8009752:	9307      	strge	r3, [sp, #28]
 8009754:	9307      	strlt	r3, [sp, #28]
 8009756:	bfb8      	it	lt
 8009758:	9204      	strlt	r2, [sp, #16]
 800975a:	7823      	ldrb	r3, [r4, #0]
 800975c:	2b2e      	cmp	r3, #46	@ 0x2e
 800975e:	d10a      	bne.n	8009776 <_vfiprintf_r+0x156>
 8009760:	7863      	ldrb	r3, [r4, #1]
 8009762:	2b2a      	cmp	r3, #42	@ 0x2a
 8009764:	d132      	bne.n	80097cc <_vfiprintf_r+0x1ac>
 8009766:	9b03      	ldr	r3, [sp, #12]
 8009768:	1d1a      	adds	r2, r3, #4
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	9203      	str	r2, [sp, #12]
 800976e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009772:	3402      	adds	r4, #2
 8009774:	9305      	str	r3, [sp, #20]
 8009776:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800984c <_vfiprintf_r+0x22c>
 800977a:	7821      	ldrb	r1, [r4, #0]
 800977c:	2203      	movs	r2, #3
 800977e:	4650      	mov	r0, sl
 8009780:	f7f6 fd46 	bl	8000210 <memchr>
 8009784:	b138      	cbz	r0, 8009796 <_vfiprintf_r+0x176>
 8009786:	9b04      	ldr	r3, [sp, #16]
 8009788:	eba0 000a 	sub.w	r0, r0, sl
 800978c:	2240      	movs	r2, #64	@ 0x40
 800978e:	4082      	lsls	r2, r0
 8009790:	4313      	orrs	r3, r2
 8009792:	3401      	adds	r4, #1
 8009794:	9304      	str	r3, [sp, #16]
 8009796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800979a:	4829      	ldr	r0, [pc, #164]	@ (8009840 <_vfiprintf_r+0x220>)
 800979c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097a0:	2206      	movs	r2, #6
 80097a2:	f7f6 fd35 	bl	8000210 <memchr>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d03f      	beq.n	800982a <_vfiprintf_r+0x20a>
 80097aa:	4b26      	ldr	r3, [pc, #152]	@ (8009844 <_vfiprintf_r+0x224>)
 80097ac:	bb1b      	cbnz	r3, 80097f6 <_vfiprintf_r+0x1d6>
 80097ae:	9b03      	ldr	r3, [sp, #12]
 80097b0:	3307      	adds	r3, #7
 80097b2:	f023 0307 	bic.w	r3, r3, #7
 80097b6:	3308      	adds	r3, #8
 80097b8:	9303      	str	r3, [sp, #12]
 80097ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097bc:	443b      	add	r3, r7
 80097be:	9309      	str	r3, [sp, #36]	@ 0x24
 80097c0:	e76a      	b.n	8009698 <_vfiprintf_r+0x78>
 80097c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80097c6:	460c      	mov	r4, r1
 80097c8:	2001      	movs	r0, #1
 80097ca:	e7a8      	b.n	800971e <_vfiprintf_r+0xfe>
 80097cc:	2300      	movs	r3, #0
 80097ce:	3401      	adds	r4, #1
 80097d0:	9305      	str	r3, [sp, #20]
 80097d2:	4619      	mov	r1, r3
 80097d4:	f04f 0c0a 	mov.w	ip, #10
 80097d8:	4620      	mov	r0, r4
 80097da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097de:	3a30      	subs	r2, #48	@ 0x30
 80097e0:	2a09      	cmp	r2, #9
 80097e2:	d903      	bls.n	80097ec <_vfiprintf_r+0x1cc>
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d0c6      	beq.n	8009776 <_vfiprintf_r+0x156>
 80097e8:	9105      	str	r1, [sp, #20]
 80097ea:	e7c4      	b.n	8009776 <_vfiprintf_r+0x156>
 80097ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80097f0:	4604      	mov	r4, r0
 80097f2:	2301      	movs	r3, #1
 80097f4:	e7f0      	b.n	80097d8 <_vfiprintf_r+0x1b8>
 80097f6:	ab03      	add	r3, sp, #12
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	462a      	mov	r2, r5
 80097fc:	4b12      	ldr	r3, [pc, #72]	@ (8009848 <_vfiprintf_r+0x228>)
 80097fe:	a904      	add	r1, sp, #16
 8009800:	4630      	mov	r0, r6
 8009802:	f7fb fe9d 	bl	8005540 <_printf_float>
 8009806:	4607      	mov	r7, r0
 8009808:	1c78      	adds	r0, r7, #1
 800980a:	d1d6      	bne.n	80097ba <_vfiprintf_r+0x19a>
 800980c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800980e:	07d9      	lsls	r1, r3, #31
 8009810:	d405      	bmi.n	800981e <_vfiprintf_r+0x1fe>
 8009812:	89ab      	ldrh	r3, [r5, #12]
 8009814:	059a      	lsls	r2, r3, #22
 8009816:	d402      	bmi.n	800981e <_vfiprintf_r+0x1fe>
 8009818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800981a:	f7fc fe2d 	bl	8006478 <__retarget_lock_release_recursive>
 800981e:	89ab      	ldrh	r3, [r5, #12]
 8009820:	065b      	lsls	r3, r3, #25
 8009822:	f53f af1f 	bmi.w	8009664 <_vfiprintf_r+0x44>
 8009826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009828:	e71e      	b.n	8009668 <_vfiprintf_r+0x48>
 800982a:	ab03      	add	r3, sp, #12
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	462a      	mov	r2, r5
 8009830:	4b05      	ldr	r3, [pc, #20]	@ (8009848 <_vfiprintf_r+0x228>)
 8009832:	a904      	add	r1, sp, #16
 8009834:	4630      	mov	r0, r6
 8009836:	f7fc f91d 	bl	8005a74 <_printf_i>
 800983a:	e7e4      	b.n	8009806 <_vfiprintf_r+0x1e6>
 800983c:	08009ddd 	.word	0x08009ddd
 8009840:	08009de7 	.word	0x08009de7
 8009844:	08005541 	.word	0x08005541
 8009848:	080095fd 	.word	0x080095fd
 800984c:	08009de3 	.word	0x08009de3

08009850 <__swbuf_r>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	460e      	mov	r6, r1
 8009854:	4614      	mov	r4, r2
 8009856:	4605      	mov	r5, r0
 8009858:	b118      	cbz	r0, 8009862 <__swbuf_r+0x12>
 800985a:	6a03      	ldr	r3, [r0, #32]
 800985c:	b90b      	cbnz	r3, 8009862 <__swbuf_r+0x12>
 800985e:	f7fc fcbb 	bl	80061d8 <__sinit>
 8009862:	69a3      	ldr	r3, [r4, #24]
 8009864:	60a3      	str	r3, [r4, #8]
 8009866:	89a3      	ldrh	r3, [r4, #12]
 8009868:	071a      	lsls	r2, r3, #28
 800986a:	d501      	bpl.n	8009870 <__swbuf_r+0x20>
 800986c:	6923      	ldr	r3, [r4, #16]
 800986e:	b943      	cbnz	r3, 8009882 <__swbuf_r+0x32>
 8009870:	4621      	mov	r1, r4
 8009872:	4628      	mov	r0, r5
 8009874:	f000 f82a 	bl	80098cc <__swsetup_r>
 8009878:	b118      	cbz	r0, 8009882 <__swbuf_r+0x32>
 800987a:	f04f 37ff 	mov.w	r7, #4294967295
 800987e:	4638      	mov	r0, r7
 8009880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	6922      	ldr	r2, [r4, #16]
 8009886:	1a98      	subs	r0, r3, r2
 8009888:	6963      	ldr	r3, [r4, #20]
 800988a:	b2f6      	uxtb	r6, r6
 800988c:	4283      	cmp	r3, r0
 800988e:	4637      	mov	r7, r6
 8009890:	dc05      	bgt.n	800989e <__swbuf_r+0x4e>
 8009892:	4621      	mov	r1, r4
 8009894:	4628      	mov	r0, r5
 8009896:	f7ff fa49 	bl	8008d2c <_fflush_r>
 800989a:	2800      	cmp	r0, #0
 800989c:	d1ed      	bne.n	800987a <__swbuf_r+0x2a>
 800989e:	68a3      	ldr	r3, [r4, #8]
 80098a0:	3b01      	subs	r3, #1
 80098a2:	60a3      	str	r3, [r4, #8]
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	6022      	str	r2, [r4, #0]
 80098aa:	701e      	strb	r6, [r3, #0]
 80098ac:	6962      	ldr	r2, [r4, #20]
 80098ae:	1c43      	adds	r3, r0, #1
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d004      	beq.n	80098be <__swbuf_r+0x6e>
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	07db      	lsls	r3, r3, #31
 80098b8:	d5e1      	bpl.n	800987e <__swbuf_r+0x2e>
 80098ba:	2e0a      	cmp	r6, #10
 80098bc:	d1df      	bne.n	800987e <__swbuf_r+0x2e>
 80098be:	4621      	mov	r1, r4
 80098c0:	4628      	mov	r0, r5
 80098c2:	f7ff fa33 	bl	8008d2c <_fflush_r>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d0d9      	beq.n	800987e <__swbuf_r+0x2e>
 80098ca:	e7d6      	b.n	800987a <__swbuf_r+0x2a>

080098cc <__swsetup_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4b29      	ldr	r3, [pc, #164]	@ (8009974 <__swsetup_r+0xa8>)
 80098d0:	4605      	mov	r5, r0
 80098d2:	6818      	ldr	r0, [r3, #0]
 80098d4:	460c      	mov	r4, r1
 80098d6:	b118      	cbz	r0, 80098e0 <__swsetup_r+0x14>
 80098d8:	6a03      	ldr	r3, [r0, #32]
 80098da:	b90b      	cbnz	r3, 80098e0 <__swsetup_r+0x14>
 80098dc:	f7fc fc7c 	bl	80061d8 <__sinit>
 80098e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e4:	0719      	lsls	r1, r3, #28
 80098e6:	d422      	bmi.n	800992e <__swsetup_r+0x62>
 80098e8:	06da      	lsls	r2, r3, #27
 80098ea:	d407      	bmi.n	80098fc <__swsetup_r+0x30>
 80098ec:	2209      	movs	r2, #9
 80098ee:	602a      	str	r2, [r5, #0]
 80098f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098f4:	81a3      	strh	r3, [r4, #12]
 80098f6:	f04f 30ff 	mov.w	r0, #4294967295
 80098fa:	e033      	b.n	8009964 <__swsetup_r+0x98>
 80098fc:	0758      	lsls	r0, r3, #29
 80098fe:	d512      	bpl.n	8009926 <__swsetup_r+0x5a>
 8009900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009902:	b141      	cbz	r1, 8009916 <__swsetup_r+0x4a>
 8009904:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009908:	4299      	cmp	r1, r3
 800990a:	d002      	beq.n	8009912 <__swsetup_r+0x46>
 800990c:	4628      	mov	r0, r5
 800990e:	f7fd fc13 	bl	8007138 <_free_r>
 8009912:	2300      	movs	r3, #0
 8009914:	6363      	str	r3, [r4, #52]	@ 0x34
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800991c:	81a3      	strh	r3, [r4, #12]
 800991e:	2300      	movs	r3, #0
 8009920:	6063      	str	r3, [r4, #4]
 8009922:	6923      	ldr	r3, [r4, #16]
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	f043 0308 	orr.w	r3, r3, #8
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	6923      	ldr	r3, [r4, #16]
 8009930:	b94b      	cbnz	r3, 8009946 <__swsetup_r+0x7a>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800993c:	d003      	beq.n	8009946 <__swsetup_r+0x7a>
 800993e:	4621      	mov	r1, r4
 8009940:	4628      	mov	r0, r5
 8009942:	f000 f883 	bl	8009a4c <__smakebuf_r>
 8009946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800994a:	f013 0201 	ands.w	r2, r3, #1
 800994e:	d00a      	beq.n	8009966 <__swsetup_r+0x9a>
 8009950:	2200      	movs	r2, #0
 8009952:	60a2      	str	r2, [r4, #8]
 8009954:	6962      	ldr	r2, [r4, #20]
 8009956:	4252      	negs	r2, r2
 8009958:	61a2      	str	r2, [r4, #24]
 800995a:	6922      	ldr	r2, [r4, #16]
 800995c:	b942      	cbnz	r2, 8009970 <__swsetup_r+0xa4>
 800995e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009962:	d1c5      	bne.n	80098f0 <__swsetup_r+0x24>
 8009964:	bd38      	pop	{r3, r4, r5, pc}
 8009966:	0799      	lsls	r1, r3, #30
 8009968:	bf58      	it	pl
 800996a:	6962      	ldrpl	r2, [r4, #20]
 800996c:	60a2      	str	r2, [r4, #8]
 800996e:	e7f4      	b.n	800995a <__swsetup_r+0x8e>
 8009970:	2000      	movs	r0, #0
 8009972:	e7f7      	b.n	8009964 <__swsetup_r+0x98>
 8009974:	20000018 	.word	0x20000018

08009978 <_raise_r>:
 8009978:	291f      	cmp	r1, #31
 800997a:	b538      	push	{r3, r4, r5, lr}
 800997c:	4605      	mov	r5, r0
 800997e:	460c      	mov	r4, r1
 8009980:	d904      	bls.n	800998c <_raise_r+0x14>
 8009982:	2316      	movs	r3, #22
 8009984:	6003      	str	r3, [r0, #0]
 8009986:	f04f 30ff 	mov.w	r0, #4294967295
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800998e:	b112      	cbz	r2, 8009996 <_raise_r+0x1e>
 8009990:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009994:	b94b      	cbnz	r3, 80099aa <_raise_r+0x32>
 8009996:	4628      	mov	r0, r5
 8009998:	f000 f830 	bl	80099fc <_getpid_r>
 800999c:	4622      	mov	r2, r4
 800999e:	4601      	mov	r1, r0
 80099a0:	4628      	mov	r0, r5
 80099a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099a6:	f000 b817 	b.w	80099d8 <_kill_r>
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d00a      	beq.n	80099c4 <_raise_r+0x4c>
 80099ae:	1c59      	adds	r1, r3, #1
 80099b0:	d103      	bne.n	80099ba <_raise_r+0x42>
 80099b2:	2316      	movs	r3, #22
 80099b4:	6003      	str	r3, [r0, #0]
 80099b6:	2001      	movs	r0, #1
 80099b8:	e7e7      	b.n	800998a <_raise_r+0x12>
 80099ba:	2100      	movs	r1, #0
 80099bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80099c0:	4620      	mov	r0, r4
 80099c2:	4798      	blx	r3
 80099c4:	2000      	movs	r0, #0
 80099c6:	e7e0      	b.n	800998a <_raise_r+0x12>

080099c8 <raise>:
 80099c8:	4b02      	ldr	r3, [pc, #8]	@ (80099d4 <raise+0xc>)
 80099ca:	4601      	mov	r1, r0
 80099cc:	6818      	ldr	r0, [r3, #0]
 80099ce:	f7ff bfd3 	b.w	8009978 <_raise_r>
 80099d2:	bf00      	nop
 80099d4:	20000018 	.word	0x20000018

080099d8 <_kill_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4d07      	ldr	r5, [pc, #28]	@ (80099f8 <_kill_r+0x20>)
 80099dc:	2300      	movs	r3, #0
 80099de:	4604      	mov	r4, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	4611      	mov	r1, r2
 80099e4:	602b      	str	r3, [r5, #0]
 80099e6:	f7f8 fbf1 	bl	80021cc <_kill>
 80099ea:	1c43      	adds	r3, r0, #1
 80099ec:	d102      	bne.n	80099f4 <_kill_r+0x1c>
 80099ee:	682b      	ldr	r3, [r5, #0]
 80099f0:	b103      	cbz	r3, 80099f4 <_kill_r+0x1c>
 80099f2:	6023      	str	r3, [r4, #0]
 80099f4:	bd38      	pop	{r3, r4, r5, pc}
 80099f6:	bf00      	nop
 80099f8:	200004e4 	.word	0x200004e4

080099fc <_getpid_r>:
 80099fc:	f7f8 bbde 	b.w	80021bc <_getpid>

08009a00 <__swhatbuf_r>:
 8009a00:	b570      	push	{r4, r5, r6, lr}
 8009a02:	460c      	mov	r4, r1
 8009a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a08:	2900      	cmp	r1, #0
 8009a0a:	b096      	sub	sp, #88	@ 0x58
 8009a0c:	4615      	mov	r5, r2
 8009a0e:	461e      	mov	r6, r3
 8009a10:	da0d      	bge.n	8009a2e <__swhatbuf_r+0x2e>
 8009a12:	89a3      	ldrh	r3, [r4, #12]
 8009a14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a18:	f04f 0100 	mov.w	r1, #0
 8009a1c:	bf14      	ite	ne
 8009a1e:	2340      	movne	r3, #64	@ 0x40
 8009a20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a24:	2000      	movs	r0, #0
 8009a26:	6031      	str	r1, [r6, #0]
 8009a28:	602b      	str	r3, [r5, #0]
 8009a2a:	b016      	add	sp, #88	@ 0x58
 8009a2c:	bd70      	pop	{r4, r5, r6, pc}
 8009a2e:	466a      	mov	r2, sp
 8009a30:	f000 f848 	bl	8009ac4 <_fstat_r>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	dbec      	blt.n	8009a12 <__swhatbuf_r+0x12>
 8009a38:	9901      	ldr	r1, [sp, #4]
 8009a3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a42:	4259      	negs	r1, r3
 8009a44:	4159      	adcs	r1, r3
 8009a46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a4a:	e7eb      	b.n	8009a24 <__swhatbuf_r+0x24>

08009a4c <__smakebuf_r>:
 8009a4c:	898b      	ldrh	r3, [r1, #12]
 8009a4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a50:	079d      	lsls	r5, r3, #30
 8009a52:	4606      	mov	r6, r0
 8009a54:	460c      	mov	r4, r1
 8009a56:	d507      	bpl.n	8009a68 <__smakebuf_r+0x1c>
 8009a58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	6123      	str	r3, [r4, #16]
 8009a60:	2301      	movs	r3, #1
 8009a62:	6163      	str	r3, [r4, #20]
 8009a64:	b003      	add	sp, #12
 8009a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a68:	ab01      	add	r3, sp, #4
 8009a6a:	466a      	mov	r2, sp
 8009a6c:	f7ff ffc8 	bl	8009a00 <__swhatbuf_r>
 8009a70:	9f00      	ldr	r7, [sp, #0]
 8009a72:	4605      	mov	r5, r0
 8009a74:	4639      	mov	r1, r7
 8009a76:	4630      	mov	r0, r6
 8009a78:	f7fd fbd2 	bl	8007220 <_malloc_r>
 8009a7c:	b948      	cbnz	r0, 8009a92 <__smakebuf_r+0x46>
 8009a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a82:	059a      	lsls	r2, r3, #22
 8009a84:	d4ee      	bmi.n	8009a64 <__smakebuf_r+0x18>
 8009a86:	f023 0303 	bic.w	r3, r3, #3
 8009a8a:	f043 0302 	orr.w	r3, r3, #2
 8009a8e:	81a3      	strh	r3, [r4, #12]
 8009a90:	e7e2      	b.n	8009a58 <__smakebuf_r+0xc>
 8009a92:	89a3      	ldrh	r3, [r4, #12]
 8009a94:	6020      	str	r0, [r4, #0]
 8009a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a9a:	81a3      	strh	r3, [r4, #12]
 8009a9c:	9b01      	ldr	r3, [sp, #4]
 8009a9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009aa2:	b15b      	cbz	r3, 8009abc <__smakebuf_r+0x70>
 8009aa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f000 f81d 	bl	8009ae8 <_isatty_r>
 8009aae:	b128      	cbz	r0, 8009abc <__smakebuf_r+0x70>
 8009ab0:	89a3      	ldrh	r3, [r4, #12]
 8009ab2:	f023 0303 	bic.w	r3, r3, #3
 8009ab6:	f043 0301 	orr.w	r3, r3, #1
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	431d      	orrs	r5, r3
 8009ac0:	81a5      	strh	r5, [r4, #12]
 8009ac2:	e7cf      	b.n	8009a64 <__smakebuf_r+0x18>

08009ac4 <_fstat_r>:
 8009ac4:	b538      	push	{r3, r4, r5, lr}
 8009ac6:	4d07      	ldr	r5, [pc, #28]	@ (8009ae4 <_fstat_r+0x20>)
 8009ac8:	2300      	movs	r3, #0
 8009aca:	4604      	mov	r4, r0
 8009acc:	4608      	mov	r0, r1
 8009ace:	4611      	mov	r1, r2
 8009ad0:	602b      	str	r3, [r5, #0]
 8009ad2:	f7f8 fbbf 	bl	8002254 <_fstat>
 8009ad6:	1c43      	adds	r3, r0, #1
 8009ad8:	d102      	bne.n	8009ae0 <_fstat_r+0x1c>
 8009ada:	682b      	ldr	r3, [r5, #0]
 8009adc:	b103      	cbz	r3, 8009ae0 <_fstat_r+0x1c>
 8009ade:	6023      	str	r3, [r4, #0]
 8009ae0:	bd38      	pop	{r3, r4, r5, pc}
 8009ae2:	bf00      	nop
 8009ae4:	200004e4 	.word	0x200004e4

08009ae8 <_isatty_r>:
 8009ae8:	b538      	push	{r3, r4, r5, lr}
 8009aea:	4d06      	ldr	r5, [pc, #24]	@ (8009b04 <_isatty_r+0x1c>)
 8009aec:	2300      	movs	r3, #0
 8009aee:	4604      	mov	r4, r0
 8009af0:	4608      	mov	r0, r1
 8009af2:	602b      	str	r3, [r5, #0]
 8009af4:	f7f8 fbbe 	bl	8002274 <_isatty>
 8009af8:	1c43      	adds	r3, r0, #1
 8009afa:	d102      	bne.n	8009b02 <_isatty_r+0x1a>
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	b103      	cbz	r3, 8009b02 <_isatty_r+0x1a>
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
 8009b04:	200004e4 	.word	0x200004e4

08009b08 <_init>:
 8009b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0a:	bf00      	nop
 8009b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0e:	bc08      	pop	{r3}
 8009b10:	469e      	mov	lr, r3
 8009b12:	4770      	bx	lr

08009b14 <_fini>:
 8009b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b16:	bf00      	nop
 8009b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b1a:	bc08      	pop	{r3}
 8009b1c:	469e      	mov	lr, r3
 8009b1e:	4770      	bx	lr
